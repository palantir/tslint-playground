{"version":3,"sources":["../node_modules/tslint/lib/rules/typedefWhitespaceRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","SPACE_OPTIONS","type","enum","SPACE_OBJECT","properties","call-signature","index-signature","parameter","property-declaration","variable-declaration","additionalProperties","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","option","location","prototype","sourceFile","args","ruleArguments","options","left","right","applyWithWalker","TypedefWhitespaceWalker","ruleName","metadata","description","descriptionDetails","optionsDescription","Utils","dedent","templateObject_1","__makeTemplateObject","items","additionalItems","optionExamples","typescriptOnly","hasFix","Rules","AbstractRule","walk","_this","cb","node","optionType","kind","SyntaxKind","FunctionDeclaration","FunctionExpression","MethodDeclaration","ArrowFunction","GetAccessor","SetAccessor","MethodSignature","ConstructSignature","CallSignature","IndexSignature","VariableDeclaration","Parameter","PropertySignature","PropertyDeclaration","getOptionType","undefined","checkSpace","forEachChild","key","_a","colon","getChildOfKind","ColonToken","checkRight","end","checkLeft","colonEnd","pos","text","current","charCodeAt","isLineBreak","isWhiteSpaceSingleLine","validateWhitespace","colonStart","start","addFailure","Replacement","deleteFromTo","appendText","AbstractWalker"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MAEAI,GACAC,KAAA,SACAC,MAAA,+BAEAC,GACAF,KAAA,SACAG,YACAC,iBAAAL,EACAM,kBAAAN,EACAO,UAAAP,EACAQ,uBAAAR,EACAS,uBAAAT,GAEAU,sBAAA,GAEAC,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KA+CA,OAjDAnB,EAAAqB,UAAAL,EAAAC,GAKAD,EAAAM,eAAA,SAAAC,EAAAC,EAAAlB,GACA,kBAAAiB,EAAA,IAAAC,EAAA,aAAAlB,GAEAU,EAAAS,UAAAP,MAAA,SAAAQ,GACA,IAAAC,EAAAR,KAAAS,cACAC,GACAC,KAAAH,EAAA,GACAI,MAAAJ,EAAA,IAEA,OAAAR,KAAAa,gBAAA,IAAAC,EAAAP,EAAAP,KAAAe,SAAAL,KAEAb,EAAAmB,UACAD,SAAA,qBACAE,YAAA,yDACAC,mBAAA,iFACAC,mBAAAlC,EAAAmC,MAAAC,OAAAC,MAAAzC,EAAA0C,sBAAA,48CACAb,SACAvB,KAAA,QACAqC,OAAAnC,KACAoC,iBAAA,GAEAC,kBAEA,GAEAnC,iBAAA,UACAC,kBAAA,UACAC,UAAA,UACAC,uBAAA,UACAC,uBAAA,YAGAJ,iBAAA,WACAC,kBAAA,WACAC,UAAA,WACAC,uBAAA,WACAC,uBAAA,cAIAR,KAAA,aACAwC,gBAAA,EACAC,QAAA,GAEA/B,EAlDA,CAmDCZ,EAAA4C,MAAAC,cACDnD,EAAAkB,OACA,IA0GAyB,EA1GAR,EAAA,SAAAhB,GAEA,SAAAgB,IACA,cAAAhB,KAAAC,MAAAC,KAAAC,YAAAD,KA4EA,OA9EAnB,EAAAqB,UAAAY,EAAAhB,GAIAgB,EAAAR,UAAAyB,KAAA,SAAAxB,GACA,IAAAyB,EAAAhC,KACAiC,EAAA,SAAAC,GACA,IAAAC,EAyEA,SAAAD,GACA,OAAAA,EAAAE,MACA,KAAApD,EAAAqD,WAAAC,oBACA,KAAAtD,EAAAqD,WAAAE,mBACA,KAAAvD,EAAAqD,WAAAG,kBACA,KAAAxD,EAAAqD,WAAAI,cACA,KAAAzD,EAAAqD,WAAAK,YACA,KAAA1D,EAAAqD,WAAAM,YACA,KAAA3D,EAAAqD,WAAAO,gBACA,KAAA5D,EAAAqD,WAAAQ,mBACA,KAAA7D,EAAAqD,WAAAS,cACA,uBACA,KAAA9D,EAAAqD,WAAAU,eACA,wBACA,KAAA/D,EAAAqD,WAAAW,oBACA,6BACA,KAAAhE,EAAAqD,WAAAY,UACA,kBACA,KAAAjE,EAAAqD,WAAAa,kBACA,KAAAlE,EAAAqD,WAAAc,oBACA,6BACA,QACA,QA/FAC,CAAAlB,GAIA,YAHAmB,IAAAlB,GACAH,EAAAsB,WAAApB,EAAAC,GAEAnD,EAAAuE,aAAArB,EAAAD,IAEA,OAAAjD,EAAAuE,aAAAhD,EAAA0B,IAEAnB,EAAAR,UAAAgD,WAAA,SAAApB,EAAAsB,GACA,YAAAtB,QAAAmB,IAAAnB,EAAA/C,KAAA,CAGA,IAAAsE,EAAAzD,KAAAU,QAAAC,EAAA8C,EAAA9C,KAAAC,EAAA6C,EAAA7C,MACA8C,EAAA3E,EAAA4E,eAAAzB,EAAAlD,EAAAqD,WAAAuB,WAAA5D,KAAAO,iBACA8C,IAAAzC,QAAAyC,IAAAzC,EAAA4C,IACAxD,KAAA6D,WAAAH,EAAAI,IAAAlD,EAAA4C,WAEAH,IAAA1C,QAAA0C,IAAA1C,EAAA6C,IACAxD,KAAA+D,UAAAL,EAAAI,IAAA,EAAAnD,EAAA6C,QAGA1C,EAAAR,UAAAuD,WAAA,SAAAG,EAAA5D,EAAAoD,GACA,IAAAS,EAAAD,EACAE,EAAAlE,KAAAO,WAAA2D,KACAC,EAAAD,EAAAE,WAAAH,GACA,IAAAjF,EAAAqF,YAAAF,GAAA,CAGA,KAAAnF,EAAAsF,uBAAAH,MACAF,EACAE,EAAAD,EAAAE,WAAAH,GAEA,OAAAjE,KAAAuE,mBAAAP,EAAAC,EAAA7D,EAAA,QAAAoD,KAEA1C,EAAAR,UAAAyD,UAAA,SAAAS,EAAApE,EAAAoD,GAIA,IAHA,IAAAS,EAAAO,EACAN,EAAAlE,KAAAO,WAAA2D,KACAC,EAAAD,EAAAE,WAAAH,EAAA,GACAjF,EAAAsF,uBAAAH,MACAF,EACAE,EAAAD,EAAAE,WAAAH,EAAA,GAEA,IAAAjF,EAAAqF,YAAAF,GAGA,OAAAnE,KAAAuE,mBAAAN,EAAAO,EAAApE,EAAA,SAAAoD,IAEA1C,EAAAR,UAAAiE,mBAAA,SAAAE,EAAAX,EAAA1D,EAAAC,EAAAmD,GACA,OAAApD,GACA,cACAqE,IAAAX,GACA9D,KAAA0E,WAAAD,EAAAX,EAAAjE,EAAAM,eAAAC,EAAAC,EAAAmD,GAAAvE,EAAA0F,YAAAC,aAAAH,EAAAX,IAEA,MACA,YACAW,IAAAX,GACA9D,KAAA0E,WAAAZ,IAAAjE,EAAAM,eAAAC,EAAAC,EAAAmD,GAAAvE,EAAA0F,YAAAE,WAAAf,EAAA,MAEA,MACA,eACA,OAAAA,EAAAW,GACA,OACAzE,KAAA0E,WAAAZ,IAAAjE,EAAAM,eAAAC,EAAAC,EAAAmD,GAAAvE,EAAA0F,YAAAE,WAAAf,EAAA,MACA,MACA,OACA,MACA,QACA9D,KAAA0E,WAAAD,EAAA,EAAAX,EAAAjE,EAAAM,eAAAC,EAAAC,EAAAmD,GAAAvE,EAAA0F,YAAAC,aAAAH,EAAA,EAAAX,OAIAhD,EA/EA,CAgFC7B,EAAA6F","file":"static/js/37.f49f756f.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\n/* tslint:disable:object-literal-sort-keys */\nvar SPACE_OPTIONS = {\n    type: \"string\",\n    enum: [\"nospace\", \"onespace\", \"space\"],\n};\nvar SPACE_OBJECT = {\n    type: \"object\",\n    properties: {\n        \"call-signature\": SPACE_OPTIONS,\n        \"index-signature\": SPACE_OPTIONS,\n        parameter: SPACE_OPTIONS,\n        \"property-declaration\": SPACE_OPTIONS,\n        \"variable-declaration\": SPACE_OPTIONS,\n    },\n    additionalProperties: false,\n};\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (option, location, type) {\n        return \"expected \" + option + \" \" + location + \" colon in \" + type;\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        var args = this.ruleArguments;\n        var options = {\n            left: args[0],\n            right: args[1],\n        };\n        return this.applyWithWalker(new TypedefWhitespaceWalker(sourceFile, this.ruleName, options));\n    };\n    Rule.metadata = {\n        ruleName: \"typedef-whitespace\",\n        description: \"Requires or disallows whitespace for type definitions.\",\n        descriptionDetails: \"Determines if a space is required or not before the colon in a type specifier.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Two arguments which are both objects.\\n            The first argument specifies how much space should be to the _left_ of a typedef colon.\\n            The second argument specifies how much space should be to the _right_ of a typedef colon.\\n            Each key should have a value of `\\\"onespace\\\"`, `\\\"space\\\"` or `\\\"nospace\\\"`.\\n            Possible keys are:\\n\\n            * `\\\"call-signature\\\"` checks return type of functions.\\n            * `\\\"index-signature\\\"` checks index type specifier of indexers.\\n            * `\\\"parameter\\\"` checks function parameters.\\n            * `\\\"property-declaration\\\"` checks object property declarations.\\n            * `\\\"variable-declaration\\\"` checks variable declaration.\"], [\"\\n            Two arguments which are both objects.\\n            The first argument specifies how much space should be to the _left_ of a typedef colon.\\n            The second argument specifies how much space should be to the _right_ of a typedef colon.\\n            Each key should have a value of \\\\`\\\"onespace\\\"\\\\`, \\\\`\\\"space\\\"\\\\` or \\\\`\\\"nospace\\\"\\\\`.\\n            Possible keys are:\\n\\n            * \\\\`\\\"call-signature\\\"\\\\` checks return type of functions.\\n            * \\\\`\\\"index-signature\\\"\\\\` checks index type specifier of indexers.\\n            * \\\\`\\\"parameter\\\"\\\\` checks function parameters.\\n            * \\\\`\\\"property-declaration\\\"\\\\` checks object property declarations.\\n            * \\\\`\\\"variable-declaration\\\"\\\\` checks variable declaration.\"]))),\n        options: {\n            type: \"array\",\n            items: [SPACE_OBJECT, SPACE_OBJECT],\n            additionalItems: false,\n        },\n        optionExamples: [\n            [\n                true,\n                {\n                    \"call-signature\": \"nospace\",\n                    \"index-signature\": \"nospace\",\n                    parameter: \"nospace\",\n                    \"property-declaration\": \"nospace\",\n                    \"variable-declaration\": \"nospace\",\n                },\n                {\n                    \"call-signature\": \"onespace\",\n                    \"index-signature\": \"onespace\",\n                    parameter: \"onespace\",\n                    \"property-declaration\": \"onespace\",\n                    \"variable-declaration\": \"onespace\",\n                },\n            ],\n        ],\n        type: \"typescript\",\n        typescriptOnly: true,\n        hasFix: true,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar TypedefWhitespaceWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(TypedefWhitespaceWalker, _super);\n    function TypedefWhitespaceWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TypedefWhitespaceWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        var cb = function (node) {\n            var optionType = getOptionType(node);\n            if (optionType !== undefined) {\n                _this.checkSpace(node, optionType);\n            }\n            return ts.forEachChild(node, cb);\n        };\n        return ts.forEachChild(sourceFile, cb);\n    };\n    TypedefWhitespaceWalker.prototype.checkSpace = function (node, key) {\n        if (!(\"type\" in node) || node.type === undefined) {\n            return;\n        }\n        var _a = this.options, left = _a.left, right = _a.right;\n        var colon = tsutils_1.getChildOfKind(node, ts.SyntaxKind.ColonToken, this.sourceFile);\n        if (right !== undefined && right[key] !== undefined) {\n            this.checkRight(colon.end, right[key], key);\n        }\n        if (left !== undefined && left[key] !== undefined) {\n            this.checkLeft(colon.end - 1, left[key], key);\n        }\n    };\n    TypedefWhitespaceWalker.prototype.checkRight = function (colonEnd, option, key) {\n        var pos = colonEnd;\n        var text = this.sourceFile.text;\n        var current = text.charCodeAt(pos);\n        if (ts.isLineBreak(current)) {\n            return;\n        }\n        while (ts.isWhiteSpaceSingleLine(current)) {\n            ++pos;\n            current = text.charCodeAt(pos);\n        }\n        return this.validateWhitespace(colonEnd, pos, option, \"after\", key);\n    };\n    TypedefWhitespaceWalker.prototype.checkLeft = function (colonStart, option, key) {\n        var pos = colonStart;\n        var text = this.sourceFile.text;\n        var current = text.charCodeAt(pos - 1);\n        while (ts.isWhiteSpaceSingleLine(current)) {\n            --pos;\n            current = text.charCodeAt(pos - 1);\n        }\n        if (ts.isLineBreak(current)) {\n            return;\n        }\n        return this.validateWhitespace(pos, colonStart, option, \"before\", key);\n    };\n    TypedefWhitespaceWalker.prototype.validateWhitespace = function (start, end, option, location, key) {\n        switch (option) {\n            case \"nospace\":\n                if (start !== end) {\n                    this.addFailure(start, end, Rule.FAILURE_STRING(option, location, key), Lint.Replacement.deleteFromTo(start, end));\n                }\n                break;\n            case \"space\":\n                if (start === end) {\n                    this.addFailure(end, end, Rule.FAILURE_STRING(option, location, key), Lint.Replacement.appendText(end, \" \"));\n                }\n                break;\n            case \"onespace\":\n                switch (end - start) {\n                    case 0:\n                        this.addFailure(end, end, Rule.FAILURE_STRING(option, location, key), Lint.Replacement.appendText(end, \" \"));\n                        break;\n                    case 1:\n                        break;\n                    default:\n                        this.addFailure(start + 1, end, Rule.FAILURE_STRING(option, location, key), Lint.Replacement.deleteFromTo(start + 1, end));\n                }\n        }\n    };\n    return TypedefWhitespaceWalker;\n}(Lint.AbstractWalker));\nfunction getOptionType(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.FunctionDeclaration:\n        case ts.SyntaxKind.FunctionExpression:\n        case ts.SyntaxKind.MethodDeclaration:\n        case ts.SyntaxKind.ArrowFunction:\n        case ts.SyntaxKind.GetAccessor:\n        case ts.SyntaxKind.SetAccessor:\n        case ts.SyntaxKind.MethodSignature:\n        case ts.SyntaxKind.ConstructSignature:\n        case ts.SyntaxKind.CallSignature:\n            return \"call-signature\";\n        case ts.SyntaxKind.IndexSignature:\n            return \"index-signature\";\n        case ts.SyntaxKind.VariableDeclaration:\n            return \"variable-declaration\";\n        case ts.SyntaxKind.Parameter:\n            return \"parameter\";\n        case ts.SyntaxKind.PropertySignature:\n        case ts.SyntaxKind.PropertyDeclaration:\n            return \"property-declaration\";\n        default:\n            return undefined;\n    }\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/typedefWhitespaceRule.js\n// module id = 2150\n// module chunks = 37"],"sourceRoot":""}