webpackJsonp([126],{2045:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r,a=n(1),l=n(843),o=n(1116),s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a.__extends(t,e),t.FAILURE_STRING_FACTORY=function(e){return"Exceeds maximum line length of "+e},t.prototype.isEnabled=function(){var t=this.getRuleOptions().limit;return e.prototype.isEnabled.call(this)&&t>0},t.prototype.apply=function(e){return this.applyWithFunction(e,p,this.getRuleOptions())},t.prototype.getRuleOptions=function(){var e=this.ruleArguments[0],t={limit:0};if("number"===typeof e)t.limit=e;else{t=e;var n=e["ignore-pattern"];t.ignorePattern="string"===typeof n?new RegExp(n):void 0}return t.limit=Number(t.limit),t},t.metadata={ruleName:"max-line-length",description:"Requires lines to be under a certain max length.",rationale:o.Utils.dedent(i||(i=a.__makeTemplateObject(["\n            Limiting the length of a line of code improves code readability.\n            It also makes comparing code side-by-side easier and improves compatibility with\n            various editors, IDEs, and diff viewers."],["\n            Limiting the length of a line of code improves code readability.\n            It also makes comparing code side-by-side easier and improves compatibility with\n            various editors, IDEs, and diff viewers."]))),optionsDescription:o.Utils.dedent(r||(r=a.__makeTemplateObject(["\n        It can take one argument, which can be any of the following:\n        * integer indicating maximum length of lines.\n        * object with keys:\n          * `limit` - number greater than 0 defining the max line length\n          * `ignore-pattern` - string defining ignore pattern for this rule, being parsed by `new RegExp()`.\n            For example:\n             * `// ` pattern will ignore all in-line comments.\n             * `^import ` pattern will ignore all import statements.\n             * `^export {(.*?)}` pattern will ignore all multiple export statements.\n             * `class [a-zA-Z]+ implements ` pattern will ignore all class declarations implementing interfaces.\n             * `^import |^export {(.*?)}|class [a-zA-Z]+ implements |// ` pattern will ignore all the cases listed above.\n         "],["\n        It can take one argument, which can be any of the following:\n        * integer indicating maximum length of lines.\n        * object with keys:\n          * \\`limit\\` - number greater than 0 defining the max line length\n          * \\`ignore-pattern\\` - string defining ignore pattern for this rule, being parsed by \\`new RegExp()\\`.\n            For example:\n             * \\`\\/\\/ \\` pattern will ignore all in-line comments.\n             * \\`^import \\` pattern will ignore all import statements.\n             * \\`^export \\{(.*?)\\}\\` pattern will ignore all multiple export statements.\n             * \\`class [a-zA-Z]+ implements \\` pattern will ignore all class declarations implementing interfaces.\n             * \\`^import |^export \\{(.*?)\\}|class [a-zA-Z]+ implements |// \\` pattern will ignore all the cases listed above.\n         "]))),options:{type:"array",items:{oneOf:[{type:"number"},{type:"object",properties:{limit:{type:"number"},"ignore-pattern":{type:"string"}},additionalProperties:!1}]},minLength:1,maxLength:2},optionExamples:[[!0,120],[!0,{limit:120,"ignore-pattern":"^import |^export {(.*?)}"}]],type:"maintainability",typescriptOnly:!1},t}(o.Rules.AbstractRule);function p(e){for(var t=e.options.limit,n=e.options.ignorePattern,i=0,r=l.getLineRanges(e.sourceFile);i<r.length;i++){var a=r[i];if(!(a.contentLength<=t)){var o=e.sourceFile.text.substr(a.pos,a.contentLength);void 0!==n&&n.test(o)||e.addFailureAt(a.pos,a.contentLength,s.FAILURE_STRING_FACTORY(t))}}}t.Rule=s}});
//# sourceMappingURL=126.4d26cc3f.chunk.js.map