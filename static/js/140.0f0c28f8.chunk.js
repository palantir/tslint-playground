webpackJsonp([140],{2030:function(e,a,s){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var n,t=s(1),i=s(57),r=s(253),l=s(1116),o=s(56);!function(e){e.CamelCase="camel-case",e.PascalCase="pascal-case",e.KebabCase="kebab-case",e.SnakeCase="snake-case"}(n||(n={}));var c=[n.CamelCase,n.PascalCase,n.KebabCase,n.SnakeCase],m=new Set(c);function u(e,a){switch(a){case n.CamelCase:return o.isCamelCased(e);case n.PascalCase:return o.isPascalCased(e);case n.KebabCase:return o.isKebabCased(e);case n.SnakeCase:return o.isSnakeCased(e)}}var p,d=function(e){try{return RegExp(e,"i")}catch(e){return}},C=function(e,a){if(void 0!==a)return"string"===typeof a?function(e,a){if(m.has(a))return u(i.parse(e.fileName).name,a)?void 0:a;f.showWarning("Unexpected casing option provided: "+a)}(e,a):"object"===typeof a?function(e,a){var s=i.parse(e.fileName).base,n=Object.keys(a);if(0!==n.length)for(var t=0,r=n;t<r.length;t++){var l=r[t],o=d(l);if(void 0!==o){var c=a[l];if(m.has(c)){if(o.test(s))return u(s,c)?void 0:c}else f.showWarning("Unexpected casing option provided: "+c)}else f.showWarning("Invalid regular expression provided: "+l)}else f.showWarning("At least one file name match must be provided")}(e,a):void f.showWarning("Received unexpected rule option");f.showWarning("Provide a rule option as string or object")},f=function(e){function a(){return null!==e&&e.apply(this,arguments)||this}return t.__extends(a,e),a.showWarning=function(e){r.showWarningOnce("Warning: "+a.metadata.ruleName+" - "+e)},a.FAILURE_STRING=function(e){return"File name must be "+a.stylizedNameForCasing(e)},a.stylizedNameForCasing=function(e){switch(e){case n.CamelCase:return"camelCase";case n.PascalCase:return"PascalCase";case n.KebabCase:return"kebab-case";case n.SnakeCase:return"snake_case"}},a.prototype.apply=function(e){if(1!==this.ruleArguments.length)return[];var s=this.ruleArguments[0],n=C(e,s);return void 0===n?[]:[new l.RuleFailure(e,0,0,a.FAILURE_STRING(n),this.ruleName)]},a.metadata={ruleName:"file-name-casing",description:"Enforces a consistent file naming convention",rationale:"Helps maintain a consistent style across a file hierarchy",optionsDescription:l.Utils.dedent(p||(p=t.__makeTemplateObject(["\n            One of the following arguments must be provided:\n\n            * `","`: File names must be camel-cased: `fileName.ts`.\n            * `","`: File names must be Pascal-cased: `FileName.ts`.\n            * `","`: File names must be kebab-cased: `file-name.ts`.\n            * `",'`: File names must be snake-cased: `file_name.ts`.\n\n            Or an object, where the key represents a regular expression that\n            matches the file name, and the value is the file name rule from\n            the previous list.\n\n            * { ".tsx": "','", ".ts": "','" }\n        '],["\n            One of the following arguments must be provided:\n\n            * \\`","\\`: File names must be camel-cased: \\`fileName.ts\\`.\n            * \\`","\\`: File names must be Pascal-cased: \\`FileName.ts\\`.\n            * \\`","\\`: File names must be kebab-cased: \\`file-name.ts\\`.\n            * \\`",'\\`: File names must be snake-cased: \\`file_name.ts\\`.\n\n            Or an object, where the key represents a regular expression that\n            matches the file name, and the value is the file name rule from\n            the previous list.\n\n            * \\{ \\".tsx\\": \\"','\\", \\".ts\\": \\"','\\" \\}\n        '])),n.CamelCase,n.PascalCase,n.KebabCase,n.SnakeCase,n.PascalCase,n.CamelCase),options:{type:"array",items:{anyOf:[{type:"array",items:[{type:"string",enum:c}]},{type:"object",additionalProperties:{type:"string",enum:c},minProperties:1}]}},optionExamples:[[!0,n.CamelCase],[!0,n.PascalCase],[!0,n.KebabCase],[!0,n.SnakeCase],[!0,{".tsx":n.PascalCase,".ts":n.CamelCase}],[!0,{".style.ts":n.KebabCase,".tsx":n.PascalCase,".*":n.CamelCase}]],hasFix:!1,type:"style",typescriptOnly:!1},a}(l.Rules.AbstractRule);a.Rule=f}});
//# sourceMappingURL=140.0f0c28f8.chunk.js.map