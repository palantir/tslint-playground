{"version":3,"sources":["../node_modules/tslint/lib/rules/noForInArrayRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","applyWithProgram","sourceFile","program","applyWithFunction","walk","undefined","getTypeChecker","metadata","ruleName","description","descriptionDetails","Utils","dedent","__makeTemplateObject","optionsDescription","options","optionExamples","requiresTypeInfo","type","typescriptOnly","FAILURE_STRING","Rules","TypedRule","ctx","checker","forEachChild","cb","node","kind","SyntaxKind","ForInStatement","getTypeAtLocation","expression","symbol","name","flags","TypeFlags","StringLike","addFailureAtNode"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAyCAC,EAzCAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,IACAE,EAAAF,EAAA,MACAG,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAP,EAAAS,UAAAL,EAAAC,GAIAD,EAAAM,UAAAC,iBAAA,SAAAC,EAAAC,GACA,OAAAN,KAAAO,kBAAAF,EAAAG,OAAAC,EAAAH,EAAAI,mBAGAb,EAAAc,UACAC,SAAA,kBACAC,YAAA,wDACAC,mBAAAlB,EAAAmB,MAAAC,OAAAxB,MAAAC,EAAAwB,sBAAA,+pBAAmwB,qqBACnwBC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,kBAAA,EACAC,KAAA,gBACAC,gBAAA,GAGA1B,EAAA2B,eAAA,+EACA3B,EAtBA,CAuBCD,EAAA6B,MAAAC,WAED,SAAAlB,EAAAmB,EAAAC,GACA,OAAAjC,EAAAkC,aAAAF,EAAAtB,WAAA,SAAAyB,EAAAC,GACA,GAAAA,EAAAC,OAAArC,EAAAsC,WAAAC,eAAA,CACA,IAAAZ,EAAAM,EAAAO,kBAAAJ,EAAAK,kBACA3B,IAAAa,EAAAe,QAAA,UAAAf,EAAAe,OAAAC,MAEA,KAAAhB,EAAAiB,MAAA5C,EAAA6C,UAAAC,cACAd,EAAAe,iBAAAX,EAAAlC,EAAA2B,gBAGA,OAAA7B,EAAAkC,aAAAE,EAAAD,KAXAxC,EAAAO","file":"static/js/101.37fe9188.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.applyWithProgram = function (sourceFile, program) {\n        return this.applyWithFunction(sourceFile, walk, undefined, program.getTypeChecker());\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-for-in-array\",\n        description: \"Disallows iterating over an array with a for-in loop.\",\n        descriptionDetails: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            A for-in loop (`for (var k in o)`) iterates over the properties of an Object.\\n\\n            While it is legal to use for-in loops with array types, it is not common.\\n            for-in will iterate over the indices of the array as strings, omitting any \\\"holes\\\" in\\n            the array.\\n\\n            More common is to use for-of, which iterates over the values of an array.\\n            If you want to iterate over the indices, alternatives include:\\n\\n            array.forEach((value, index) => { ... });\\n            for (const [index, value] of array.entries()) { ... }\\n            for (let i = 0; i < array.length; i++) { ... }\\n            \"], [\"\\n            A for-in loop (\\\\`for (var k in o)\\\\`) iterates over the properties of an Object.\\n\\n            While it is legal to use for-in loops with array types, it is not common.\\n            for-in will iterate over the indices of the array as strings, omitting any \\\"holes\\\" in\\n            the array.\\n\\n            More common is to use for-of, which iterates over the values of an array.\\n            If you want to iterate over the indices, alternatives include:\\n\\n            array.forEach((value, index) => { ... });\\n            for (const [index, value] of array.entries()) { ... }\\n            for (let i = 0; i < array.length; i++) { ... }\\n            \"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        requiresTypeInfo: true,\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"for-in loops over arrays are forbidden. Use for-of or array.forEach instead.\";\n    return Rule;\n}(Lint.Rules.TypedRule));\nexports.Rule = Rule;\nfunction walk(ctx, checker) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (node.kind === ts.SyntaxKind.ForInStatement) {\n            var type = checker.getTypeAtLocation(node.expression);\n            if ((type.symbol !== undefined && type.symbol.name === \"Array\") ||\n                // tslint:disable-next-line:no-bitwise\n                (type.flags & ts.TypeFlags.StringLike) !== 0) {\n                ctx.addFailureAtNode(node, Rule.FAILURE_STRING);\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noForInArrayRule.js\n// module id = 2071\n// module chunks = 101"],"sourceRoot":""}