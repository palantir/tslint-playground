webpackJsonp([150],{2018:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,s,r=n(1),o=n(843),a=n(54),p=n(1116),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.__extends(t,e),t.FAILURE_STRING_FACTORY=function(e,t){return"Don't use '"+e+"' as a type."+(void 0!==t?" "+t:"")},t.prototype.apply=function(e){return this.applyWithFunction(e,l,this.ruleArguments.map(u))},t.metadata={ruleName:"ban-types",description:p.Utils.dedent(i||(i=r.__makeTemplateObject(["\n            Bans specific types from being used. Does not ban the\n            corresponding runtime objects from being used."],["\n            Bans specific types from being used. Does not ban the\n            corresponding runtime objects from being used."]))),options:{type:"list",listType:{type:"array",items:{type:"string"},minLength:1,maxLength:2}},optionsDescription:p.Utils.dedent(s||(s=r.__makeTemplateObject(['\n            A list of `["regex", "optional explanation here"]`, which bans\n            types that match `regex`'],['\n            A list of \\`["regex", "optional explanation here"]\\`, which bans\n            types that match \\`regex\\`']))),optionExamples:[[!0,["Object","Use {} instead."],["String"]]],type:"typescript",typescriptOnly:!0},t}(p.Rules.AbstractRule);function u(e){var t=e[0];return{message:e[1],pattern:new RegExp("^"+t+"$")}}function l(e){return a.forEachChild(e.sourceFile,function t(n){if(o.isTypeReferenceNode(n))for(var i=n.getText(e.sourceFile),s=0,r=e.options;s<r.length;s++){var p=r[s];if(p.pattern.test(i)){e.addFailureAtNode(n,c.FAILURE_STRING_FACTORY(i,p.message));break}}return a.forEachChild(n,t)})}t.Rule=c}});
//# sourceMappingURL=150.e50b783b.chunk.js.map