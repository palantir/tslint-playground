webpackJsonp([43],{2142:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o,i,a=t(1),l=t(843),r=t(54),s=t(1116),u="allow-null-union",d="allow-undefined-union",c="allow-string",p="allow-enum",f="allow-number",y="allow-mix",h="allow-boolean-or-undefined",w=function(n){function e(){return null!==n&&n.apply(this,arguments)||this}return a.__extends(e,n),e.prototype.applyWithProgram=function(n,e){var t=function(n,e){return{strictNullChecks:e,allowNullUnion:t(u),allowUndefinedUnion:t(d),allowString:t(c),allowEnum:t(p),allowNumber:t(f),allowMix:t(y),allowBooleanOrUndefined:t(h)};function t(e){return-1!==n.indexOf(e)}}(this.ruleArguments,s.isStrictNullChecksEnabled(e.getCompilerOptions()));return this.applyWithFunction(n,m,t,e.getTypeChecker())},e.metadata={ruleName:"strict-boolean-expressions",description:s.Utils.dedent(o||(o=a.__makeTemplateObject(["\n            Restricts the types allowed in boolean expressions. By default only booleans are allowed.\n\n            The following nodes are checked:\n\n            * Arguments to the `!`, `&&`, and `||` operators\n            * The condition in a conditional expression (`cond ? x : y`)\n            * Conditions for `if`, `for`, `while`, and `do-while` statements."],["\n            Restricts the types allowed in boolean expressions. By default only booleans are allowed.\n\n            The following nodes are checked:\n\n            * Arguments to the \\`!\\`, \\`&&\\`, and \\`||\\` operators\n            * The condition in a conditional expression (\\`cond ? x : y\\`)\n            * Conditions for \\`if\\`, \\`for\\`, \\`while\\`, and \\`do-while\\` statements."]))),optionsDescription:s.Utils.dedent(i||(i=a.__makeTemplateObject(["\n            These options may be provided:\n\n            * `","` allows union types containing `null`.\n              - It does *not* allow `null` itself.\n              - Without the '--strictNullChecks' compiler option, this will allow anything other than a string, number, or enum.\n            * `","` allows union types containing `undefined`.\n              - It does *not* allow `undefined` itself.\n              - Without the '--strictNullChecks' compiler option, this will allow anything other than a string, number, or enum.\n            * `","` allows strings.\n              - It does *not* allow unions containing `string`.\n              - It does *not* allow string literal types.\n            * `","` allows enums.\n              - It does *not* allow unions containing `enum`.\n            * `","` allows numbers.\n              - It does *not* allow unions containing `number`.\n              - It does *not* allow enums or number literal types.\n            * `",'` allows multiple of the above to appear together.\n              - For example, `string | number` or `RegExp | null | undefined` would normally not be allowed.\n              - A type like `"foo" | "bar" | undefined` is always allowed, because it has only one way to be false.\n            * `',"` allows `boolean | undefined`.\n              - Also allows `true | false | undefined`.\n              - Does not allow `false | undefined`.\n              - This option is a subset of `","`, so you don't need to enable both options at the same time.\n        "],["\n            These options may be provided:\n\n            * \\`","\\` allows union types containing \\`null\\`.\n              - It does *not* allow \\`null\\` itself.\n              - Without the '--strictNullChecks' compiler option, this will allow anything other than a string, number, or enum.\n            * \\`","\\` allows union types containing \\`undefined\\`.\n              - It does *not* allow \\`undefined\\` itself.\n              - Without the '--strictNullChecks' compiler option, this will allow anything other than a string, number, or enum.\n            * \\`","\\` allows strings.\n              - It does *not* allow unions containing \\`string\\`.\n              - It does *not* allow string literal types.\n            * \\`","\\` allows enums.\n              - It does *not* allow unions containing \\`enum\\`.\n            * \\`","\\` allows numbers.\n              - It does *not* allow unions containing \\`number\\`.\n              - It does *not* allow enums or number literal types.\n            * \\`",'\\` allows multiple of the above to appear together.\n              - For example, \\`string | number\\` or \\`RegExp | null | undefined\\` would normally not be allowed.\n              - A type like \\`"foo" | "bar" | undefined\\` is always allowed, because it has only one way to be false.\n            * \\`',"\\` allows \\`boolean | undefined\\`.\n              - Also allows \\`true | false | undefined\\`.\n              - Does not allow \\`false | undefined\\`.\n              - This option is a subset of \\`","\\`, so you don't need to enable both options at the same time.\n        "])),u,d,c,p,f,y,h,d),options:{type:"array",items:{type:"string",enum:[u,d,c,p,f,h]},minLength:0,maxLength:5},optionExamples:[!0,[!0,u,d,c,p,f],[!0,h]],type:"functionality",typescriptOnly:!0,requiresTypeInfo:!0},e}(s.Rules.TypedRule);function m(n,e){var t=n.sourceFile,o=n.options;function i(t,i){var a=e.getTypeAtLocation(t),s=function(n,e){if(S(n))return function(n,e){if(e.allowBooleanOrUndefined)switch(function(n){for(var e=!1,t=0,o=n.types;t<o.length;t++){var i=o[t];if(l.isTypeFlagSet(i,r.TypeFlags.Boolean))e=!0;else if(l.isTypeFlagSet(i,r.TypeFlags.BooleanLiteral))e=e||"true"===i.intrinsicName;else if(!l.isTypeFlagSet(i,r.TypeFlags.Void|r.TypeFlags.Undefined))return}return e}(n)){case!0:return;case!1:return 1}for(var t=!1,o=0,i=0,a=n.types;i<a.length;i++){var s=a[i],u=x(s),d=g(u,!0,e);if(void 0!==d)return d;switch(b(u)){case!0:t=!0;break;case!1:o++;break;default:t=!0,o++}}return 0===o?0:t?!e.allowMix&&o>1?7:void 0:1}(n,e);var t=x(n),o=g(t,!1,e);if(void 0!==o)return o;switch(b(t)){case!0:return l.isTypeFlagSet(n,r.TypeFlags.Any|r.TypeFlags.BooleanLiteral)?void 0:0;case!1:return l.isTypeFlagSet(n,r.TypeFlags.BooleanLiteral)?void 0:1;case void 0:return}}(a,o);if(void 0!==s){if(0===s&&!o.strictNullChecks&&(o.allowNullUnion||o.allowUndefinedUnion))return;n.addFailureAtNode(t,function(n,e,t,o){var i=function(n){var e=["boolean"];n.allowNullUnion&&e.push("null-union");n.allowUndefinedUnion&&e.push("undefined-union");n.allowString&&e.push("string");n.allowEnum&&e.push("enum");n.allowNumber&&e.push("number");n.allowBooleanOrUndefined&&e.push("boolean-or-undefined");return e}(o),a=1===i.length?"Only "+i[0]+"s are allowed":"Allowed types are "+function(n){switch(n.length){case 1:return n[0];case 2:return n[0]+" or "+n[1];default:for(var e="",t=0;t<n.length-1;t++)e+=n[t]+", ";return e+"or "+n[n.length-1]}}(i),l=function(n,e,t){var o=e?"could be":"is";switch(n){case 0:return t?"is always truthy":"is always truthy. It may be null/undefined, but neither '"+u+"' nor '"+d+"' is set";case 1:return"is always falsy";case 2:return o+" a string";case 3:return o+" a number";case 4:return o+" null";case 5:return o+" undefined";case 6:return o+" an enum";case 7:return"unions more than one truthy/falsy type"}}(e,t,o.strictNullChecks);return"This type is not allowed in the "+function(n){switch(n.kind){case r.SyntaxKind.PrefixUnaryExpression:return"operand for the '!' operator";case r.SyntaxKind.ConditionalExpression:return"condition";case r.SyntaxKind.ForStatement:return"'for' condition";case r.SyntaxKind.IfStatement:return"'if' condition";case r.SyntaxKind.WhileStatement:return"'while' condition";case r.SyntaxKind.DoStatement:return"'do-while' condition";case r.SyntaxKind.BinaryExpression:return"operand for the '"+v(n)+"' operator"}}(n)+" because it "+l+". "+a+"."}(i,s,S(a),o))}}r.forEachChild(t,function n(e){switch(e.kind){case r.SyntaxKind.BinaryExpression:var t=e;if(void 0!==v(t)){var o=t.left,a=t.right,l=function(n){T(n)||i(n,t)};l(o),l(a)}break;case r.SyntaxKind.PrefixUnaryExpression:var s=e,u=s.operator,d=s.operand;u===r.SyntaxKind.ExclamationToken&&i(d,e);break;case r.SyntaxKind.IfStatement:case r.SyntaxKind.WhileStatement:case r.SyntaxKind.DoStatement:var c=e;T(c.expression)||i(c.expression,c);break;case r.SyntaxKind.ConditionalExpression:i(e.condition,e);break;case r.SyntaxKind.ForStatement:var p=e.condition;void 0!==p&&i(p,e)}return r.forEachChild(e,n)})}function g(n,e,t){switch(n){case 0:case 1:return t.allowString?void 0:2;case 2:case 3:return t.allowNumber?void 0:3;case 8:return t.allowEnum?void 0:6;case 6:return e&&!t.allowNullUnion?4:void 0;case 7:return e&&!t.allowUndefinedUnion?5:void 0;default:return}}function b(n){switch(n){case 0:case 2:case 4:case 8:return;case 6:case 7:case 3:case 1:case 5:return!1;case 9:return!0}}function x(n){return e(r.TypeFlags.String)?0:e(r.TypeFlags.Number)?2:e(r.TypeFlags.Boolean)?4:e(r.TypeFlags.Null)?6:e(r.TypeFlags.Undefined|r.TypeFlags.Void)?7:e(r.TypeFlags.EnumLike)?8:e(r.TypeFlags.NumberLiteral)?function(n){return void 0!==n.value?0===n.value:"0"===n.text}(n)?3:9:e(r.TypeFlags.StringLiteral)?function(n){return""===(void 0!==n.value?n.value:n.text)}(n)?1:9:e(r.TypeFlags.BooleanLiteral)?"true"===n.intrinsicName?9:5:9;function e(e){return l.isTypeFlagSet(n,e)}}function T(n){return n.kind===r.SyntaxKind.BinaryExpression&&void 0!==v(n)}function v(n){switch(n.operatorToken.kind){case r.SyntaxKind.AmpersandAmpersandToken:return"&&";case r.SyntaxKind.BarBarToken:return"||";default:return}}function S(n){return l.isTypeFlagSet(n,r.TypeFlags.Union)&&!l.isTypeFlagSet(n,r.TypeFlags.Enum)}e.Rule=w}});
//# sourceMappingURL=43.776ece60.chunk.js.map