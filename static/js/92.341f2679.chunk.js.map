{"version":3,"sources":["../node_modules/tslint/lib/rules/noMergeableNamespaceRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","ts","Lint","Rule","_super","apply","this","arguments","__extends","failureStringFactory","name","seenBeforeLine","prototype","sourceFile","applyWithWalker","Walker","ruleName","undefined","metadata","description","optionsDescription","options","optionExamples","type","typescriptOnly","Rules","AbstractRule","walk","node","checkStatements","statements","seen","Map","_i","statements_1","length","statement","kind","SyntaxKind","ModuleDeclaration","Identifier","text","prev","get","addFailureAtNode","getLineOfNode","set","checkModuleDeclaration","decl","body","ModuleBlock","getLineAndCharacterOfPosition","pos","line","AbstractWalker"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,IACAE,EAAAF,EAAA,MACAG,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAP,EAAAS,UAAAL,EAAAC,GAKAD,EAAAM,qBAAA,SAAAC,EAAAC,GACA,8BAAAD,EAAA,0DAAAC,EAAA,KAEAR,EAAAS,UAAAP,MAAA,SAAAQ,GACA,OAAAP,KAAAQ,gBAAA,IAAAC,EAAAF,EAAAP,KAAAU,cAAAC,KAGAd,EAAAe,UACAF,SAAA,yBACAG,YAAA,mDACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,kBACAC,gBAAA,GAEArB,EAtBA,CAuBCD,EAAAuB,MAAAC,cACD7B,EAAAM,OACA,IAAAY,EAAA,SAAAX,GAEA,SAAAW,IACA,cAAAX,KAAAC,MAAAC,KAAAC,YAAAD,KAyCA,OA3CAP,EAAAS,UAAAO,EAAAX,GAIAW,EAAAH,UAAAe,KAAA,SAAAC,GACA,OAAAtB,KAAAuB,gBAAAD,EAAAE,aAEAf,EAAAH,UAAAiB,gBAAA,SAAAC,GAEA,IADA,IAAAC,EAAA,IAAAC,IACAC,EAAA,EAAAC,EAAAJ,EAAmDG,EAAAC,EAAAC,OAA0BF,IAAA,CAC7E,IAAAG,EAAAF,EAAAD,GACA,GAAAG,EAAAC,OAAApC,EAAAqC,WAAAC,kBAAA,CAGA,IAAA7B,EAAA0B,EAAA1B,KACA,GAAAA,EAAA2B,OAAApC,EAAAqC,WAAAE,WAAA,CACA,IAAAC,EAAA/B,EAAA+B,KACAC,EAAAX,EAAAY,IAAAF,QACAxB,IAAAyB,GACApC,KAAAsC,iBAAAlC,EAAAP,EAAAM,qBAAAgC,EAAAnC,KAAAuC,cAAAH,EAAAhC,QAEAqB,EAAAe,IAAAL,EAAAL,GAGA9B,KAAAyC,uBAAAX,MAGArB,EAAAH,UAAAmC,uBAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAC,KACA,QAAAhC,IAAAgC,EAGA,OAAAA,EAAAZ,MACA,KAAApC,EAAAqC,WAAAY,YACA5C,KAAAuB,gBAAAoB,EAAAnB,YACA,MACA,KAAA7B,EAAAqC,WAAAC,kBACAjC,KAAAyC,uBAAAE,KAGAlC,EAAAH,UAAAiC,cAAA,SAAAjB,GACA,OAAA3B,EAAAkD,8BAAA7C,KAAAO,WAAAe,EAAAwB,KAAAC,KAAA,GAEAtC,EA5CA,CA6CCb,EAAAoD","file":"static/js/92.341f2679.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.failureStringFactory = function (name, seenBeforeLine) {\n        return \"Mergeable namespace '\" + name + \"' found. Merge its contents with the namespace on line \" + seenBeforeLine + \".\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithWalker(new Walker(sourceFile, this.ruleName, undefined));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-mergeable-namespace\",\n        description: \"Disallows mergeable namespaces in the same file.\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"maintainability\",\n        typescriptOnly: true,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar Walker = /** @class */ (function (_super) {\n    tslib_1.__extends(Walker, _super);\n    function Walker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Walker.prototype.walk = function (node) {\n        return this.checkStatements(node.statements);\n    };\n    Walker.prototype.checkStatements = function (statements) {\n        var seen = new Map();\n        for (var _i = 0, statements_1 = statements; _i < statements_1.length; _i++) {\n            var statement = statements_1[_i];\n            if (statement.kind !== ts.SyntaxKind.ModuleDeclaration) {\n                continue;\n            }\n            var name = statement.name;\n            if (name.kind === ts.SyntaxKind.Identifier) {\n                var text = name.text;\n                var prev = seen.get(text);\n                if (prev !== undefined) {\n                    this.addFailureAtNode(name, Rule.failureStringFactory(text, this.getLineOfNode(prev.name)));\n                }\n                seen.set(text, statement);\n            }\n            // Recursively check in all module declarations\n            this.checkModuleDeclaration(statement);\n        }\n    };\n    Walker.prototype.checkModuleDeclaration = function (decl) {\n        var body = decl.body;\n        if (body === undefined) {\n            return;\n        }\n        switch (body.kind) {\n            case ts.SyntaxKind.ModuleBlock:\n                this.checkStatements(body.statements);\n                break;\n            case ts.SyntaxKind.ModuleDeclaration:\n                this.checkModuleDeclaration(body);\n        }\n    };\n    Walker.prototype.getLineOfNode = function (node) {\n        return ts.getLineAndCharacterOfPosition(this.sourceFile, node.pos).line + 1;\n    };\n    return Walker;\n}(Lint.AbstractWalker));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noMergeableNamespaceRule.js\n// module id = 2081\n// module chunks = 92"],"sourceRoot":""}