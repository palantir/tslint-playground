webpackJsonp([113],{2058:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r=o(1),s=o(843),a=o(54),i=o(1116),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.__extends(t,e),t.prototype.apply=function(e){return this.applyWithFunction(e,c)},t.metadata={ruleName:"no-construct",description:"Disallows access to the constructors of `String`, `Number`, and `Boolean`.",descriptionDetails:"Disallows constructor use such as `new Number(foo)` but does not disallow `Number(foo)`.",rationale:i.Utils.dedent(n||(n=r.__makeTemplateObject(["\n            There is little reason to use `String`, `Number`, or `Boolean` as constructors.\n            In almost all cases, the regular function-call version is more appropriate.\n            [More details](http://stackoverflow.com/q/4719320/3124288) are available on StackOverflow."],["\n            There is little reason to use \\`String\\`, \\`Number\\`, or \\`Boolean\\` as constructors.\n            In almost all cases, the regular function-call version is more appropriate.\n            [More details](http://stackoverflow.com/q/4719320/3124288) are available on StackOverflow."]))),optionsDescription:"Not configurable.",options:null,optionExamples:[!0],type:"functionality",typescriptOnly:!1},t.FAILURE_STRING="Forbidden constructor, use a literal or simple function call instead",t}(i.Rules.AbstractRule);function c(e){return a.forEachChild(e.sourceFile,function t(o){if(s.isNewExpression(o)&&o.expression.kind===a.SyntaxKind.Identifier)switch(o.expression.text){case"Boolean":case"String":case"Number":e.addFailure(o.getStart(e.sourceFile),o.expression.end,l.FAILURE_STRING)}return a.forEachChild(o,t)})}t.Rule=l}});
//# sourceMappingURL=113.e66227a0.chunk.js.map