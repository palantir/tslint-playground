webpackJsonp([120],{2051:function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,o=s(1),r=s(843),a=s(54),i=s(1116),p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o.__extends(t,e),t.prototype.apply=function(e){return this.applyWithFunction(e,u)},t.metadata={ruleName:"no-angle-bracket-type-assertion",description:"Requires the use of `as Type` for type assertions instead of `<Type>`.",hasFix:!0,rationale:i.Utils.dedent(n||(n=o.__makeTemplateObject(["\n            Both formats of type assertions have the same effect, but only `as` type assertions\n            work in `.tsx` files. This rule ensures that you have a consistent type assertion style\n            across your codebase."],["\n            Both formats of type assertions have the same effect, but only \\`as\\` type assertions\n            work in \\`.tsx\\` files. This rule ensures that you have a consistent type assertion style\n            across your codebase."]))),optionsDescription:"Not configurable.",options:null,optionExamples:[!0],type:"style",typescriptOnly:!0},t.FAILURE_STRING="Type assertion using the '<>' syntax is forbidden. Use the 'as' syntax instead.",t}(i.Rules.AbstractRule);function u(e){return a.forEachChild(e.sourceFile,function t(s){if(r.isTypeAssertion(s)){for(var n=s.expression,o=s.getStart(e.sourceFile),u=function(e){var t=e.parent;return r.isBinaryExpression(t)&&(t.operatorToken.kind===a.SyntaxKind.AmpersandToken||t.operatorToken.kind===a.SyntaxKind.BarToken)}(s),l=" as "+s.type.getText(e.sourceFile)+(u?")":"");r.isTypeAssertion(n);)l=" as "+n.type.getText(e.sourceFile)+l,n=n.expression;return e.addFailure(o,s.end,p.FAILURE_STRING,[i.Replacement.appendText(s.end,l),i.Replacement.replaceFromTo(o,n.getStart(e.sourceFile),u?"(":"")]),t(n)}return a.forEachChild(s,t)})}t.Rule=p}});
//# sourceMappingURL=120.3d1c33b2.chunk.js.map