{"version":3,"sources":["../node_modules/tslint/lib/rules/tripleEqualsRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","allowNull","ruleArguments","indexOf","allowUndefined","metadata","ruleName","description","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","items","enum","minLength","maxLength","optionExamples","typescriptOnly","EQ_FAILURE_STRING","NEQ_FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","isBinaryExpression","operatorToken","kind","SyntaxKind","EqualsEqualsToken","ExclamationEqualsToken","isExpressionAllowed","right","left","addFailureAtNode","NullKeyword","Identifier","originalKeywordKind","UndefinedKeyword"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAgEAC,EAhEAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MAGAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KA6BA,OA/BAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,GACAC,WAAA,IAAAP,KAAAQ,cAAAC,QATA,oBAUAC,gBAAA,IAAAV,KAAAQ,cAAAC,QATA,4BAaAZ,EAAAc,UACAC,SAAA,gBACAC,YAAA,sDACAC,mBAAAlB,EAAAmB,MAAAC,OAAAzB,MAAAC,EAAAyB,sBAAA,8fACAC,SACAC,KAAA,QACAC,OACAD,KAAA,SACAE,MAtBA,mBACA,0BAuBAC,UAAA,EACAC,UAAA,GAEAC,iBAAA,wDACAL,KAAA,gBACAM,gBAAA,GAGA5B,EAAA6B,kBAAA,mBACA7B,EAAA8B,mBAAA,mBACA9B,EAhCA,CAiCCD,EAAAgC,MAAAC,cAED,SAAAvB,EAAAwB,GACA,OAAAnC,EAAAoC,aAAAD,EAAA1B,WAAA,SAAA4B,EAAAC,GAWA,OAVAvC,EAAAwC,mBAAAD,KACAA,EAAAE,cAAAC,OAAAzC,EAAA0C,WAAAC,mBACAL,EAAAE,cAAAC,OAAAzC,EAAA0C,WAAAE,wBACAC,EAAAP,EAAAQ,MAAAX,EAAAZ,UACAsB,EAAAP,EAAAS,KAAAZ,EAAAZ,UACAY,EAAAa,iBAAAV,EAAAE,cAAAF,EAAAE,cAAAC,OAAAzC,EAAA0C,WAAAC,kBACAzC,EAAA6B,kBACA7B,EAAA8B,qBAGAhC,EAAAoC,aAAAE,EAAAD,KAGA,SAAAQ,EAAAP,EAAAf,GACA,OAAAe,EAAAG,OAAAzC,EAAA0C,WAAAO,YACA1B,EAAAX,UAEAW,EAAAR,gBACAuB,EAAAG,OAAAzC,EAAA0C,WAAAQ,YACAZ,EAAAa,sBAAAnD,EAAA0C,WAAAU,iBAtBA1D,EAAAQ","file":"static/js/39.9b597338.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_ALLOW_NULL_CHECK = \"allow-null-check\";\nvar OPTION_ALLOW_UNDEFINED_CHECK = \"allow-undefined-check\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, {\n            allowNull: this.ruleArguments.indexOf(OPTION_ALLOW_NULL_CHECK) !== -1,\n            allowUndefined: this.ruleArguments.indexOf(OPTION_ALLOW_UNDEFINED_CHECK) !== -1,\n        });\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"triple-equals\",\n        description: \"Requires `===` and `!==` in place of `==` and `!=`.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Two arguments may be optionally provided:\\n\\n            * `\\\"allow-null-check\\\"` allows `==` and `!=` when comparing to `null`.\\n            * `\\\"allow-undefined-check\\\"` allows `==` and `!=` when comparing to `undefined`.\"], [\"\\n            Two arguments may be optionally provided:\\n\\n            * \\\\`\\\"allow-null-check\\\"\\\\` allows \\\\`==\\\\` and \\\\`!=\\\\` when comparing to \\\\`null\\\\`.\\n            * \\\\`\\\"allow-undefined-check\\\"\\\\` allows \\\\`==\\\\` and \\\\`!=\\\\` when comparing to \\\\`undefined\\\\`.\"]))),\n        options: {\n            type: \"array\",\n            items: {\n                type: \"string\",\n                enum: [OPTION_ALLOW_NULL_CHECK, OPTION_ALLOW_UNDEFINED_CHECK],\n            },\n            minLength: 0,\n            maxLength: 2,\n        },\n        optionExamples: [true, [true, \"allow-null-check\"], [true, \"allow-undefined-check\"]],\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.EQ_FAILURE_STRING = \"== should be ===\";\n    Rule.NEQ_FAILURE_STRING = \"!= should be !==\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isBinaryExpression(node)) {\n            if ((node.operatorToken.kind === ts.SyntaxKind.EqualsEqualsToken ||\n                node.operatorToken.kind === ts.SyntaxKind.ExclamationEqualsToken) &&\n                !(isExpressionAllowed(node.right, ctx.options) ||\n                    isExpressionAllowed(node.left, ctx.options))) {\n                ctx.addFailureAtNode(node.operatorToken, node.operatorToken.kind === ts.SyntaxKind.EqualsEqualsToken\n                    ? Rule.EQ_FAILURE_STRING\n                    : Rule.NEQ_FAILURE_STRING);\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction isExpressionAllowed(node, options) {\n    if (node.kind === ts.SyntaxKind.NullKeyword) {\n        return options.allowNull;\n    }\n    return (options.allowUndefined &&\n        node.kind === ts.SyntaxKind.Identifier &&\n        node.originalKeywordKind === ts.SyntaxKind.UndefinedKeyword);\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/tripleEqualsRule.js\n// module id = 2147\n// module chunks = 39"],"sourceRoot":""}