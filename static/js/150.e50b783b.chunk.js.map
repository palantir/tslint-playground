{"version":3,"sources":["../node_modules/tslint/lib/rules/banTypesRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING_FACTORY","typeName","messageAddition","undefined","prototype","sourceFile","applyWithFunction","walk","ruleArguments","map","parseOption","metadata","ruleName","description","Utils","dedent","__makeTemplateObject","options","type","listType","items","minLength","maxLength","optionsDescription","optionExamples","typescriptOnly","Rules","AbstractRule","_a","pattern","message","RegExp","ctx","forEachChild","cb","node","isTypeReferenceNode","getText","_i","length","ban","test","addFailureAtNode"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAwDAC,EAAAC,EAxDAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KA2BA,OA7BAR,EAAAU,UAAAL,EAAAC,GAKAD,EAAAM,uBAAA,SAAAC,EAAAC,GACA,oBAAAD,EAAA,qBAAAE,IAAAD,EAAA,IAAAA,EAAA,KAEAR,EAAAU,UAAAR,MAAA,SAAAS,GACA,OAAAR,KAAAS,kBAAAD,EAAAE,EAAAV,KAAAW,cAAAC,IAAAC,KAGAhB,EAAAiB,UACAC,SAAA,YACAC,YAAApB,EAAAqB,MAAAC,OAAA5B,MAAAE,EAAA2B,sBAAA,0QACAC,SACAC,KAAA,OACAC,UACAD,KAAA,QACAE,OAAwBF,KAAA,UACxBG,UAAA,EACAC,UAAA,IAGAC,mBAAA9B,EAAAqB,MAAAC,OAAA3B,MAAAC,EAAA2B,sBAAA,wPACAQ,kBAAA,gCAAkD,YAClDN,KAAA,aACAO,gBAAA,GAEA/B,EA9BA,CA+BCD,EAAAiC,MAAAC,cAED,SAAAjB,EAAAkB,GACA,IAAAC,EAAAD,EAAA,GACA,OAAYE,QADZF,EAAA,GACYC,QAAA,IAAAE,OAAA,IAAAF,EAAA,MAEZ,SAAAtB,EAAAyB,GACA,OAAAxC,EAAAyC,aAAAD,EAAA3B,WAAA,SAAA6B,EAAAC,GACA,GAAA5C,EAAA6C,oBAAAD,GAEA,IADA,IAAAlC,EAAAkC,EAAAE,QAAAL,EAAA3B,YACAiC,EAAA,EAAAV,EAAAI,EAAAf,QAA8CqB,EAAAV,EAAAW,OAAgBD,IAAA,CAC9D,IAAAE,EAAAZ,EAAAU,GACA,GAAAE,EAAAX,QAAAY,KAAAxC,GAAA,CACA+B,EAAAU,iBAAAP,EAAAzC,EAAAM,uBAAAC,EAAAuC,EAAAV,UACA,OAIA,OAAAtC,EAAAyC,aAAAE,EAAAD,KAjBAjD,EAAAS","file":"static/js/150.e50b783b.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING_FACTORY = function (typeName, messageAddition) {\n        return \"Don't use '\" + typeName + \"' as a type.\" + (messageAddition !== undefined ? \" \" + messageAddition : \"\");\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, this.ruleArguments.map(parseOption));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"ban-types\",\n        description: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Bans specific types from being used. Does not ban the\\n            corresponding runtime objects from being used.\"], [\"\\n            Bans specific types from being used. Does not ban the\\n            corresponding runtime objects from being used.\"]))),\n        options: {\n            type: \"list\",\n            listType: {\n                type: \"array\",\n                items: { type: \"string\" },\n                minLength: 1,\n                maxLength: 2,\n            },\n        },\n        optionsDescription: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            A list of `[\\\"regex\\\", \\\"optional explanation here\\\"]`, which bans\\n            types that match `regex`\"], [\"\\n            A list of \\\\`[\\\"regex\\\", \\\"optional explanation here\\\"]\\\\`, which bans\\n            types that match \\\\`regex\\\\`\"]))),\n        optionExamples: [[true, [\"Object\", \"Use {} instead.\"], [\"String\"]]],\n        type: \"typescript\",\n        typescriptOnly: true,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction parseOption(_a) {\n    var pattern = _a[0], message = _a[1];\n    return { message: message, pattern: new RegExp(\"^\" + pattern + \"$\") };\n}\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isTypeReferenceNode(node)) {\n            var typeName = node.getText(ctx.sourceFile);\n            for (var _i = 0, _a = ctx.options; _i < _a.length; _i++) {\n                var ban = _a[_i];\n                if (ban.pattern.test(typeName)) {\n                    ctx.addFailureAtNode(node, Rule.FAILURE_STRING_FACTORY(typeName, ban.message));\n                    break;\n                }\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/banTypesRule.js\n// module id = 2018\n// module chunks = 150"],"sourceRoot":""}