{"version":3,"sources":["../node_modules/tslint/lib/rules/eoflineRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","fix","length","text","lines","getLineStarts","Replacement","appendText","RuleFailure","FAILURE_STRING","ruleName","metadata","description","descriptionDetails","rationale","optionsDescription","options","optionExamples","hasFix","type","typescriptOnly","Rules","AbstractRule"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,MACAE,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAgCA,OAlCAN,EAAAQ,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,IAKAC,EALAC,EAAAF,EAAAG,KAAAD,OACA,OAAAA,GACA,OAAAF,EAAAG,KAAAD,EAAA,GACA,SAGA,IAAAE,EAAAJ,EAAAK,gBAIA,OAHAD,EAAAF,OAAA,IACAD,EAAAT,EAAAc,YAAAC,WAAAL,EAAA,OAAAF,EAAAG,KAAAC,EAAA,qBAGA,IAAAZ,EAAAgB,YAAAR,EAAAE,IAAAT,EAAAgB,eAAAb,KAAAc,SAAAT,KAIAR,EAAAkB,UACAD,SAAA,UACAE,YAAA,wCACAC,mBAAA,8CACAC,UAAA,yGACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,QAAA,EACAC,KAAA,kBACAC,gBAAA,GAGA3B,EAAAgB,eAAA,iCACAhB,EAnCA,CAoCCD,EAAA6B,MAAAC,cACDlC,EAAAK","file":"static/js/142.ac94eed7.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        var length = sourceFile.text.length;\n        if (length === 0 || // if the file is empty, it \"ends with a newline\", so don't return a failure\n            sourceFile.text[length - 1] === \"\\n\") {\n            return [];\n        }\n        var fix;\n        var lines = sourceFile.getLineStarts();\n        if (lines.length > 1) {\n            fix = Lint.Replacement.appendText(length, sourceFile.text[lines[1] - 2] === \"\\r\" ? \"\\r\\n\" : \"\\n\");\n        }\n        return [\n            new Lint.RuleFailure(sourceFile, length, length, Rule.FAILURE_STRING, this.ruleName, fix),\n        ];\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"eofline\",\n        description: \"Ensures the file ends with a newline.\",\n        descriptionDetails: \"Fix for single-line files is not supported.\",\n        rationale: \"It is a [standard convention](https://stackoverflow.com/q/729692/3124288) to end files with a newline.\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        hasFix: true,\n        type: \"maintainability\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"file should end with a newline\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/eoflineRule.js\n// module id = 2028\n// module chunks = 142"],"sourceRoot":""}