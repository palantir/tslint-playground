webpackJsonp([75],{2100:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i,s,a=t(1),o=t(843),r=t(54),l=t(1116),d=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return a.__extends(n,e),n.FAILURE_STRING_FACTORY_IDENTIFIERS=function(e){return"Assigning `this` reference to local variable not allowed: "+e+"."},n.prototype.apply=function(e){var n,t,i,s=(n=this.ruleArguments[0],t=[],i=!1,void 0!==n&&(i=!!n["allow-destructuring"],void 0!==n["allowed-names"]&&t.push.apply(t,n["allowed-names"])),{allowedNames:t,allowDestructuring:i}),a=new p(e,this.ruleName,s);return this.applyWithWalker(a)},n.metadata={description:"Disallows unnecessary references to `this`.",optionExamples:[!0,[!0,(i={},i["allowed-names"]=["^self$"],i["allow-destructuring"]=!0,i)]],options:{additionalProperties:!1,properties:(s={},s["allow-destructuring"]={type:"boolean"},s["allowed-names"]={listType:"string",type:"list"},s),type:"object"},optionsDescription:l.Utils.dedent(u||(u=a.__makeTemplateObject(["\n            Two options may be provided on an object:\n\n            * `","` allows using destructuring to access members of `this` (e.g. `{ foo, bar } = this;`).\n            * `","` may be specified as a list of regular expressions to match allowed variable names."],["\n            Two options may be provided on an object:\n\n            * \\`","\\` allows using destructuring to access members of \\`this\\` (e.g. \\`{ foo, bar } = this;\\`).\n            * \\`","\\` may be specified as a list of regular expressions to match allowed variable names."])),"allow-destructuring","allowed-names"),rationale:l.Utils.dedent(c||(c=a.__makeTemplateObject(["\n            Assigning a variable to `this` instead of properly using arrow lambdas may be a symptom of pre-ES6 practices\n            or not managing scope well.\n\n            Instead of storing a reference to `this` and using it inside a `function () {`:\n\n            ```\n            const self = this;\n\n            setTimeout(function () {\n                self.doWork();\n            });\n            ```\n\n            Use `() =>` arrow lambdas, as they preserve `this` scope for you:\n\n            ```\n            setTimeout(() => {\n                this.doWork();\n            });\n            ```\n        "],["\n            Assigning a variable to \\`this\\` instead of properly using arrow lambdas may be a symptom of pre-ES6 practices\n            or not managing scope well.\n\n            Instead of storing a reference to \\`this\\` and using it inside a \\`function () {\\`:\n\n            \\`\\`\\`\n            const self = this;\n\n            setTimeout(function () {\n                self.doWork();\n            });\n            \\`\\`\\`\n\n            Use \\`() =>\\` arrow lambdas, as they preserve \\`this\\` scope for you:\n\n            \\`\\`\\`\n            setTimeout(() => {\n                this.doWork();\n            });\n            \\`\\`\\`\n        "]))),ruleName:"no-this-assignment",type:"functionality",typescriptOnly:!1},n.FAILURE_STRING_BINDINGS="Don't assign members of `this` to local variables.",n}(l.Rules.AbstractRule);n.Rule=d;var u,c,p=function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.allowedThisNameTesters=n.options.allowedNames.map(function(e){return new RegExp(e)}),n.visitNode=function(e){o.isVariableDeclaration(e)&&n.visitVariableDeclaration(e),r.forEachChild(e,n.visitNode)},n}return a.__extends(n,e),n.prototype.walk=function(e){r.forEachChild(e,this.visitNode)},n.prototype.visitVariableDeclaration=function(e){if(void 0!==e.initializer&&e.initializer.kind===r.SyntaxKind.ThisKeyword)switch(e.name.kind){case r.SyntaxKind.Identifier:this.variableNameIsBanned(e.name.text)&&this.addFailureAtNode(e,d.FAILURE_STRING_FACTORY_IDENTIFIERS(e.name.text));break;default:this.options.allowDestructuring||this.addFailureAtNode(e,d.FAILURE_STRING_BINDINGS)}},n.prototype.variableNameIsBanned=function(e){for(var n=0,t=this.allowedThisNameTesters;n<t.length;n++){if(t[n].test(e))return!1}return!0},n}(l.AbstractWalker)}});
//# sourceMappingURL=75.3d628fa4.chunk.js.map