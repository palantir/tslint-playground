{"version":3,"sources":["../node_modules/tslint/lib/rules/noNullKeywordRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","rationale","Utils","dedent","__makeTemplateObject","optionsDescription","options","optionExamples","type","typescriptOnly","hasFix","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","isTypeNodeKind","kind","SyntaxKind","NullKeyword","parent","eq","isBinaryExpression","getEqualsKind","operatorToken","undefined","addFailureAtNode","isStrict","Replacement","replaceNode"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAoDAC,EApDAC,EAAAC,EAAA,GAEAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,kBACAC,YAAA,+CACAC,UAAAd,EAAAe,MAAAC,OAAArB,MAAAC,EAAAqB,sBAAA,y8BAA45B,mgCAC55BC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,gBACAC,gBAAA,EACAC,QAAA,GAGAtB,EAAAuB,eAAA,oCACAvB,EAtBA,CAuBCD,EAAAyB,MAAAC,cAED,SAAAhB,EAAAiB,GACA,OAAA5B,EAAA6B,aAAAD,EAAAnB,WACA,SAAAqB,EAAAC,GACA,GAAAhC,EAAAiC,eAAAD,EAAAE,MACA,OAEA,GAAAF,EAAAE,OAAAjC,EAAAkC,WAAAC,YACA,OAAAnC,EAAA6B,aAAAE,EAAAD,GAEA,IAAAM,EAAAL,EAAAK,OACA,IAAAC,EACAtC,EAAAuC,mBAAAF,KACAC,EAAApC,EAAAsC,cAAAH,EAAAI,qBAEAC,IAAAJ,EACAT,EAAAc,iBAAAX,EAAA7B,EAAAuB,gBAEAY,EAAAM,UACAf,EAAAc,iBAAAX,EAAA7B,EAAAuB,eAAAxB,EAAA2C,YAAAC,YAAAd,EAAA,YAAAH,EAAAnB,eAnBAf,EAAAQ","file":"static/js/88.5939cf9a.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n// with due reference to https://github.com/Microsoft/TypeScript/blob/7813121c4d77e50aad0eed3152ef1f1156c7b574/scripts/tslint/noNullRule.ts\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-null-keyword\",\n        description: \"Disallows use of the `null` keyword literal.\",\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Instead of having the dual concepts of `null` and`undefined` in a codebase,\\n            this rule ensures that only `undefined` is used.\\n\\n            JavaScript originally intended `undefined` to refer to a value that doesn't yet exist,\\n            while `null` was meant to refer to a value that does exist but points to nothing.\\n            That's confusing.\\n            `undefined` is the default value when object members don't exist, and is the return value\\n            for newer native collection APIs such as `Map.get` when collection values don't exist.\\n\\n            ```\\n            const myObject = {};\\n            myObject.doesNotExist; // undefined\\n            ```\\n\\n            ```\\n            const myMap = new Map<string, number>();\\n            myMap.get(\\\"doesNotExist\\\"); // undefined\\n            ```\\n\\n            To remove confusion over the two similar values, it's better to stick with just `undefined`.\\n        \"], [\"\\n            Instead of having the dual concepts of \\\\`null\\\\` and\\\\`undefined\\\\` in a codebase,\\n            this rule ensures that only \\\\`undefined\\\\` is used.\\n\\n            JavaScript originally intended \\\\`undefined\\\\` to refer to a value that doesn't yet exist,\\n            while \\\\`null\\\\` was meant to refer to a value that does exist but points to nothing.\\n            That's confusing.\\n            \\\\`undefined\\\\` is the default value when object members don't exist, and is the return value\\n            for newer native collection APIs such as \\\\`Map.get\\\\` when collection values don't exist.\\n\\n            \\\\`\\\\`\\\\`\\n            const myObject = {};\\n            myObject.doesNotExist; // undefined\\n            \\\\`\\\\`\\\\`\\n\\n            \\\\`\\\\`\\\\`\\n            const myMap = new Map<string, number>();\\n            myMap.get(\\\"doesNotExist\\\"); // undefined\\n            \\\\`\\\\`\\\\`\\n\\n            To remove confusion over the two similar values, it's better to stick with just \\\\`undefined\\\\`.\\n        \"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"functionality\",\n        typescriptOnly: false,\n        hasFix: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Use 'undefined' instead of 'null'\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, cb);\n    function cb(node) {\n        if (tsutils_1.isTypeNodeKind(node.kind)) {\n            return; // skip type nodes\n        }\n        if (node.kind !== ts.SyntaxKind.NullKeyword) {\n            return ts.forEachChild(node, cb);\n        }\n        var parent = node.parent;\n        var eq;\n        if (tsutils_1.isBinaryExpression(parent)) {\n            eq = Lint.getEqualsKind(parent.operatorToken);\n        }\n        if (eq === undefined) {\n            ctx.addFailureAtNode(node, Rule.FAILURE_STRING);\n        }\n        else if (!eq.isStrict) {\n            ctx.addFailureAtNode(node, Rule.FAILURE_STRING, Lint.Replacement.replaceNode(node, \"undefined\", ctx.sourceFile));\n        }\n    }\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noNullKeywordRule.js\n// module id = 2085\n// module chunks = 88"],"sourceRoot":""}