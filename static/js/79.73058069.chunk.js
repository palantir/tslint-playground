webpackJsonp([79],{2094:function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=a(1),t=a(843),i=a(54),s=a(1116),r=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return o.__extends(n,e),n.FAILURE_STRING_FACTORY=function(e){return"Shadowed name: '"+e+"'"},n.prototype.apply=function(e){return this.applyWithWalker(new p(e,this.ruleName,(n=this.ruleArguments[0],o.__assign({class:!0,enum:!0,function:!0,import:!0,interface:!0,namespace:!0,temporalDeadZone:!0,typeAlias:!0,typeParameter:!0},n))));var n},n.metadata={ruleName:"no-shadowed-variable",description:"Disallows shadowing variable declarations.",rationale:s.Utils.dedent(l||(l=o.__makeTemplateObject(["\n            When a variable in a local scope and a variable in the containing scope have the same name, shadowing occurs.\n            Shadowing makes it impossible to access the variable in the containing scope and\n            obscures to what value an identifier actually refers. Compare the following snippets:\n\n            ```\n            const a = 'no shadow';\n            function print() {\n                console.log(a);\n            }\n            print(); // logs 'no shadow'.\n            ```\n\n            ```\n            const a = 'no shadow';\n            function print() {\n                const a = 'shadow'; // TSLint will complain here.\n                console.log(a);\n            }\n            print(); // logs 'shadow'.\n            ```\n\n            ESLint has [an equivalent rule](https://eslint.org/docs/rules/no-shadow).\n            For more background information, refer to\n            [this MDN closure doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#Lexical_scoping).\n        "],["\n            When a variable in a local scope and a variable in the containing scope have the same name, shadowing occurs.\n            Shadowing makes it impossible to access the variable in the containing scope and\n            obscures to what value an identifier actually refers. Compare the following snippets:\n\n            \\`\\`\\`\n            const a = 'no shadow';\n            function print() {\n                console.log(a);\n            }\n            print(); // logs 'no shadow'.\n            \\`\\`\\`\n\n            \\`\\`\\`\n            const a = 'no shadow';\n            function print() {\n                const a = 'shadow'; // TSLint will complain here.\n                console.log(a);\n            }\n            print(); // logs 'shadow'.\n            \\`\\`\\`\n\n            ESLint has [an equivalent rule](https://eslint.org/docs/rules/no-shadow).\n            For more background information, refer to\n            [this MDN closure doc](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#Lexical_scoping).\n        "]))),optionsDescription:s.Utils.dedent(c||(c=o.__makeTemplateObject(['\n            You can optionally pass an object to disable checking for certain kinds of declarations.\n            Possible keys are `"class"`, `"enum"`, `"function"`, `"import"`, `"interface"`, `"namespace"`, `"typeAlias"`\n            and `"typeParameter"`. Just set the value to `false` for the check you want to disable.\n            All checks default to `true`, i.e. are enabled by default.\n            Note that you cannot disable variables and parameters.\n\n            The option `"temporalDeadZone"` defaults to `true` which shows errors when shadowing block scoped declarations in their\n            temporal dead zone. When set to `false` parameters, classes, enums and variables declared\n            with `let` or `const` are not considered shadowed if the shadowing occurs within their\n            [temporal dead zone](http://jsrocks.org/2015/01/temporal-dead-zone-tdz-demystified).\n\n            The following example shows how the `"temporalDeadZone"` option changes the linting result:\n\n            ```ts\n            function fn(value) {\n                if (value) {\n                    const tmp = value; // no error on this line if "temporalDeadZone" is false\n                    return tmp;\n                }\n                let tmp = undefined;\n                if (!value) {\n                    const tmp = value; // this line always contains an error\n                    return tmp;\n                }\n            }\n            ```\n        '],['\n            You can optionally pass an object to disable checking for certain kinds of declarations.\n            Possible keys are \\`"class"\\`, \\`"enum"\\`, \\`"function"\\`, \\`"import"\\`, \\`"interface"\\`, \\`"namespace"\\`, \\`"typeAlias"\\`\n            and \\`"typeParameter"\\`. Just set the value to \\`false\\` for the check you want to disable.\n            All checks default to \\`true\\`, i.e. are enabled by default.\n            Note that you cannot disable variables and parameters.\n\n            The option \\`"temporalDeadZone"\\` defaults to \\`true\\` which shows errors when shadowing block scoped declarations in their\n            temporal dead zone. When set to \\`false\\` parameters, classes, enums and variables declared\n            with \\`let\\` or \\`const\\` are not considered shadowed if the shadowing occurs within their\n            [temporal dead zone](http://jsrocks.org/2015/01/temporal-dead-zone-tdz-demystified).\n\n            The following example shows how the \\`"temporalDeadZone"\\` option changes the linting result:\n\n            \\`\\`\\`ts\n            function fn(value) {\n                if (value) {\n                    const tmp = value; // no error on this line if "temporalDeadZone" is false\n                    return tmp;\n                }\n                let tmp = undefined;\n                if (!value) {\n                    const tmp = value; // this line always contains an error\n                    return tmp;\n                }\n            }\n            \\`\\`\\`\n        ']))),options:{type:"object",properties:{class:{type:"boolean"},enum:{type:"boolean"},function:{type:"boolean"},import:{type:"boolean"},interface:{type:"boolean"},namespace:{type:"boolean"},typeAlias:{type:"boolean"},typeParameter:{type:"boolean"},temporalDeadZone:{type:"boolean"}}},optionExamples:[!0,[!0,{class:!0,enum:!0,function:!0,interface:!1,namespace:!0,typeAlias:!1,typeParameter:!1}]],type:"functionality",typescriptOnly:!1},n}(s.Rules.AbstractRule);n.Rule=r;var l,c,d=function(){function e(e){this.variables=new Map,this.variablesSeen=new Map,this.reassigned=new Set,this.functionScope=void 0!==e?e:this}return e.prototype.addVariable=function(e,n,a){void 0===n&&(n=!0),void 0===a&&(a=!1);var o=n?this:this.functionScope,t=o.variables.get(e.text),i={identifier:e,tdz:a};void 0===t?o.variables.set(e.text,[i]):t.push(i)},e}(),p=function(e){function n(){var n=null!==e&&e.apply(this,arguments)||this;return n.scope=new d,n}return o.__extends(n,e),n.prototype.walk=function(e){var n=this;if(!e.isDeclarationFile){this.scope=new d;var a=function(e){var o=n.scope;if((n.options.function&&t.isFunctionExpression(e)||n.options.class&&t.isClassExpression(e))&&void 0!==e.name){var s=new d;return s.addVariable(e.name,!1),n.scope=new d,t.isClassExpression(e)?n.visitClassLikeDeclaration(e,s,a):i.forEachChild(e,a),n.onScopeEnd(s),n.scope=s,n.onScopeEnd(o),void(n.scope=o)}if(void 0!==e.decorators)for(var r=0,l=e.decorators;r<l.length;r++){var c=l[r];i.forEachChild(c,a)}var p=t.isScopeBoundary(e);switch(2===p?n.scope=new d(o.functionScope):1===p&&(n.scope=new d),e.kind){case i.SyntaxKind.Decorator:return;case i.SyntaxKind.VariableDeclarationList:n.handleVariableDeclarationList(e);break;case i.SyntaxKind.TypeParameter:n.options.typeParameter&&n.scope.addVariable(e.name);break;case i.SyntaxKind.FunctionDeclaration:n.options.function&&void 0!==e.name&&o.addVariable(e.name,!1);break;case i.SyntaxKind.ClassDeclaration:n.options.class&&void 0!==e.name&&o.addVariable(e.name,!0,!0);case i.SyntaxKind.ClassExpression:return n.visitClassLikeDeclaration(e,o,a),n.onScopeEnd(o),void(n.scope=o);case i.SyntaxKind.TypeAliasDeclaration:n.options.typeAlias&&o.addVariable(e.name);break;case i.SyntaxKind.EnumDeclaration:n.options.enum&&o.addVariable(e.name,!0,!0);break;case i.SyntaxKind.InterfaceDeclaration:n.options.interface&&o.addVariable(e.name);break;case i.SyntaxKind.Parameter:e.parent.kind!==i.SyntaxKind.IndexSignature&&!t.isThisParameter(e)&&t.isFunctionWithBody(e.parent)&&n.handleBindingName(e.name,!1,!0);break;case i.SyntaxKind.ModuleDeclaration:if(n.options.namespace&&e.parent.kind!==i.SyntaxKind.ModuleDeclaration&&e.name.kind===i.SyntaxKind.Identifier&&!t.isNodeFlagSet(e,i.NodeFlags.GlobalAugmentation)&&o.addVariable(e.name,!1),t.hasModifier(e.modifiers,i.SyntaxKind.DeclareKeyword))return n.onScopeEnd(o),void(n.scope=o);break;case i.SyntaxKind.ImportClause:n.options.import&&void 0!==e.name&&n.scope.addVariable(e.name,!1);break;case i.SyntaxKind.NamespaceImport:case i.SyntaxKind.ImportSpecifier:case i.SyntaxKind.ImportEqualsDeclaration:n.options.import&&n.scope.addVariable(e.name,!1)}if(0===p)return i.forEachChild(e,a);i.forEachChild(e,a),n.onScopeEnd(o),n.scope=o};i.forEachChild(e,a),this.onScopeEnd()}},n.prototype.visitClassLikeDeclaration=function(e,n,a){var o=this,s=this.scope;i.forEachChild(e,function(e){if(!t.hasModifier(e.modifiers,i.SyntaxKind.StaticKeyword))return a(e);o.scope=n,a(e),o.scope=s})},n.prototype.handleVariableDeclarationList=function(e){for(var n=t.isBlockScopedVariableDeclarationList(e),a=0,o=e.declarations;a<o.length;a++){var i=o[a];this.handleBindingName(i.name,n)}},n.prototype.handleBindingName=function(e,n,a){if(void 0===a&&(a=n),e.kind===i.SyntaxKind.Identifier)this.scope.addVariable(e,n,a);else for(var o=0,t=e.elements;o<t.length;o++){var s=t[o];s.kind!==i.SyntaxKind.OmittedExpression&&this.handleBindingName(s.name,n,a)}},n.prototype.onScopeEnd=function(e){var n=this,a=this.scope,o=a.variables;a.variablesSeen.forEach(function(a,t){for(var i=o.get(t),s=function(a){void 0!==i&&(n.options.temporalDeadZone||i.some(function(e){return!e.tdz||e.identifier.pos<a.pos}))?n.addFailureAtNode(a,r.FAILURE_STRING_FACTORY(t)):void 0!==e&&function(e,n,a){var o=e.get(n);void 0===o?e.set(n,[a]):o.push(a)}(e.variablesSeen,t,a)},l=0,c=a;l<c.length;l++){s(c[l])}}),void 0!==e&&o.forEach(function(n,a){!function(e,n,a){var o=e.get(n);void 0===o&&(o=[],e.set(n,o));for(var t=0,i=a;t<i.length;t++){var s=i[t];o.push(s.identifier)}}(e.variablesSeen,a,n)})},n}(s.AbstractWalker)}});
//# sourceMappingURL=79.73058069.chunk.js.map