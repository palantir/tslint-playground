{"version":3,"sources":["../node_modules/tslint/lib/rules/noNonNullAssertionRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","rationale","Utils","dedent","__makeTemplateObject","optionsDescription","options","optionExamples","type","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","kind","SyntaxKind","NonNullExpression","addFailureAtNode"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAmCAC,EAnCAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,IACAE,EAAAF,EAAA,MACAG,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAkBA,OApBAP,EAAAS,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,wBACAC,YAAA,gEACAC,UAAAd,EAAAe,MAAAC,OAAApB,MAAAC,EAAAoB,sBAAA,szBAAk4B,41BACl4BC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,aACAC,gBAAA,GAGArB,EAAAsB,eAAA,+BACAtB,EArBA,CAsBCD,EAAAwB,MAAAC,cAED,SAAAf,EAAAgB,GACA,OAAA3B,EAAA4B,aAAAD,EAAAlB,WAAA,SAAAoB,EAAAC,GAIA,OAHAA,EAAAC,OAAA/B,EAAAgC,WAAAC,mBACAN,EAAAO,iBAAAJ,EAAA5B,EAAAsB,gBAEAxB,EAAA4B,aAAAE,EAAAD,KANAlC,EAAAO","file":"static/js/89.b933ab7c.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-non-null-assertion\",\n        description: \"Disallows non-null assertions using the `!` postfix operator.\",\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Using non-null assertion cancels the benefits of the strict null checking mode.\\n\\n            Instead of assuming objects exist:\\n\\n            ```\\n            function foo(instance: MyClass | undefined) {\\n                instance!.doWork();\\n            }\\n            ```\\n\\n            Either inform the strict type system that the object must exist:\\n\\n            ```\\n            function foo(instance: MyClass) {\\n                instance.doWork();\\n            }\\n            ```\\n\\n            Or verify that the instance exists, which will inform the type checker:\\n\\n            ```\\n            function foo(instance: MyClass | undefined) {\\n                if (instance !== undefined) {\\n                    instance.doWork();\\n                }\\n            }\\n            ```\\n        \"], [\"\\n            Using non-null assertion cancels the benefits of the strict null checking mode.\\n\\n            Instead of assuming objects exist:\\n\\n            \\\\`\\\\`\\\\`\\n            function foo(instance: MyClass | undefined) {\\n                instance!.doWork();\\n            }\\n            \\\\`\\\\`\\\\`\\n\\n            Either inform the strict type system that the object must exist:\\n\\n            \\\\`\\\\`\\\\`\\n            function foo(instance: MyClass) {\\n                instance.doWork();\\n            }\\n            \\\\`\\\\`\\\\`\\n\\n            Or verify that the instance exists, which will inform the type checker:\\n\\n            \\\\`\\\\`\\\\`\\n            function foo(instance: MyClass | undefined) {\\n                if (instance !== undefined) {\\n                    instance.doWork();\\n                }\\n            }\\n            \\\\`\\\\`\\\\`\\n        \"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"typescript\",\n        typescriptOnly: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Forbidden non null assertion\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (node.kind === ts.SyntaxKind.NonNullExpression) {\n            ctx.addFailureAtNode(node, Rule.FAILURE_STRING);\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noNonNullAssertionRule.js\n// module id = 2084\n// module chunks = 89"],"sourceRoot":""}