{"version":3,"sources":["../node_modules/tslint/lib/rules/noEmptyRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","allowEmptyCatch","ruleArguments","indexOf","allowEmptyFunctions","metadata","ruleName","description","descriptionDetails","rationale","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","items","anyOf","enum","optionExamples","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","kind","SyntaxKind","Block","statements","length","CatchClause","MethodDeclaration","FunctionDeclaration","FunctionExpression","ArrowFunction","isConstructorDeclaration","hasModifier","modifiers","PrivateKeyword","ProtectedKeyword","parameters","some","isParameterProperty","isExcluded","parent","start","getStart","hasCommentAfterPosition","text","addFailure","end"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAwFAC,EAxFAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MAGAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAyCA,OA3CAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,GACAC,iBAAA,IAAAP,KAAAQ,cAAAC,QATA,qBAUAC,qBAAA,IAAAV,KAAAQ,cAAAC,QATA,4BAaAZ,EAAAc,UACAC,SAAA,WACAC,YAAA,0BACAC,mBAAA,yDACAC,UAAA,qDACAC,mBAAApB,EAAAqB,MAAAC,OAAA3B,MAAAC,EAAA2B,sBAAA,+VAnBA,oBACA,yBAmBAC,SACAC,KAAA,QACAC,OACAC,QAEAF,KAAA,SACAG,MA1BA,uBA6BAH,KAAA,SACAG,MA7BA,6BAkCAC,iBACA,IACA,EArCA,uBAsCA,EArCA,2BAsCA,EAvCA,oBACA,0BAwCAJ,KAAA,gBACAK,gBAAA,GAGA7B,EAAA8B,eAAA,iBACA9B,EA5CA,CA6CCD,EAAAgC,MAAAC,cAED,SAAAvB,EAAAwB,GACA,OAAAnC,EAAAoC,aAAAD,EAAA1B,WAAA,SAAA4B,EAAAC,GACA,GAAAA,EAAAC,OAAAvC,EAAAwC,WAAAC,OACA,IAAAH,EAAAI,WAAAC,SAaA,SAAAL,EAAAb,GACA,GAAAA,EAAAb,iBAAA0B,EAAAC,OAAAvC,EAAAwC,WAAAI,YACA,SAEA,GAAAnB,EAAAV,sBACAuB,EAAAC,OAAAvC,EAAAwC,WAAAK,mBACAP,EAAAC,OAAAvC,EAAAwC,WAAAM,qBACAR,EAAAC,OAAAvC,EAAAwC,WAAAO,oBACAT,EAAAC,OAAAvC,EAAAwC,WAAAQ,eACA,SAEA,OAAAjD,EAAAkD,yBAAAX,KAKAvC,EAAAmD,YAAAZ,EAAAa,UAAAnD,EAAAwC,WAAAY,eAAApD,EAAAwC,WAAAa,mBACAf,EAAAgB,WAAAC,KAAAxD,EAAAyD,sBA7BAC,CAAAnB,EAAAoB,OAAAvB,EAAAV,SAAA,CACA,IAAAkC,EAAArB,EAAAsB,SAAAzB,EAAA1B,YAGA,GAAAR,EAAA4D,wBAAA1B,EAAA1B,WAAAqD,KAAAH,EAAA,GACA,OAEA,OAAAxB,EAAA4B,WAAAJ,EAAArB,EAAA0B,IAAA9D,EAAA8B,gBAEA,OAAAhC,EAAAoC,aAAAE,EAAAD,KAdA3C,EAAAQ","file":"static/js/104.a5fb48ed.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar ALLOW_EMPTY_CATCH = \"allow-empty-catch\";\nvar ALLOW_EMPTY_FUNCTIONS = \"allow-empty-functions\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, {\n            allowEmptyCatch: this.ruleArguments.indexOf(ALLOW_EMPTY_CATCH) !== -1,\n            allowEmptyFunctions: this.ruleArguments.indexOf(ALLOW_EMPTY_FUNCTIONS) !== -1,\n        });\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-empty\",\n        description: \"Disallows empty blocks.\",\n        descriptionDetails: \"Blocks with a comment inside are not considered empty.\",\n        rationale: \"Empty blocks are often indicators of missing code.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            If `\", \"` is specified, then catch blocks are allowed to be empty.\\n            If `\", \"` is specified, then function definitions are allowed to be empty.\"], [\"\\n            If \\\\`\", \"\\\\` is specified, then catch blocks are allowed to be empty.\\n            If \\\\`\", \"\\\\` is specified, then function definitions are allowed to be empty.\"])), ALLOW_EMPTY_CATCH, ALLOW_EMPTY_FUNCTIONS),\n        options: {\n            type: \"array\",\n            items: {\n                anyOf: [\n                    {\n                        type: \"string\",\n                        enum: [ALLOW_EMPTY_CATCH],\n                    },\n                    {\n                        type: \"string\",\n                        enum: [ALLOW_EMPTY_FUNCTIONS],\n                    },\n                ],\n            },\n        },\n        optionExamples: [\n            true,\n            [true, ALLOW_EMPTY_CATCH],\n            [true, ALLOW_EMPTY_FUNCTIONS],\n            [true, ALLOW_EMPTY_CATCH, ALLOW_EMPTY_FUNCTIONS],\n        ],\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"block is empty\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (node.kind === ts.SyntaxKind.Block &&\n            node.statements.length === 0 &&\n            !isExcluded(node.parent, ctx.options)) {\n            var start = node.getStart(ctx.sourceFile);\n            // Block always starts with open brace. Adding 1 to its start gives us the end of the brace,\n            // which can be used to conveniently check for comments between braces\n            if (Lint.hasCommentAfterPosition(ctx.sourceFile.text, start + 1)) {\n                return;\n            }\n            return ctx.addFailure(start, node.end, Rule.FAILURE_STRING);\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction isExcluded(node, options) {\n    if (options.allowEmptyCatch && node.kind === ts.SyntaxKind.CatchClause) {\n        return true;\n    }\n    if (options.allowEmptyFunctions &&\n        (node.kind === ts.SyntaxKind.MethodDeclaration ||\n            node.kind === ts.SyntaxKind.FunctionDeclaration ||\n            node.kind === ts.SyntaxKind.FunctionExpression ||\n            node.kind === ts.SyntaxKind.ArrowFunction)) {\n        return true;\n    }\n    return (tsutils_1.isConstructorDeclaration(node) &&\n        /* If constructor is private or protected, the block is allowed to be empty.\n               The constructor is there on purpose to disallow instantiation from outside the class */\n        /* The public modifier does not serve a purpose here. It can only be used to allow instantiation of a base class where\n               the super constructor is protected. But then the block would not be empty, because of the call to super() */\n        (tsutils_1.hasModifier(node.modifiers, ts.SyntaxKind.PrivateKeyword, ts.SyntaxKind.ProtectedKeyword) ||\n            node.parameters.some(tsutils_1.isParameterProperty)));\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noEmptyRule.js\n// module id = 2068\n// module chunks = 104"],"sourceRoot":""}