webpackJsonp([12],{2132:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,s=t(1),r=t(843),l=t(54),o=t(1116),a=t(2197),c=function(n){function e(){return null!==n&&n.apply(this,arguments)||this}return s.__extends(e,n),e.prototype.apply=function(n){if(n.isDeclarationFile)return[];var e=-1!==this.ruleArguments.indexOf("allow-single-concat");return this.applyWithFunction(n,u,{allowSingleConcat:e})},e.metadata={ruleName:"prefer-template",description:"Prefer a template expression over string literal concatenation.",optionsDescription:o.Utils.dedent(i||(i=s.__makeTemplateObject(["\n            If `","` is specified, then a single concatenation (`x + y`) is allowed, but not more (`x + y + z`)."],["\n            If \\`","\\` is specified, then a single concatenation (\\`x + y\\`) is allowed, but not more (\\`x + y + z\\`)."])),"allow-single-concat"),options:{type:"string",enum:["allow-single-concat"]},optionExamples:[!0,[!0,"allow-single-concat"]],type:"style",typescriptOnly:!1,codeExamples:a.codeExamples},e.FAILURE_STRING="Use a template literal instead of concatenating with a string literal.",e.FAILURE_STRING_MULTILINE="Use a multiline template literal instead of concatenating string literals with newlines.",e}(o.Rules.AbstractRule);function u(n){var e=n.options.allowSingleConcat;return l.forEachChild(n.sourceFile,function t(i){var s=function(n,e){if(!d(n))return;var t=n.left,i=n.right,s=f(t),r=f(i);return s&&r?m(t)||m(i)?c.FAILURE_STRING_MULTILINE:void 0:s||r?s?e?void 0:c.FAILURE_STRING:function(n){return d(n)&&f(n.right)&&(f(n.left)||p(n.left))}(t)||e&&!d(t)?void 0:c.FAILURE_STRING:p(t)?c.FAILURE_STRING:void 0}(i,e);if(void 0===s)return l.forEachChild(i,t);n.addFailureAtNode(i,s)})}function m(n){return n.kind===l.SyntaxKind.TemplateExpression?n.templateSpans.some(function(n){return n.literal.text.includes("\n")}):n.text.includes("\n")}function p(n){return d(n)&&(f(n.right)||f(n.left)||p(n.left))}function d(n){return r.isBinaryExpression(n)&&n.operatorToken.kind===l.SyntaxKind.PlusToken}function f(n){switch(n.kind){case l.SyntaxKind.StringLiteral:case l.SyntaxKind.NoSubstitutionTemplateLiteral:case l.SyntaxKind.TemplateExpression:return!0;default:return!1}}e.Rule=c},2197:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,s,r,l,o,a,c=t(1),u=t(1116);e.codeExamples=[{description:"Enforces the use of template strings whenever possible.",config:u.Utils.dedent(i||(i=c.__makeTemplateObject(['\n            "rules": { "prefer-template": true }\n        '],['\n            "rules": { "prefer-template": true }\n        ']))),pass:u.Utils.dedent(s||(s=c.__makeTemplateObject(["\n            const x: number = 1;\n            const y: number = 1;\n            const myString: string = `${x} is equals ${y}`;\n        "],["\n            const x: number = 1;\n            const y: number = 1;\n            const myString: string = \\`\\${x} is equals \\${y}\\`;\n        "]))),fail:u.Utils.dedent(r||(r=c.__makeTemplateObject(["\n            const x: number = 1;\n            const y: number = 1;\n            const myString: string = x + ' is equals ' + y;\n        "],["\n            const x: number = 1;\n            const y: number = 1;\n            const myString: string = x + ' is equals ' + y;\n        "])))},{description:"Enforces the use of template strings, but allows up to one concatenation.",config:u.Utils.dedent(l||(l=c.__makeTemplateObject(['\n            "rules": { "prefer-template": [true, "allow-single-concat"] }\n        '],['\n            "rules": { "prefer-template": [true, "allow-single-concat"] }\n        ']))),pass:u.Utils.dedent(o||(o=c.__makeTemplateObject(["\n            const x: number = 1;\n            const y: number = 1;\n            const myString: string = x + ' is equals 1';\n            const myString: string = `${x} is equals ${y}`;\n        "],["\n            const x: number = 1;\n            const y: number = 1;\n            const myString: string = x + ' is equals 1';\n            const myString: string = \\`\\${x} is equals \\${y}\\`;\n        "]))),fail:u.Utils.dedent(a||(a=c.__makeTemplateObject(["\n            const x: number = 1;\n            const y: number = 1;\n            const myString: string = x + ' is equals ' + y;\n        "],["\n            const x: number = 1;\n            const y: number = 1;\n            const myString: string = x + ' is equals ' + y;\n        "])))}]}});
//# sourceMappingURL=12.75145eaf.chunk.js.map