{"version":3,"sources":["../node_modules/tslint/lib/rules/noMisusedNewRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","optionsDescription","options","optionExamples","rationale","Utils","dedent","__makeTemplateObject","type","typescriptOnly","FAILURE_STRING_INTERFACE","FAILURE_STRING_CLASS","Rules","AbstractRule","ctx","forEachChild","cb","node","isMethodSignature","getPropertyName","name","addFailureAtNode","isMethodDeclaration","undefined","body","returnTypeMatchesParent","parent","isConstructSignatureDeclaration","decl","isTypeReferenceNode","typeName","kind","SyntaxKind","Identifier","text"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IA0DAC,EA1DAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,iBACAC,YAAA,yFACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,UAAAjB,EAAAkB,MAAAC,OAAAxB,MAAAC,EAAAwB,sBAAA,ooBACAC,KAAA,gBACAC,gBAAA,GAGArB,EAAAsB,yBAAA,gFACAtB,EAAAuB,qBAAA,wEACAvB,EAtBA,CAuBCD,EAAAyB,MAAAC,cAED,SAAAhB,EAAAiB,GACA,OAAA5B,EAAA6B,aAAAD,EAAAnB,WAAA,SAAAqB,EAAAC,GAkBA,OAjBAhC,EAAAiC,kBAAAD,GACA,gBAAAhC,EAAAkC,gBAAAF,EAAAG,OACAN,EAAAO,iBAAAJ,EAAA7B,EAAAsB,0BAGAzB,EAAAqC,oBAAAL,QACAM,IAAAN,EAAAO,MACA,QAAAvC,EAAAkC,gBAAAF,EAAAG,OACAK,EAAAR,EAAAS,OAAAT,IACAH,EAAAO,iBAAAJ,EAAA7B,EAAAuB,sBAGA1B,EAAA0C,gCAAAV,IACAQ,EAAAR,EAAAS,OAAAT,IACAH,EAAAO,iBAAAJ,EAAA7B,EAAAsB,0BAGAxB,EAAA6B,aAAAE,EAAAD,KAGA,SAAAS,EAAAC,EAAAE,GACA,aAAAL,IAAAG,EAAAN,WAAAG,IAAAK,EAAApB,OAAAvB,EAAA4C,oBAAAD,EAAApB,SAGAoB,EAAApB,KAAAsB,SAAAC,OAAA7C,EAAA8C,WAAAC,YACAL,EAAApB,KAAAsB,SAAAI,OAAAR,EAAAN,KAAAc,MA5BAtD,EAAAQ","file":"static/js/91.e68a9f19.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-misused-new\",\n        description: \"Warns on apparent attempts to define constructors for interfaces or `new` for classes.\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Interfaces in TypeScript aren't meant to describe constructors on their implementations.\\n            The `new` descriptor is primarily for describing JavaScript libraries.\\n            If you're trying to describe a function known to be a class, it's typically better to `declare class`.\\n        \"], [\"\\n            Interfaces in TypeScript aren't meant to describe constructors on their implementations.\\n            The \\\\`new\\\\` descriptor is primarily for describing JavaScript libraries.\\n            If you're trying to describe a function known to be a class, it's typically better to \\\\`declare class\\\\`.\\n        \"]))),\n        type: \"functionality\",\n        typescriptOnly: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING_INTERFACE = \"Interfaces cannot be constructed, only classes. Did you mean `declare class`?\";\n    Rule.FAILURE_STRING_CLASS = '`new` in a class is a method named \"new\". Did you mean `constructor`?';\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isMethodSignature(node)) {\n            if (tsutils_1.getPropertyName(node.name) === \"constructor\") {\n                ctx.addFailureAtNode(node, Rule.FAILURE_STRING_INTERFACE);\n            }\n        }\n        else if (tsutils_1.isMethodDeclaration(node)) {\n            if (node.body === undefined &&\n                tsutils_1.getPropertyName(node.name) === \"new\" &&\n                returnTypeMatchesParent(node.parent, node)) {\n                ctx.addFailureAtNode(node, Rule.FAILURE_STRING_CLASS);\n            }\n        }\n        else if (tsutils_1.isConstructSignatureDeclaration(node)) {\n            if (returnTypeMatchesParent(node.parent, node)) {\n                ctx.addFailureAtNode(node, Rule.FAILURE_STRING_INTERFACE);\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction returnTypeMatchesParent(parent, decl) {\n    if (parent.name === undefined || decl.type === undefined || !tsutils_1.isTypeReferenceNode(decl.type)) {\n        return false;\n    }\n    return (decl.type.typeName.kind === ts.SyntaxKind.Identifier &&\n        decl.type.typeName.text === parent.name.text);\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noMisusedNewRule.js\n// module id = 2082\n// module chunks = 91"],"sourceRoot":""}