webpackJsonp([50],{2134:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o,c=t(1),i=t(843),r=t(54),a=t(1116),s=((o={})["check-function-declaration"]=r.SyntaxKind.FunctionDeclaration,o["check-function-expression"]=r.SyntaxKind.FunctionExpression,o["check-arrow-function"]=r.SyntaxKind.ArrowFunction,o["check-method-declaration"]=r.SyntaxKind.MethodDeclaration,o);var u,h=function(n){function e(){return null!==n&&n.apply(this,arguments)||this}return c.__extends(e,n),e.prototype.applyWithProgram=function(n,e){return this.applyWithFunction(n,d,function(n){0===n.length&&(n=Object.keys(s));for(var e=new Set,t=0,o=n;t<o.length;t++){var c=o[t];e.add(s[c])}return e}(this.ruleArguments),e.getTypeChecker())},e.metadata={ruleName:"promise-function-async",description:"Requires any function or method that returns a promise to be marked async.",rationale:a.Utils.dedent(u||(u=c.__makeTemplateObject(['\n            Ensures that each function is only capable of 1) returning a rejected promise, or 2)\n            throwing an Error object. In contrast, non-`async` `Promise`-returning functions\n            are technically capable of either. This practice removes a requirement for consuming\n            code to handle both cases.\n\n            If no optional arguments are provided then all function types are checked,\n            otherwise the specific function types are checked:\n\n            * `"','"` check function declarations.\n            * `"','"` check function expressions.\n            * `"','"` check arrow functions.\n            * `"','"` check method declarations.\n        '],['\n            Ensures that each function is only capable of 1) returning a rejected promise, or 2)\n            throwing an Error object. In contrast, non-\\`async\\` \\`Promise\\`-returning functions\n            are technically capable of either. This practice removes a requirement for consuming\n            code to handle both cases.\n\n            If no optional arguments are provided then all function types are checked,\n            otherwise the specific function types are checked:\n\n            * \\`"','"\\` check function declarations.\n            * \\`"','"\\` check function expressions.\n            * \\`"','"\\` check arrow functions.\n            * \\`"','"\\` check method declarations.\n        '])),"check-function-declaration","check-function-expression","check-arrow-function","check-method-declaration"),optionsDescription:"Not configurable.",options:{type:"array",items:{type:"string",enum:["check-function-declaration","check-function-expression","check-arrow-function","check-method-declaration"]},minLength:0,maxLength:4},optionExamples:[!0,[!0,"check-function-declaration","check-method-declaration"]],type:"typescript",typescriptOnly:!1,requiresTypeInfo:!0},e.FAILURE_STRING="functions that return promises must be async",e}(a.Rules.TypedRule);function d(n,e){var t=n.sourceFile,o=n.options;return r.forEachChild(t,function c(a){if(o.has(a.kind))switch(a.kind){case r.SyntaxKind.MethodDeclaration:case r.SyntaxKind.FunctionDeclaration:if(void 0===a.body)break;case r.SyntaxKind.FunctionExpression:case r.SyntaxKind.ArrowFunction:!i.hasModifier(a.modifiers,r.SyntaxKind.AsyncKeyword)&&function(n,e){var t=e.getReturnTypeOfSignature(e.getTypeAtLocation(n).getCallSignatures()[0]);return void 0!==t.symbol&&"Promise"===t.symbol.name}(a,e)&&n.addFailure(a.getStart(t),a.body.pos,h.FAILURE_STRING)}return r.forEachChild(a,c)})}e.Rule=h}});
//# sourceMappingURL=50.266ecd37.chunk.js.map