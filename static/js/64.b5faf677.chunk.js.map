{"version":3,"sources":["../node_modules/tslint/lib/rules/noVarRequiresRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","requiresWalker","NoVarRequiresWalker","getOptions","applyWithWalker","metadata","ruleName","description","descriptionDetails","Utils","dedent","templateObject_1","__makeTemplateObject","optionsDescription","options","optionExamples","rationale","templateObject_2","type","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","createScope","visitCallExpression","node","expression","getCurrentDepth","kind","SyntaxKind","Identifier","text","addFailureAtNode","call","ScopeAwareRuleWalker"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,IACAE,EAAAF,EAAA,MACAG,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAoBA,OAtBAP,EAAAS,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,IAAAC,EAAA,IAAAC,EAAAF,EAAAJ,KAAAO,cACA,OAAAP,KAAAQ,gBAAAH,IAGAR,EAAAY,UACAC,SAAA,kBACAC,YAAA,uEACAC,mBAAAhB,EAAAiB,MAAAC,OAAAC,MAAAtB,EAAAuB,sBAAA,8YACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,UAAAxB,EAAAiB,MAAAC,OAAAO,MAAA5B,EAAAuB,sBAAA,wxBACAM,KAAA,aACAC,gBAAA,GAGA1B,EAAA2B,eAAA,oDACA3B,EAvBA,CAwBCD,EAAA6B,MAAAC,cACDnC,EAAAM,OAEA,IAqBAkB,EAAAM,EArBAf,EAAA,SAAAR,GAEA,SAAAQ,IACA,cAAAR,KAAAC,MAAAC,KAAAC,YAAAD,KAgBA,OAlBAP,EAAAS,UAAAI,EAAAR,GAIAQ,EAAAH,UAAAwB,YAAA,WACA,UAEArB,EAAAH,UAAAyB,oBAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAC,WACA9B,KAAA+B,mBAAA,GAAAD,EAAAE,OAAArC,EAAAsC,WAAAC,aAEA,YADAJ,EAAAK,MAGAnC,KAAAoC,iBAAAP,EAAAhC,EAAA2B,iBAGA1B,EAAAK,UAAAyB,oBAAAS,KAAArC,KAAA6B,IAEAvB,EAnBA,CAoBCV,EAAA0C","file":"static/js/64.b5faf677.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2014 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        var requiresWalker = new NoVarRequiresWalker(sourceFile, this.getOptions());\n        return this.applyWithWalker(requiresWalker);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-var-requires\",\n        description: \"Disallows the use of require statements except in import statements.\",\n        descriptionDetails: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            In other words, the use of forms such as `var module = require(\\\"module\\\")` are banned.\\n            Instead use ES2015-style imports or `import foo = require('foo')` imports.\"], [\"\\n            In other words, the use of forms such as \\\\`var module = require(\\\"module\\\")\\\\` are banned.\\n            Instead use ES2015-style imports or \\\\`import foo = require('foo')\\\\` imports.\"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            AMD-style `require([])` and CommonJS-style `require(\\\"\\\")` statements are environment-specific\\n            and more difficult to statically analyze.\\n\\n            ES2015-style `import`s are part of the JavaScript language specfication and recommended as the path going forward.\\n            TypeScript will compile them to environment-specific forms as needed.\\n        \"], [\"\\n            AMD-style \\\\`require([])\\\\` and CommonJS-style \\\\`require(\\\"\\\")\\\\` statements are environment-specific\\n            and more difficult to statically analyze.\\n\\n            ES2015-style \\\\`import\\\\`s are part of the JavaScript language specfication and recommended as the path going forward.\\n            TypeScript will compile them to environment-specific forms as needed.\\n        \"]))),\n        type: \"typescript\",\n        typescriptOnly: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"require statement not part of an import statement\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\n// tslint:disable-next-line:deprecation\nvar NoVarRequiresWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(NoVarRequiresWalker, _super);\n    function NoVarRequiresWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoVarRequiresWalker.prototype.createScope = function () {\n        return {};\n    };\n    NoVarRequiresWalker.prototype.visitCallExpression = function (node) {\n        var expression = node.expression;\n        if (this.getCurrentDepth() <= 1 && expression.kind === ts.SyntaxKind.Identifier) {\n            var identifierName = expression.text;\n            if (identifierName === \"require\") {\n                // if we're calling (invoking) require, then it's not part of an import statement\n                this.addFailureAtNode(node, Rule.FAILURE_STRING);\n            }\n        }\n        _super.prototype.visitCallExpression.call(this, node);\n    };\n    return NoVarRequiresWalker;\n}(Lint.ScopeAwareRuleWalker));\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noVarRequiresRule.js\n// module id = 2114\n// module chunks = 64"],"sourceRoot":""}