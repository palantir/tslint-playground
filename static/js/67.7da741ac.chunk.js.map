{"version":3,"sources":["../node_modules/tslint/lib/rules/noUnusedExpressionRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","templateObject_3","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","allowFastNullChecks","ruleArguments","indexOf","allowNew","allowTaggedTemplate","metadata","ruleName","description","descriptionDetails","Utils","dedent","__makeTemplateObject","rationale","optionsDescription","options","type","items","enum","minLength","maxLength","optionExamples","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","ctx","checking","forEachChild","cb","node","isParenthesizedExpression","isVoidExpression","expression","isConditionalExpression","noCheck","condition","both","whenTrue","whenFalse","isBinaryExpression","operatorToken","kind","SyntaxKind","CommaToken","isIndirectEval","left","right","AmpersandAmpersandToken","BarBarToken","CallExpression","YieldExpression","DeleteExpression","AwaitExpression","PostfixUnaryExpression","NewExpression","TaggedTemplateExpression","BinaryExpression","isAssignmentKind","PrefixUnaryExpression","operator","PlusPlusToken","MinusMinusToken","isUnusedExpression","isExpressionStatement","StringLiteral","SourceFile","ModuleBlock","Block","parent","ArrowFunction","FunctionExpression","FunctionDeclaration","MethodDeclaration","Constructor","GetAccessor","SetAccessor","canContainDirective","i","statements","statement","isDirective","check","isLiteralZero","failNode","addFailureAtNode","undefined","callback","old","one","two","isNumericLiteral","text","isIdentifier","ParenthesizedExpression"],"mappings":"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","file":"static/js/67.7da741ac.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2014 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar ALLOW_FAST_NULL_CHECKS = \"allow-fast-null-checks\";\nvar ALLOW_NEW = \"allow-new\";\nvar ALLOW_TAGGED_TEMPLATE = \"allow-tagged-template\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, {\n            allowFastNullChecks: this.ruleArguments.indexOf(ALLOW_FAST_NULL_CHECKS) !== -1,\n            allowNew: this.ruleArguments.indexOf(ALLOW_NEW) !== -1,\n            allowTaggedTemplate: this.ruleArguments.indexOf(ALLOW_TAGGED_TEMPLATE) !== -1,\n        });\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-unused-expression\",\n        description: \"Disallows unused expression statements.\",\n        descriptionDetails: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Unused expressions are expression statements which are not assignments or function calls\\n            (and thus usually no-ops).\"], [\"\\n            Unused expressions are expression statements which are not assignments or function calls\\n            (and thus usually no-ops).\"]))),\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            Detects potential errors where an assignment or function call was intended.\"], [\"\\n            Detects potential errors where an assignment or function call was intended.\"]))),\n        optionsDescription: Lint.Utils.dedent(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject([\"\\n            Three arguments may be optionally provided:\\n\\n            * `\", \"` allows to use logical operators to perform fast null checks and perform\\n            method or function calls for side effects (e.g. `e && e.preventDefault()`).\\n            * `\", \"` allows 'new' expressions for side effects (e.g. `new ModifyGlobalState();`.\\n            * `\", \"` allows tagged templates for side effects (e.g. `this.add\\\\`foo\\\\`;`.\"], [\"\\n            Three arguments may be optionally provided:\\n\\n            * \\\\`\", \"\\\\` allows to use logical operators to perform fast null checks and perform\\n            method or function calls for side effects (e.g. \\\\`e && e.preventDefault()\\\\`).\\n            * \\\\`\", \"\\\\` allows 'new' expressions for side effects (e.g. \\\\`new ModifyGlobalState();\\\\`.\\n            * \\\\`\", \"\\\\` allows tagged templates for side effects (e.g. \\\\`this.add\\\\\\\\\\\\`foo\\\\\\\\\\\\`;\\\\`.\"])), ALLOW_FAST_NULL_CHECKS, ALLOW_NEW, ALLOW_TAGGED_TEMPLATE),\n        options: {\n            type: \"array\",\n            items: {\n                type: \"string\",\n                enum: [ALLOW_FAST_NULL_CHECKS, ALLOW_NEW, ALLOW_TAGGED_TEMPLATE],\n            },\n            minLength: 0,\n            maxLength: 3,\n        },\n        optionExamples: [true, [true, ALLOW_FAST_NULL_CHECKS]],\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"unused expression, expected an assignment or function call\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var checking = false;\n    var allowFastNullChecks = true;\n    return ts.forEachChild(ctx.sourceFile, cb);\n    function cb(node) {\n        if (checking) {\n            if (tsutils_1.isParenthesizedExpression(node) || tsutils_1.isVoidExpression(node)) {\n                return cb(node.expression);\n            }\n            else if (tsutils_1.isConditionalExpression(node)) {\n                noCheck(node.condition, cb);\n                return both(node.whenTrue, node.whenFalse);\n            }\n            else if (tsutils_1.isBinaryExpression(node)) {\n                switch (node.operatorToken.kind) {\n                    case ts.SyntaxKind.CommaToken:\n                        if (isIndirectEval(node)) {\n                            return false;\n                        }\n                        return both(node.left, node.right);\n                    case ts.SyntaxKind.AmpersandAmpersandToken:\n                    case ts.SyntaxKind.BarBarToken:\n                        if (allowFastNullChecks) {\n                            noCheck(node.left, cb);\n                            return cb(node.right);\n                        }\n                }\n            }\n            noCheck(node, forEachChild);\n            return isUnusedExpression(node, ctx.options);\n        }\n        if (tsutils_1.isExpressionStatement(node)) {\n            allowFastNullChecks = ctx.options.allowFastNullChecks;\n            if (!isDirective(node)) {\n                check(node.expression, node);\n            }\n            allowFastNullChecks = true;\n            return false;\n        }\n        else if (tsutils_1.isVoidExpression(node)) {\n            // allow `void 0` and `void(0)`\n            if (!isLiteralZero(tsutils_1.isParenthesizedExpression(node.expression)\n                ? node.expression.expression\n                : node.expression)) {\n                check(node.expression);\n            }\n            return false;\n        }\n        else if (tsutils_1.isBinaryExpression(node) &&\n            node.operatorToken.kind === ts.SyntaxKind.CommaToken &&\n            !isIndirectEval(node)) {\n            check(node.left);\n            return cb(node.right);\n        }\n        return ts.forEachChild(node, cb);\n    }\n    function forEachChild(node) {\n        return ts.forEachChild(node, cb);\n    }\n    function check(node, failNode) {\n        checking = true;\n        if (cb(node)) {\n            ctx.addFailureAtNode(failNode === undefined ? node : failNode, Rule.FAILURE_STRING);\n        }\n        checking = false;\n    }\n    function noCheck(node, callback) {\n        var old = allowFastNullChecks;\n        checking = false;\n        allowFastNullChecks = true;\n        callback(node);\n        allowFastNullChecks = old;\n        checking = true;\n    }\n    function both(one, two) {\n        if (cb(one)) {\n            if (cb(two)) {\n                return true;\n            }\n            else {\n                ctx.addFailureAtNode(one, Rule.FAILURE_STRING);\n            }\n        }\n        else if (cb(two)) {\n            ctx.addFailureAtNode(two, Rule.FAILURE_STRING);\n        }\n        return false;\n    }\n}\nfunction isUnusedExpression(node, options) {\n    switch (node.kind) {\n        case ts.SyntaxKind.CallExpression:\n        case ts.SyntaxKind.YieldExpression:\n        case ts.SyntaxKind.DeleteExpression:\n        case ts.SyntaxKind.AwaitExpression:\n        case ts.SyntaxKind.PostfixUnaryExpression:\n            return false;\n        case ts.SyntaxKind.NewExpression:\n            return !options.allowNew;\n        case ts.SyntaxKind.TaggedTemplateExpression:\n            return !options.allowTaggedTemplate;\n        case ts.SyntaxKind.BinaryExpression:\n            return !tsutils_1.isAssignmentKind(node.operatorToken.kind);\n        case ts.SyntaxKind.PrefixUnaryExpression:\n            return (node.operator !== ts.SyntaxKind.PlusPlusToken &&\n                node.operator !== ts.SyntaxKind.MinusMinusToken);\n        default:\n            return true;\n    }\n}\nfunction isLiteralZero(node) {\n    return tsutils_1.isNumericLiteral(node) && node.text === \"0\";\n}\nfunction isIndirectEval(node) {\n    return (tsutils_1.isIdentifier(node.right) &&\n        node.right.text === \"eval\" &&\n        isLiteralZero(node.left) &&\n        node.parent.kind === ts.SyntaxKind.ParenthesizedExpression &&\n        node.parent.parent.kind === ts.SyntaxKind.CallExpression);\n}\nfunction isDirective(node) {\n    if (node.expression.kind !== ts.SyntaxKind.StringLiteral || !canContainDirective(node.parent)) {\n        return false;\n    }\n    var parent = node.parent;\n    // check if all previous statements in block are also directives\n    for (var i = parent.statements.indexOf(node) - 1; i >= 0; --i) {\n        var statement = parent.statements[i];\n        if (!tsutils_1.isExpressionStatement(statement) ||\n            statement.expression.kind !== ts.SyntaxKind.StringLiteral) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction canContainDirective(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.SourceFile:\n        case ts.SyntaxKind.ModuleBlock:\n            return true;\n        case ts.SyntaxKind.Block:\n            switch (node.parent.kind) {\n                case ts.SyntaxKind.ArrowFunction:\n                case ts.SyntaxKind.FunctionExpression:\n                case ts.SyntaxKind.FunctionDeclaration:\n                case ts.SyntaxKind.MethodDeclaration:\n                case ts.SyntaxKind.Constructor:\n                case ts.SyntaxKind.GetAccessor:\n                case ts.SyntaxKind.SetAccessor:\n                    return true;\n                default:\n                    return false;\n            }\n        default:\n            return false;\n    }\n}\nvar templateObject_1, templateObject_2, templateObject_3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noUnusedExpressionRule.js\n// module id = 2110\n// module chunks = 67"],"sourceRoot":""}