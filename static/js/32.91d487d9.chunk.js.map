{"version":3,"sources":["../node_modules/tslint/lib/rules/variableNameRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","utils_1","BANNED_KEYWORDS","bannedKeywordsSet","Set","bannedKeywordsStr","map","kw","join","OPTION_LEADING_UNDERSCORE","OPTION_TRAILING_UNDERSCORE","OPTION_BAN_KEYWORDS","OPTION_CHECK_FORMAT","OPTION_ALLOW_PASCAL_CASE","OPTION_ALLOW_SNAKE_CASE","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","ruleArguments","banKeywords","hasOption","checkFormat","leadingUnderscore","trailingUnderscore","allowPascalCase","allowSnakeCase","name","indexOf","parseOptions","metadata","ruleName","description","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","items","enum","minLength","maxLength","optionExamples","typescriptOnly","KEYWORD_FAILURE","Rules","AbstractRule","ctx","forEachChild","cb","node","kind","SyntaxKind","BindingElement","_a","initializer","propertyName","Identifier","handleVariableNameKeyword","parent","ObjectBindingPattern","undefined","handleVariableNameFormat","VariableStatement","hasModifier","modifiers","DeclareKeyword","Parameter","PropertyDeclaration","VariableDeclaration","_b","text","PropertyAccessExpression","isAlias","length","firstCharacter","lastCharacter","middle","slice","isLowerCase","isCamelCase","isUpperCase","addFailureAtNode","failureMessage","formatFailure","has"],"mappings":"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","file":"static/js/32.91d487d9.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n// tslint:disable object-literal-sort-keys\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar utils_1 = require(\"../utils\");\nvar BANNED_KEYWORDS = [\n    \"any\",\n    \"Number\",\n    \"number\",\n    \"String\",\n    \"string\",\n    \"Boolean\",\n    \"boolean\",\n    \"Undefined\",\n    \"undefined\",\n];\nvar bannedKeywordsSet = new Set(BANNED_KEYWORDS);\nvar bannedKeywordsStr = BANNED_KEYWORDS.map(function (kw) { return \"`\" + kw + \"`\"; }).join(\", \");\nvar OPTION_LEADING_UNDERSCORE = \"allow-leading-underscore\";\nvar OPTION_TRAILING_UNDERSCORE = \"allow-trailing-underscore\";\nvar OPTION_BAN_KEYWORDS = \"ban-keywords\";\nvar OPTION_CHECK_FORMAT = \"check-format\";\nvar OPTION_ALLOW_PASCAL_CASE = \"allow-pascal-case\";\nvar OPTION_ALLOW_SNAKE_CASE = \"allow-snake-case\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, parseOptions(this.ruleArguments));\n    };\n    Rule.metadata = {\n        ruleName: \"variable-name\",\n        description: \"Checks variable names for various errors.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Five arguments may be optionally provided:\\n\\n            * `\\\"\", \"\\\"`: allows only lowerCamelCased or UPPER_CASED variable names\\n              * `\\\"\", \"\\\"` allows underscores at the beginning (only has an effect if \\\"check-format\\\" specified)\\n              * `\\\"\", \"\\\"` allows underscores at the end. (only has an effect if \\\"check-format\\\" specified)\\n              * `\\\"\", \"\\\"` allows PascalCase in addition to lowerCamelCase.\\n              * `\\\"\", \"\\\"` allows snake_case in addition to lowerCamelCase.\\n            * `\\\"\", \"\\\"`: disallows the use of certain TypeScript keywords as variable or parameter names.\\n              * These are: \", \"\"], [\"\\n            Five arguments may be optionally provided:\\n\\n            * \\\\`\\\"\", \"\\\"\\\\`: allows only lowerCamelCased or UPPER_CASED variable names\\n              * \\\\`\\\"\", \"\\\"\\\\` allows underscores at the beginning (only has an effect if \\\"check-format\\\" specified)\\n              * \\\\`\\\"\", \"\\\"\\\\` allows underscores at the end. (only has an effect if \\\"check-format\\\" specified)\\n              * \\\\`\\\"\", \"\\\"\\\\` allows PascalCase in addition to lowerCamelCase.\\n              * \\\\`\\\"\", \"\\\"\\\\` allows snake_case in addition to lowerCamelCase.\\n            * \\\\`\\\"\", \"\\\"\\\\`: disallows the use of certain TypeScript keywords as variable or parameter names.\\n              * These are: \", \"\"])), OPTION_CHECK_FORMAT, OPTION_LEADING_UNDERSCORE, OPTION_TRAILING_UNDERSCORE, OPTION_ALLOW_PASCAL_CASE, OPTION_ALLOW_SNAKE_CASE, OPTION_BAN_KEYWORDS, bannedKeywordsStr),\n        options: {\n            type: \"array\",\n            items: {\n                type: \"string\",\n                enum: [\n                    OPTION_CHECK_FORMAT,\n                    OPTION_LEADING_UNDERSCORE,\n                    OPTION_TRAILING_UNDERSCORE,\n                    OPTION_ALLOW_PASCAL_CASE,\n                    OPTION_ALLOW_SNAKE_CASE,\n                    OPTION_BAN_KEYWORDS,\n                ],\n            },\n            minLength: 0,\n            maxLength: 5,\n        },\n        optionExamples: [[true, \"ban-keywords\", \"check-format\", \"allow-leading-underscore\"]],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    Rule.KEYWORD_FAILURE = \"variable name clashes with keyword/type\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction parseOptions(ruleArguments) {\n    var banKeywords = hasOption(OPTION_BAN_KEYWORDS);\n    return {\n        banKeywords: banKeywords,\n        // check variable name formatting by default if no options are specified\n        checkFormat: !banKeywords || hasOption(OPTION_CHECK_FORMAT),\n        leadingUnderscore: hasOption(OPTION_LEADING_UNDERSCORE),\n        trailingUnderscore: hasOption(OPTION_TRAILING_UNDERSCORE),\n        allowPascalCase: hasOption(OPTION_ALLOW_PASCAL_CASE),\n        allowSnakeCase: hasOption(OPTION_ALLOW_SNAKE_CASE),\n    };\n    function hasOption(name) {\n        return ruleArguments.indexOf(name) !== -1;\n    }\n}\nfunction walk(ctx) {\n    var options = ctx.options, sourceFile = ctx.sourceFile;\n    return ts.forEachChild(sourceFile, function cb(node) {\n        switch (node.kind) {\n            case ts.SyntaxKind.BindingElement: {\n                var _a = node, initializer = _a.initializer, name = _a.name, propertyName = _a.propertyName;\n                if (name.kind === ts.SyntaxKind.Identifier) {\n                    handleVariableNameKeyword(name);\n                    // A destructuring pattern that does not rebind an expression is always an alias, e.g. `var {Foo} = ...;`.\n                    // Only check if the name is rebound (`var {Foo: bar} = ...;`).\n                    if (node.parent.kind !== ts.SyntaxKind.ObjectBindingPattern ||\n                        propertyName !== undefined) {\n                        handleVariableNameFormat(name, initializer);\n                    }\n                }\n                break;\n            }\n            case ts.SyntaxKind.VariableStatement:\n                // skip 'declare' keywords\n                if (tsutils_1.hasModifier(node.modifiers, ts.SyntaxKind.DeclareKeyword)) {\n                    return;\n                }\n                break;\n            case ts.SyntaxKind.Parameter:\n            case ts.SyntaxKind.PropertyDeclaration:\n            case ts.SyntaxKind.VariableDeclaration: {\n                var _b = node, name = _b.name, initializer = _b.initializer;\n                if (name.kind === ts.SyntaxKind.Identifier) {\n                    handleVariableNameFormat(name, initializer);\n                    // do not check property declarations for keywords, they are allowed to be keywords\n                    if (node.kind !== ts.SyntaxKind.PropertyDeclaration) {\n                        handleVariableNameKeyword(name);\n                    }\n                }\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n    function handleVariableNameFormat(name, initializer) {\n        if (!options.checkFormat) {\n            return;\n        }\n        var text = name.text;\n        if (initializer !== undefined && isAlias(text, initializer)) {\n            return;\n        }\n        if (text.length !== 0 && !isCamelCase(text, options) && !utils_1.isUpperCase(text)) {\n            ctx.addFailureAtNode(name, formatFailure());\n        }\n    }\n    function handleVariableNameKeyword(name) {\n        if (options.banKeywords && bannedKeywordsSet.has(name.text)) {\n            ctx.addFailureAtNode(name, Rule.KEYWORD_FAILURE);\n        }\n    }\n    function formatFailure() {\n        var failureMessage = \"variable name must be in lowerCamelCase\";\n        if (options.allowPascalCase) {\n            failureMessage += \", PascalCase\";\n        }\n        if (options.allowSnakeCase) {\n            failureMessage += \", snake_case\";\n        }\n        return failureMessage + \" or UPPER_CASE\";\n    }\n}\nfunction isAlias(name, initializer) {\n    switch (initializer.kind) {\n        case ts.SyntaxKind.PropertyAccessExpression:\n            return initializer.name.text === name;\n        case ts.SyntaxKind.Identifier:\n            return initializer.text === name;\n        default:\n            return false;\n    }\n}\nfunction isCamelCase(name, options) {\n    var firstCharacter = name[0];\n    var lastCharacter = name[name.length - 1];\n    var middle = name.slice(1, -1);\n    if (!options.leadingUnderscore && firstCharacter === \"_\") {\n        return false;\n    }\n    if (!options.trailingUnderscore && lastCharacter === \"_\") {\n        return false;\n    }\n    if (!options.allowPascalCase && !utils_1.isLowerCase(firstCharacter)) {\n        return false;\n    }\n    if (!options.allowSnakeCase && middle.indexOf(\"_\") !== -1) {\n        return false;\n    }\n    return true;\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/variableNameRule.js\n// module id = 2157\n// module chunks = 32"],"sourceRoot":""}