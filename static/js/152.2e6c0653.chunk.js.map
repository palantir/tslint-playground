{"version":3,"sources":["../node_modules/tslint/lib/rules/banCommaOperatorRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","descriptionDetails","rationale","Utils","dedent","__makeTemplateObject","options","optionsDescription","optionExamples","type","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","isBinaryExpression","operatorToken","kind","SyntaxKind","CommaToken","parent","ForStatement","incrementor","isForLoopIncrementor","addFailureAtNode"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IA4CAC,EA5CAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,qBACAC,YAAA,2CACAC,mBAAA,yIACAC,UAAAf,EAAAgB,MAAAC,OAAAtB,MAAAC,EAAAsB,sBAAA,8rBAAgtB,ouBAChtBC,QAAA,KACAC,mBAAA,GACAC,iBAAA,GACAC,KAAA,gBACAC,gBAAA,GAGAtB,EAAAuB,eAAA,oGACAvB,EAtBA,CAuBCD,EAAAyB,MAAAC,cAED,SAAAhB,EAAAiB,GACA,OAAA5B,EAAA6B,aAAAD,EAAAnB,WAAA,SAAAqB,EAAAC,GAMA,OALAhC,EAAAiC,mBAAAD,IACAA,EAAAE,cAAAC,OAAAlC,EAAAmC,WAAAC,aAOA,SAAAL,GACA,IAAAM,EAAAN,EAAAM,OACA,OAAAA,EAAAH,OAAAlC,EAAAmC,WAAAG,cACAD,EAAAE,cAAAR,EATAS,CAAAT,IACAH,EAAAa,iBAAAV,EAAA7B,EAAAuB,gBAEAzB,EAAA6B,aAAAE,EAAAD,KARApC,EAAAQ","file":"static/js/152.2e6c0653.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys max-line-length */\n    Rule.metadata = {\n        ruleName: \"ban-comma-operator\",\n        description: \"Disallows the comma operator to be used.\",\n        descriptionDetails: \"[Read more about the comma operator here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator).\",\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Using the comma operator can create a potential for many non-obvious bugs or lead to misunderstanding of code.\\n\\n            ### Examples\\n            ```\\n            foo((bar, baz)); // evaluates to 'foo(baz)' because of the extra parens - confusing and not obvious\\n            ```\\n\\n            ```\\n            switch (foo) {\\n                case 1, 2: // equals 'case 2' - probably intended 'case 1: case2:'\\n                    return true;\\n                case 3:\\n                    return false;\\n            }\\n            ```\\n\\n            ```\\n            let x = (y = 1, z = 2); // x is equal to 2 - this may not be immediately obvious.\\n            ```\\n        \"], [\"\\n            Using the comma operator can create a potential for many non-obvious bugs or lead to misunderstanding of code.\\n\\n            ### Examples\\n            \\\\`\\\\`\\\\`\\n            foo((bar, baz)); // evaluates to 'foo(baz)' because of the extra parens - confusing and not obvious\\n            \\\\`\\\\`\\\\`\\n\\n            \\\\`\\\\`\\\\`\\n            switch (foo) {\\n                case 1, 2: // equals 'case 2' - probably intended 'case 1: case2:'\\n                    return true;\\n                case 3:\\n                    return false;\\n            }\\n            \\\\`\\\\`\\\\`\\n\\n            \\\\`\\\\`\\\\`\\n            let x = (y = 1, z = 2); // x is equal to 2 - this may not be immediately obvious.\\n            \\\\`\\\\`\\\\`\\n        \"]))),\n        options: null,\n        optionsDescription: \"\",\n        optionExamples: [true],\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys max-line-length */\n    Rule.FAILURE_STRING = \"Do not use comma operator here because it can be easily misunderstood or lead to unintended bugs.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isBinaryExpression(node) &&\n            node.operatorToken.kind === ts.SyntaxKind.CommaToken &&\n            !isForLoopIncrementor(node)) {\n            ctx.addFailureAtNode(node, Rule.FAILURE_STRING);\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction isForLoopIncrementor(node) {\n    var parent = node.parent;\n    return (parent.kind === ts.SyntaxKind.ForStatement &&\n        parent.incrementor === node);\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/banCommaOperatorRule.js\n// module id = 2015\n// module chunks = 152"],"sourceRoot":""}