{"version":3,"sources":["../node_modules/tslint/lib/rules/interfaceOverTypeLiteralRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","rationale","optionsDescription","options","optionExamples","type","typescriptOnly","hasFix","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","isTypeAliasDeclaration","isTypeLiteralNode","typeKeyword","getChildOfKind","SyntaxKind","TypeKeyword","fix","Replacement","end","deleteFromTo","pos","members","text","push","deleteText","addFailureAtNode","name"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,8BACAC,YAAA,2EACAC,UAAA,oHACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,QACAC,gBAAA,EACAC,QAAA,GAGAnB,EAAAoB,eAAA,8CACApB,EAtBA,CAuBCD,EAAAsB,MAAAC,cAED,SAAAb,EAAAc,GACA,OAAAzB,EAAA0B,aAAAD,EAAAhB,WAAA,SAAAkB,EAAAC,GACA,GAAA7B,EAAA8B,uBAAAD,IAAA7B,EAAA+B,kBAAAF,EAAAT,MAAA,CACA,IAAAY,EAAAhC,EAAAiC,eAAAJ,EAAA5B,EAAAiC,WAAAC,YAAAT,EAAAhB,YACA0B,GAEA,IAAAlC,EAAAmC,YAAAL,EAAAM,IAAA,iBAEApC,EAAAmC,YAAAE,aAAAV,EAAAT,KAAAoB,IAAA,EAAAX,EAAAT,KAAAqB,QAAAD,IAAA,IAGA,MAAAd,EAAAhB,WAAAgC,KAAAb,EAAAS,IAAA,IACAF,EAAAO,KAAAzC,EAAAmC,YAAAO,WAAAf,EAAAS,IAAA,MAEAZ,EAAAmB,iBAAAhB,EAAAiB,KAAA3C,EAAAoB,eAAAa,GAEA,OAAAnC,EAAA0B,aAAAE,EAAAD,KAjBAhC,EAAAO","file":"static/js/133.9ef2e85d.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"interface-over-type-literal\",\n        description: \"Prefer an interface declaration over a type literal (`type T = { ... }`)\",\n        rationale: \"Interfaces are generally preferred over type literals because interfaces can be implemented, extended and merged.\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"style\",\n        typescriptOnly: true,\n        hasFix: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Use an interface instead of a type literal.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isTypeAliasDeclaration(node) && tsutils_1.isTypeLiteralNode(node.type)) {\n            var typeKeyword = tsutils_1.getChildOfKind(node, ts.SyntaxKind.TypeKeyword, ctx.sourceFile);\n            var fix = [\n                // \"type\" -> \"interface\"\n                new Lint.Replacement(typeKeyword.end - 4, 4, \"interface\"),\n                // remove \"=\" and trivia up to the open curly brace of the type literal\n                Lint.Replacement.deleteFromTo(node.type.pos - 1, node.type.members.pos - 1),\n            ];\n            // remove trailing semicolon if exists\n            if (ctx.sourceFile.text[node.end - 1] === \";\") {\n                fix.push(Lint.Replacement.deleteText(node.end - 1, 1));\n            }\n            ctx.addFailureAtNode(node.name, Rule.FAILURE_STRING, fix);\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/interfaceOverTypeLiteralRule.js\n// module id = 2038\n// module chunks = 133"],"sourceRoot":""}