{"version":3,"sources":["../node_modules/tslint/lib/rules/noVarKeywordRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","descriptionDetails","hasFix","optionsDescription","options","optionExamples","rationale","Utils","dedent","__makeTemplateObject","type","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","parent","isVariableDeclarationList","isBlockScopedVariableDeclarationList","isVariableStatement","hasModifier","modifiers","SyntaxKind","DeclareKeyword","kind","ModuleBlock","isNodeFlagSet","NodeFlags","GlobalAugmentation","isGlobalVarDeclaration","start","getStart","width","length","fix","isDeclarationFile","undefined","Replacement","addFailureAt"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAwDAC,EAxDAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAoBA,OAtBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,iBACAC,YAAA,wCACAC,mBAAA,gCACAC,QAAA,EACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,UAAAnB,EAAAoB,MAAAC,OAAA1B,MAAAC,EAAA0B,sBAAA,kvCACAC,KAAA,gBACAC,gBAAA,GAGAvB,EAAAwB,eAAA,wDACAxB,EAvBA,CAwBCD,EAAA0B,MAAAC,cAED,SAAAjB,EAAAkB,GACA,IAAApB,EAAAoB,EAAApB,WACA,OAAAT,EAAA8B,aAAArB,EAAA,SAAAsB,EAAAC,GACA,IAAAC,EAAAD,EAAAC,OACA,GAAAlC,EAAAmC,0BAAAF,KACAjC,EAAAoC,qCAAAH,MAEAjC,EAAAqC,oBAAAH,KAaA,SAAAD,GACA,IAAAC,EAAAD,EAAAC,OACA,OAAAlC,EAAAsC,YAAAL,EAAAM,UAAAtC,EAAAuC,WAAAC,iBACAP,EAAAQ,OAAAzC,EAAAuC,WAAAG,aACA3C,EAAA4C,cAAAV,SAAAjC,EAAA4C,UAAAC,oBAjBAC,CAAAb,IAAA,CACA,IAAAc,EAAAf,EAAAgB,SAAAvC,GACAwC,EAAA,MAAAC,OAEAC,EAAA1C,EAAA2C,uBACAC,EACA,IAAApD,EAAAqD,YAAAP,EAAAE,EAAA,OACApB,EAAA0B,aAAAR,EAAAE,EAAA/C,EAAAwB,eAAAyB,GAEA,OAAAnD,EAAA8B,aAAAE,EAAAD,KAjBArC,EAAAQ","file":"static/js/65.94771489.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2015 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-var-keyword\",\n        description: \"Disallows usage of the `var` keyword.\",\n        descriptionDetails: \"Use `let` or `const` instead.\",\n        hasFix: true,\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Declaring variables using `var` has several edge case behaviors that make `var` unsuitable for modern code.\\n            Variables declared by `var` have their parent function block as their scope, ignoring other control flow statements.\\n            `var`s have declaration \\\"hoisting\\\" (similar to `function`s) and can appear to be used before declaration.\\n\\n            Variables declared by `const` and `let` instead have as their scope the block in which they are defined,\\n            and are not allowed to used before declaration or be re-declared with another `const` or `let`.\\n        \"], [\"\\n            Declaring variables using \\\\`var\\\\` has several edge case behaviors that make \\\\`var\\\\` unsuitable for modern code.\\n            Variables declared by \\\\`var\\\\` have their parent function block as their scope, ignoring other control flow statements.\\n            \\\\`var\\\\`s have declaration \\\"hoisting\\\" (similar to \\\\`function\\\\`s) and can appear to be used before declaration.\\n\\n            Variables declared by \\\\`const\\\\` and \\\\`let\\\\` instead have as their scope the block in which they are defined,\\n            and are not allowed to used before declaration or be re-declared with another \\\\`const\\\\` or \\\\`let\\\\`.\\n        \"]))),\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Forbidden 'var' keyword, use 'let' or 'const' instead\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var sourceFile = ctx.sourceFile;\n    return ts.forEachChild(sourceFile, function cb(node) {\n        var parent = node.parent;\n        if (tsutils_1.isVariableDeclarationList(node) &&\n            !tsutils_1.isBlockScopedVariableDeclarationList(node) &&\n            // If !isVariableStatement, this is inside of a for loop.\n            (!tsutils_1.isVariableStatement(parent) || !isGlobalVarDeclaration(parent))) {\n            var start = node.getStart(sourceFile);\n            var width = \"var\".length;\n            // Don't apply fix in a declaration file, because may have meant 'const'.\n            var fix = sourceFile.isDeclarationFile\n                ? undefined\n                : new Lint.Replacement(start, width, \"let\");\n            ctx.addFailureAt(start, width, Rule.FAILURE_STRING, fix);\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\n// Allow `declare var x: number;` or `declare global { var x: number; }`\nfunction isGlobalVarDeclaration(node) {\n    var parent = node.parent;\n    return (tsutils_1.hasModifier(node.modifiers, ts.SyntaxKind.DeclareKeyword) ||\n        (parent.kind === ts.SyntaxKind.ModuleBlock &&\n            tsutils_1.isNodeFlagSet(parent.parent, ts.NodeFlags.GlobalAugmentation)));\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noVarKeywordRule.js\n// module id = 2113\n// module chunks = 65"],"sourceRoot":""}