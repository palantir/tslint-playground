{"version":3,"sources":["../node_modules/tslint/lib/rules/indentRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","tsutils_1","ts","Lint","OPTION_USE_TABS","OPTION_USE_SPACES","OPTION_INDENT_SIZE_2","OPTION_INDENT_SIZE_4","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","expected","prototype","sourceFile","options","ruleArguments","type","size","undefined","tabs","parseOptions","applyWithFunction","walk","metadata","ruleName","description","rationale","Utils","dedent","__makeTemplateObject","optionsDescription","toString","items","enum","minLength","maxLength","optionExamples","hasFix","typescriptOnly","Rules","AbstractRule","ctx","_a","regExp","RegExp","repeat","failure","_i","_b","getLineRanges","length","_c","pos","contentLength","line","text","substr","indentEnd","search","whitespace","slice","test","token","getTokenAtPosition","kind","SyntaxKind","JsxText","getStart","isPositionInComment","addFailureAt","createFix","lineStart","fullLeadingWhitespace","replaceRegExp","replacement","replace","match","Math","ceil","Replacement"],"mappings":"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","file":"static/js/135.524d37d1.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_USE_TABS = \"tabs\";\nvar OPTION_USE_SPACES = \"spaces\";\nvar OPTION_INDENT_SIZE_2 = 2;\nvar OPTION_INDENT_SIZE_4 = 4;\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (expected) {\n        return expected + \" indentation expected\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        var options = parseOptions(this.ruleArguments);\n        return options === undefined ? [] : this.applyWithFunction(sourceFile, walk, options);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"indent\",\n        description: \"Enforces indentation with tabs or spaces.\",\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Using only one of tabs or spaces for indentation leads to more consistent editor behavior,\\n            cleaner diffs in version control, and easier programmatic manipulation.\"], [\"\\n            Using only one of tabs or spaces for indentation leads to more consistent editor behavior,\\n            cleaner diffs in version control, and easier programmatic manipulation.\"]))),\n        optionsDescription: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            One of the following arguments must be provided:\\n\\n            * `\", \"` enforces consistent spaces.\\n            * `\", \"` enforces consistent tabs.\\n\\n            A second optional argument specifies indentation size:\\n\\n            * `\", \"` enforces 2 space indentation.\\n            * `\", \"` enforces 4 space indentation.\\n\\n            Indentation size is **required** for auto-fixing, but not for rule checking.\\n\\n            **NOTE**: auto-fixing will only convert invalid indent whitespace to the desired type, it will not fix invalid whitespace sizes.\\n            \"], [\"\\n            One of the following arguments must be provided:\\n\\n            * \\\\`\", \"\\\\` enforces consistent spaces.\\n            * \\\\`\", \"\\\\` enforces consistent tabs.\\n\\n            A second optional argument specifies indentation size:\\n\\n            * \\\\`\", \"\\\\` enforces 2 space indentation.\\n            * \\\\`\", \"\\\\` enforces 4 space indentation.\\n\\n            Indentation size is **required** for auto-fixing, but not for rule checking.\\n\\n            **NOTE**: auto-fixing will only convert invalid indent whitespace to the desired type, it will not fix invalid whitespace sizes.\\n            \"])), OPTION_USE_SPACES, OPTION_USE_TABS, OPTION_INDENT_SIZE_2.toString(), OPTION_INDENT_SIZE_4.toString()),\n        options: {\n            type: \"array\",\n            items: [\n                {\n                    type: \"string\",\n                    enum: [OPTION_USE_TABS, OPTION_USE_SPACES],\n                },\n                {\n                    type: \"number\",\n                    enum: [OPTION_INDENT_SIZE_2, OPTION_INDENT_SIZE_4],\n                },\n            ],\n            minLength: 0,\n            maxLength: 5,\n        },\n        optionExamples: [\n            [true, OPTION_USE_SPACES],\n            [true, OPTION_USE_SPACES, OPTION_INDENT_SIZE_4],\n            [true, OPTION_USE_TABS, OPTION_INDENT_SIZE_2],\n        ],\n        hasFix: true,\n        type: \"maintainability\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction parseOptions(ruleArguments) {\n    var type = ruleArguments[0];\n    if (type !== OPTION_USE_TABS && type !== OPTION_USE_SPACES) {\n        return undefined;\n    }\n    var size = ruleArguments[1];\n    return {\n        size: size === OPTION_INDENT_SIZE_2 || size === OPTION_INDENT_SIZE_4 ? size : undefined,\n        tabs: type === OPTION_USE_TABS,\n    };\n}\nfunction walk(ctx) {\n    var sourceFile = ctx.sourceFile, _a = ctx.options, tabs = _a.tabs, size = _a.size;\n    var regExp = tabs ? new RegExp(\" \".repeat(size === undefined ? 1 : size)) : /\\t/;\n    var failure = Rule.FAILURE_STRING(tabs ? \"tab\" : size === undefined ? \"space\" : size + \" space\");\n    for (var _i = 0, _b = tsutils_1.getLineRanges(sourceFile); _i < _b.length; _i++) {\n        var _c = _b[_i], pos = _c.pos, contentLength = _c.contentLength;\n        if (contentLength === 0) {\n            continue;\n        }\n        var line = sourceFile.text.substr(pos, contentLength);\n        var indentEnd = line.search(/\\S/);\n        if (indentEnd === 0) {\n            continue;\n        }\n        if (indentEnd === -1) {\n            indentEnd = contentLength;\n        }\n        var whitespace = line.slice(0, indentEnd);\n        if (!regExp.test(whitespace)) {\n            continue;\n        }\n        var token = tsutils_1.getTokenAtPosition(sourceFile, pos);\n        if (token.kind !== ts.SyntaxKind.JsxText &&\n            (pos >= token.getStart(sourceFile) || tsutils_1.isPositionInComment(sourceFile, pos, token))) {\n            continue;\n        }\n        ctx.addFailureAt(pos, indentEnd, failure, createFix(pos, whitespace, tabs, size));\n    }\n}\nfunction createFix(lineStart, fullLeadingWhitespace, tabs, size) {\n    if (size === undefined) {\n        return undefined;\n    }\n    var replaceRegExp = tabs\n        ? // we want to find every group of `size` spaces, plus up to one 'incomplete' group\n            new RegExp(\"^( {\" + size + \"})+( {1,\" + (size - 1) + \"})?\", \"g\")\n        : /\\t/g;\n    var replacement = fullLeadingWhitespace.replace(replaceRegExp, function (match) {\n        return (tabs ? \"\\t\" : \" \".repeat(size)).repeat(Math.ceil(match.length / size));\n    });\n    return new Lint.Replacement(lineStart, fullLeadingWhitespace.length, replacement);\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/indentRule.js\n// module id = 2036\n// module chunks = 135"],"sourceRoot":""}