{"version":3,"sources":["../node_modules/tslint/lib/rules/useIsnanRule.js","../node_modules/tslint/lib/rules/code-examples/useIsnan.examples.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","useIsnan_examples_1","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","rationale","Utils","dedent","__makeTemplateObject","optionsDescription","options","optionExamples","type","typescriptOnly","codeExamples","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","isBinaryExpression","operatorToken","kind","SyntaxKind","LessThanToken","GreaterThanToken","LessThanEqualsToken","GreaterThanEqualsToken","EqualsEqualsToken","ExclamationEqualsToken","EqualsEqualsEqualsToken","ExclamationEqualsEqualsToken","isExpressionNaN","right","left","addFailureAtNode","getText","Identifier","text","templateObject_2","templateObject_3","config","pass","fail"],"mappings":"oDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAqDAC,EArDAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,MACAK,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAT,EAAAW,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,YACAC,YAAA,oHACAC,UAAAf,EAAAgB,MAAAC,OAAAtB,MAAAC,EAAAsB,sBAAA,wXACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,gBACAC,gBAAA,EACAC,aAAAvB,EAAAuB,cAGAtB,EAAAuB,eAAA,wCACAvB,EAtBA,CAuBCF,EAAA0B,MAAAC,cAED,SAAAhB,EAAAiB,GACA,OAAA7B,EAAA8B,aAAAD,EAAAnB,WAAA,SAAAqB,EAAAC,GACA,GAAAjC,EAAAkC,mBAAAD,GACA,OAAAA,EAAAE,cAAAC,MACA,KAAAnC,EAAAoC,WAAAC,cACA,KAAArC,EAAAoC,WAAAE,iBACA,KAAAtC,EAAAoC,WAAAG,oBACA,KAAAvC,EAAAoC,WAAAI,uBACA,KAAAxC,EAAAoC,WAAAK,kBACA,KAAAzC,EAAAoC,WAAAM,uBACA,KAAA1C,EAAAoC,WAAAO,wBACA,KAAA3C,EAAAoC,WAAAQ,8BACAC,EAAAb,EAAAc,QAAAD,EAAAb,EAAAe,QACAlB,EAAAmB,iBAAAhB,EAAA7B,EAAAuB,eAAAM,EAAAiB,QAAApB,EAAAnB,aAIA,OAAAV,EAAA8B,aAAAE,EAAAD,KAGA,SAAAc,EAAAb,GACA,OAAAA,EAAAG,OAAAnC,EAAAoC,WAAAc,YAAA,QAAAlB,EAAAmB,KAtBAzD,EAAAS,0CC9BAX,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAWAC,EAAAwD,EAAAC,EAXAxD,EAAAC,EAAA,GACAG,EAAAH,EAAA,MAEAJ,EAAA+B,eAEAV,YAAA,+BACAuC,OAAArD,EAAAgB,MAAAC,OAAAtB,MAAAC,EAAAsB,sBAAA,2DAAyJ,6DACzJoC,KAAAtD,EAAAgB,MAAAC,OAAAkC,MAAAvD,EAAAsB,sBAAA,2GAAmM,6GACnMqC,KAAAvD,EAAAgB,MAAAC,OAAAmC,MAAAxD,EAAAsB,sBAAA,2GAAoM","file":"static/js/7.d45551c6.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar useIsnan_examples_1 = require(\"./code-examples/useIsnan.examples\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"use-isnan\",\n        description: \"Enforces use of the `isNaN()` function to check for NaN references instead of a comparison to the `NaN` constant.\",\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Since `NaN !== NaN`, comparisons with regular operators will produce unexpected results.\\n            So, instead of `if (myVar === NaN)`, do `if (isNaN(myVar))`.\"], [\"\\n            Since \\\\`NaN !== NaN\\\\`, comparisons with regular operators will produce unexpected results.\\n            So, instead of \\\\`if (myVar === NaN)\\\\`, do \\\\`if (isNaN(myVar))\\\\`.\"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"functionality\",\n        typescriptOnly: false,\n        codeExamples: useIsnan_examples_1.codeExamples,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Found an invalid comparison for NaN: \";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isBinaryExpression(node)) {\n            switch (node.operatorToken.kind) {\n                case ts.SyntaxKind.LessThanToken:\n                case ts.SyntaxKind.GreaterThanToken:\n                case ts.SyntaxKind.LessThanEqualsToken:\n                case ts.SyntaxKind.GreaterThanEqualsToken:\n                case ts.SyntaxKind.EqualsEqualsToken:\n                case ts.SyntaxKind.ExclamationEqualsToken:\n                case ts.SyntaxKind.EqualsEqualsEqualsToken:\n                case ts.SyntaxKind.ExclamationEqualsEqualsToken:\n                    if (isExpressionNaN(node.right) || isExpressionNaN(node.left)) {\n                        ctx.addFailureAtNode(node, Rule.FAILURE_STRING + node.getText(ctx.sourceFile));\n                    }\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction isExpressionNaN(node) {\n    return node.kind === ts.SyntaxKind.Identifier && node.text === \"NaN\";\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/useIsnanRule.js\n// module id = 2156\n// module chunks = 7","\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Lint = require(\"../../index\");\n// tslint:disable: object-literal-sort-keys\nexports.codeExamples = [\n    {\n        description: \"Enforces usage of `isNan()`.\",\n        config: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"use-isnan\\\": true }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"use-isnan\\\": true }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            if (isNaN(parseInt('_4711'))) {\\n                doSomething();\\n            }\\n        \"], [\"\\n            if (isNaN(parseInt('_4711'))) {\\n                doSomething();\\n            }\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject([\"\\n            if (parseInt('_4711') === NaN) {\\n                doSomething();\\n            }\\n       \"], [\"\\n            if (parseInt('_4711') === NaN) {\\n                doSomething();\\n            }\\n       \"]))),\n    },\n];\nvar templateObject_1, templateObject_2, templateObject_3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/code-examples/useIsnan.examples.js\n// module id = 2202\n// module chunks = 7"],"sourceRoot":""}