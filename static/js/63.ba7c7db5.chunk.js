webpackJsonp([63],{2115:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o,i,r=t(1),s=t(843),a=t(54),l=t(1116),p=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r.__extends(n,e),n.prototype.applyWithProgram=function(e,n){var t=-1!==this.ruleArguments.indexOf("ignore-arrow-function-shorthand");return this.applyWithFunction(e,u,{ignoreArrowFunctionShorthand:t},n.getTypeChecker())},n.metadata={ruleName:"no-void-expression",description:"Requires expressions of type `void` to appear in statement position.",optionsDescription:l.Utils.dedent(o||(o=r.__makeTemplateObject(["\n            If `","` is provided, `() => returnsVoid()` will be allowed.\n            Otherwise, it must be written as `() => { returnsVoid(); }`."],["\n            If \\`","\\` is provided, \\`() => returnsVoid()\\` will be allowed.\n            Otherwise, it must be written as \\`() => { returnsVoid(); }\\`."])),"ignore-arrow-function-shorthand"),options:{type:"array",items:{type:"string",enum:["ignore-arrow-function-shorthand"]},minLength:0,maxLength:1},rationale:l.Utils.dedent(i||(i=r.__makeTemplateObject(["\n            It's misleading returning the results of an expression whose type is `void`.\n            Attempting to do so is likely a symptom of expecting a different return type from a function.\n            For example, the following code will log `undefined` but looks like it logs a value:\n\n            ```\n            const performWork = (): void => {\n                workFirst();\n                workSecond();\n            };\n\n            console.log(performWork());\n            ```\n        "],["\n            It's misleading returning the results of an expression whose type is \\`void\\`.\n            Attempting to do so is likely a symptom of expecting a different return type from a function.\n            For example, the following code will log \\`undefined\\` but looks like it logs a value:\n\n            \\`\\`\\`\n            const performWork = (): void => {\n                workFirst();\n                workSecond();\n            };\n\n            console.log(performWork());\n            \\`\\`\\`\n        "]))),requiresTypeInfo:!0,type:"functionality",typescriptOnly:!1},n.FAILURE_STRING="Expression has type `void`. Put it on its own line as a statement.",n}(l.Rules.TypedRule);function u(e,n){var t=e.sourceFile,o=e.options.ignoreArrowFunctionShorthand;return a.forEachChild(t,function t(i){return function(e){switch(e.kind){case a.SyntaxKind.AwaitExpression:case a.SyntaxKind.CallExpression:case a.SyntaxKind.TaggedTemplateExpression:return!0;default:return!1}}(i)&&!function e(n){switch(n.parent.kind){case a.SyntaxKind.ExpressionStatement:return!0;case a.SyntaxKind.ArrowFunction:return o;case a.SyntaxKind.BinaryExpression:return e(n.parent);default:return!1}}(i)&&s.isTypeFlagSet(n.getTypeAtLocation(i),a.TypeFlags.Void)&&e.addFailureAtNode(i,p.FAILURE_STRING),a.forEachChild(i,t)})}n.Rule=p}});
//# sourceMappingURL=63.ba7c7db5.chunk.js.map