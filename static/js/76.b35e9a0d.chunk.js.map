{"version":3,"sources":["../node_modules/tslint/lib/rules/noSwitchCaseFallThroughRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","utils","ts","Lint","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","keyword","tokenToString","prototype","sourceFile","applyWithWalker","NoSwitchCaseFallThroughWalker","ruleName","undefined","metadata","description","descriptionDetails","Utils","dedent","templateObject_1","__makeTemplateObject","rationale","optionsDescription","options","optionExamples","type","typescriptOnly","Rules","AbstractRule","walk","_this","cb","node","isSwitchStatement","visitSwitchStatement","forEachChild","_a","clauses","caseBlock","forEach","clause","i","length","statements","endsControlFlow","isFallThroughAllowed","getChildAt","addFailureAtNode","kind","comments","getLeadingCommentRanges","text","end","some","comment","test","slice","pos","AbstractWalker"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAqBA,OAvBAR,EAAAU,UAAAL,EAAAC,GAKAD,EAAAM,eAAA,SAAAC,GACA,oCAAAT,EAAAU,cAAAD,GAAA,KAEAP,EAAAS,UAAAP,MAAA,SAAAQ,GACA,OAAAP,KAAAQ,gBAAA,IAAAC,EAAAF,EAAAP,KAAAU,cAAAC,KAGAd,EAAAe,UACAF,SAAA,8BACAG,YAAA,6CACAC,mBAAAlB,EAAAmB,MAAAC,OAAAC,MAAAzB,EAAA0B,sBAAA,4sBAA2yB,0uBAC3yBC,UAAA,qEACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,gBACAC,gBAAA,GAEA3B,EAxBA,CAyBCD,EAAA6B,MAAAC,cACDpC,EAAAO,OACA,IAuCAoB,EAvCAR,EAAA,SAAAX,GAEA,SAAAW,IACA,cAAAX,KAAAC,MAAAC,KAAAC,YAAAD,KAiCA,OAnCAR,EAAAU,UAAAO,EAAAX,GAIAW,EAAAH,UAAAqB,KAAA,SAAApB,GACA,IAAAqB,EAAA5B,KACA6B,EAAA,SAAAC,GAIA,OAHApC,EAAAqC,kBAAAD,IACAF,EAAAI,qBAAAF,GAEAnC,EAAAsC,aAAAH,EAAAD,IAEA,OAAAlC,EAAAsC,aAAA1B,EAAAsB,IAEApB,EAAAH,UAAA0B,qBAAA,SAAAE,GACA,IAAAN,EAAA5B,KACAmC,EAAAD,EAAAE,UAAAD,QACAA,EAAAE,QAAA,SAAAC,EAAAC,GACA,GAAAA,IAAAJ,EAAAK,OAAA,GACA,IAAAF,EAAAG,WAAAD,SACA9C,EAAAgD,gBAAAJ,KACAV,EAAAe,qBAAAL,GAAA,CACA,IAAAlC,EAAA+B,EAAAI,EAAA,GAAAK,WAAA,GACAhB,EAAAiB,iBAAAzC,EAAAP,EAAAM,eAAAC,EAAA0C,WAIArC,EAAAH,UAAAqC,qBAAA,SAAAL,GACA,IAAAV,EAAA5B,KACA+C,EAAApD,EAAAqD,wBAAAhD,KAAAO,WAAA0C,KAAAX,EAAAY,KACA,YAAAvC,IAAAoC,GACAA,EAAAI,KAAA,SAAAC,GACA,6BAAAC,KAAAzB,EAAArB,WAAA0C,KAAAK,MAAAF,EAAAG,IAAA,EAAAH,EAAAF,SAGAzC,EApCA,CAqCCb,EAAA4D,gBACDlE,EAAAmB","file":"static/js/76.b35e9a0d.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (keyword) {\n        return \"expected a 'break' before '\" + ts.tokenToString(keyword) + \"'\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithWalker(new NoSwitchCaseFallThroughWalker(sourceFile, this.ruleName, undefined));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-switch-case-fall-through\",\n        description: \"Disallows falling through case statements.\",\n        descriptionDetails: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            For example, the following is not allowed:\\n\\n            ```ts\\n            switch(foo) {\\n                case 1:\\n                    someFunc(foo);\\n                case 2:\\n                    someOtherFunc(foo);\\n            }\\n            ```\\n\\n            However, fall through is allowed when case statements are consecutive or\\n            a magic `/* falls through */` comment is present. The following is valid:\\n\\n            ```ts\\n            switch(foo) {\\n                case 1:\\n                    someFunc(foo);\\n                    /* falls through */\\n                case 2:\\n                case 3:\\n                    someOtherFunc(foo);\\n            }\\n            ```\"], [\"\\n            For example, the following is not allowed:\\n\\n            \\\\`\\\\`\\\\`ts\\n            switch(foo) {\\n                case 1:\\n                    someFunc(foo);\\n                case 2:\\n                    someOtherFunc(foo);\\n            }\\n            \\\\`\\\\`\\\\`\\n\\n            However, fall through is allowed when case statements are consecutive or\\n            a magic \\\\`/* falls through */\\\\` comment is present. The following is valid:\\n\\n            \\\\`\\\\`\\\\`ts\\n            switch(foo) {\\n                case 1:\\n                    someFunc(foo);\\n                    /* falls through */\\n                case 2:\\n                case 3:\\n                    someOtherFunc(foo);\\n            }\\n            \\\\`\\\\`\\\\`\"]))),\n        rationale: \"Fall though in switch statements is often unintentional and a bug.\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar NoSwitchCaseFallThroughWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(NoSwitchCaseFallThroughWalker, _super);\n    function NoSwitchCaseFallThroughWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoSwitchCaseFallThroughWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        var cb = function (node) {\n            if (utils.isSwitchStatement(node)) {\n                _this.visitSwitchStatement(node);\n            }\n            return ts.forEachChild(node, cb);\n        };\n        return ts.forEachChild(sourceFile, cb);\n    };\n    NoSwitchCaseFallThroughWalker.prototype.visitSwitchStatement = function (_a) {\n        var _this = this;\n        var clauses = _a.caseBlock.clauses;\n        clauses.forEach(function (clause, i) {\n            if (i !== clauses.length - 1 &&\n                clause.statements.length !== 0 &&\n                !utils.endsControlFlow(clause) &&\n                !_this.isFallThroughAllowed(clause)) {\n                var keyword = clauses[i + 1].getChildAt(0);\n                _this.addFailureAtNode(keyword, Rule.FAILURE_STRING(keyword.kind));\n            }\n        });\n    };\n    NoSwitchCaseFallThroughWalker.prototype.isFallThroughAllowed = function (clause) {\n        var _this = this;\n        var comments = ts.getLeadingCommentRanges(this.sourceFile.text, clause.end);\n        return (comments !== undefined &&\n            comments.some(function (comment) {\n                return /^\\s*falls through\\b/i.test(_this.sourceFile.text.slice(comment.pos + 2, comment.end));\n            }));\n    };\n    return NoSwitchCaseFallThroughWalker;\n}(Lint.AbstractWalker));\nexports.NoSwitchCaseFallThroughWalker = NoSwitchCaseFallThroughWalker;\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noSwitchCaseFallThroughRule.js\n// module id = 2099\n// module chunks = 76"],"sourceRoot":""}