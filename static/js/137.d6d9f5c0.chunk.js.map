{"version":3,"sources":["../node_modules/tslint/lib/rules/importSpacingRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","LINE_BREAK_REGEX","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithWalker","Walker","ruleName","undefined","metadata","description","optionsDescription","options","optionExamples","type","typescriptOnly","ADD_SPACE_AFTER_IMPORT","TOO_MANY_SPACES_AFTER_IMPORT","ADD_SPACE_AFTER_STAR","TOO_MANY_SPACES_AFTER_STAR","ADD_SPACE_AFTER_FROM","TOO_MANY_SPACES_AFTER_FROM","ADD_SPACE_BEFORE_FROM","TOO_MANY_SPACES_BEFORE_FROM","NO_LINE_BREAKS","Rules","AbstractRule","walk","_a","_i","statements_1","statements","length","statement","isImportDeclaration","importClause","checkModuleWithSideEffect","checkImportClause","namedBindings","isNamespaceImport","checkNamespaceImport","node","text","getText","nodeStart","getStart","importKeywordEnd","moduleSpecifierStart","moduleSpecifier","importClauseEnd","getEnd","importClauseStart","addFailureAt","addFailure","fromString","substring","test","beforeImportClauseText","afterImportClauseText","indexOf","addFailureAtNode","getChildOfKind","SyntaxKind","ImportKeyword","AbstractWalker"],"mappings":"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","file":"static/js/137.d6d9f5c0.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar LINE_BREAK_REGEX = /\\r?\\n/;\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithWalker(new Walker(sourceFile, this.ruleName, undefined));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"import-spacing\",\n        description: \"Ensures proper spacing between import statement keywords\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    Rule.ADD_SPACE_AFTER_IMPORT = \"Add space after 'import'\";\n    Rule.TOO_MANY_SPACES_AFTER_IMPORT = \"Too many spaces after 'import'\";\n    Rule.ADD_SPACE_AFTER_STAR = \"Add space after '*'\";\n    Rule.TOO_MANY_SPACES_AFTER_STAR = \"Too many spaces after '*'\";\n    Rule.ADD_SPACE_AFTER_FROM = \"Add space after 'from'\";\n    Rule.TOO_MANY_SPACES_AFTER_FROM = \"Too many spaces after 'from'\";\n    Rule.ADD_SPACE_BEFORE_FROM = \"Add space before 'from'\";\n    Rule.TOO_MANY_SPACES_BEFORE_FROM = \"Too many spaces before 'from'\";\n    Rule.NO_LINE_BREAKS = \"Line breaks are not allowed in import declaration\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar Walker = /** @class */ (function (_super) {\n    tslib_1.__extends(Walker, _super);\n    function Walker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Walker.prototype.walk = function (_a) {\n        var statements = _a.statements;\n        for (var _i = 0, statements_1 = statements; _i < statements_1.length; _i++) {\n            var statement = statements_1[_i];\n            if (!tsutils_1.isImportDeclaration(statement)) {\n                continue;\n            }\n            var importClause = statement.importClause;\n            if (importClause === undefined) {\n                this.checkModuleWithSideEffect(statement);\n            }\n            else {\n                this.checkImportClause(statement, importClause);\n                var namedBindings = importClause.namedBindings;\n                if (namedBindings !== undefined && tsutils_1.isNamespaceImport(namedBindings)) {\n                    this.checkNamespaceImport(namedBindings);\n                }\n            }\n        }\n    };\n    Walker.prototype.checkImportClause = function (node, importClause) {\n        var text = node.getText(this.sourceFile);\n        var nodeStart = node.getStart(this.sourceFile);\n        var importKeywordEnd = nodeStart + \"import\".length;\n        var moduleSpecifierStart = node.moduleSpecifier.getStart(this.sourceFile);\n        var importClauseEnd = importClause.getEnd();\n        var importClauseStart = importClause.getStart(this.sourceFile);\n        if (importKeywordEnd === importClauseStart) {\n            this.addFailureAt(nodeStart, \"import\".length, Rule.ADD_SPACE_AFTER_IMPORT);\n        }\n        else if (importClauseStart > importKeywordEnd + 1) {\n            this.addFailure(nodeStart, importClauseStart, Rule.TOO_MANY_SPACES_AFTER_IMPORT);\n        }\n        var fromString = text.substring(importClauseEnd - nodeStart, moduleSpecifierStart - nodeStart);\n        if (/from$/.test(fromString)) {\n            this.addFailureAt(importClauseEnd, fromString.length, Rule.ADD_SPACE_AFTER_FROM);\n        }\n        else if (/from\\s{2,}$/.test(fromString)) {\n            this.addFailureAt(importClauseEnd, fromString.length, Rule.TOO_MANY_SPACES_AFTER_FROM);\n        }\n        if (/^\\s{2,}from/.test(fromString)) {\n            this.addFailureAt(importClauseEnd, fromString.length, Rule.TOO_MANY_SPACES_BEFORE_FROM);\n        }\n        else if (/^from/.test(fromString)) {\n            this.addFailureAt(importClauseEnd, fromString.length, Rule.ADD_SPACE_BEFORE_FROM);\n        }\n        var beforeImportClauseText = text.substring(0, importClauseStart - nodeStart);\n        var afterImportClauseText = text.substring(importClauseEnd - nodeStart);\n        if (LINE_BREAK_REGEX.test(beforeImportClauseText)) {\n            this.addFailure(nodeStart, importClauseStart - 1, Rule.NO_LINE_BREAKS);\n        }\n        if (LINE_BREAK_REGEX.test(afterImportClauseText)) {\n            this.addFailure(importClauseEnd, node.getEnd(), Rule.NO_LINE_BREAKS);\n        }\n    };\n    Walker.prototype.checkNamespaceImport = function (node) {\n        var text = node.getText(this.sourceFile);\n        if (text.indexOf(\"*as\") > -1) {\n            this.addFailureAtNode(node, Rule.ADD_SPACE_AFTER_STAR);\n        }\n        else if (/\\*\\s{2,}as/.test(text)) {\n            this.addFailureAtNode(node, Rule.TOO_MANY_SPACES_AFTER_STAR);\n        }\n        else if (LINE_BREAK_REGEX.test(text)) {\n            this.addFailureAtNode(node, Rule.NO_LINE_BREAKS);\n        }\n    };\n    Walker.prototype.checkModuleWithSideEffect = function (node) {\n        var nodeStart = node.getStart(this.sourceFile);\n        var moduleSpecifierStart = node.moduleSpecifier.getStart(this.sourceFile);\n        if (nodeStart + \"import\".length + 1 < moduleSpecifierStart) {\n            this.addFailure(nodeStart, moduleSpecifierStart, Rule.TOO_MANY_SPACES_AFTER_IMPORT);\n        }\n        else if (nodeStart + \"import\".length === moduleSpecifierStart) {\n            this.addFailureAtNode(tsutils_1.getChildOfKind(node, ts.SyntaxKind.ImportKeyword, this.sourceFile), Rule.ADD_SPACE_AFTER_IMPORT);\n        }\n        if (LINE_BREAK_REGEX.test(node.getText())) {\n            this.addFailureAtNode(node, Rule.NO_LINE_BREAKS);\n        }\n    };\n    return Walker;\n}(Lint.AbstractWalker));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/importSpacingRule.js\n// module id = 2034\n// module chunks = 137"],"sourceRoot":""}