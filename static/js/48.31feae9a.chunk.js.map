{"version":3,"sources":["../node_modules/tslint/lib/rules/restrictPlusOperandsRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Rule","_super","apply","this","arguments","__extends","prototype","applyWithProgram","sourceFile","program","applyWithFunction","walk","undefined","getTypeChecker","metadata","ruleName","description","optionsDescription","options","optionExamples","type","typescriptOnly","requiresTypeInfo","INVALID_TYPES_ERROR","SUGGEST_TEMPLATE_LITERALS","Rules","TypedRule","ctx","tc","forEachChild","cb","node","isBinaryExpression","operatorToken","kind","SyntaxKind","PlusToken","leftType","getBaseTypeOfLiteralType","getTypeAtLocation","left","rightType","right","addFailureAtNode","isTypeFlagSet","TypeFlags","StringLiteral","String","NumberLiteral","Number","isUnionType","Enum","types","map","array","every","EnumLiteral","baseType"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IAEAG,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAP,EAAAS,UAAAL,EAAAC,GAIAD,EAAAM,UAAAC,iBAAA,SAAAC,EAAAC,GACA,OAAAN,KAAAO,kBAAAF,EAAAG,OAAAC,EAAAH,EAAAI,mBAGAb,EAAAc,UACAC,SAAA,yBACAC,YAAA,qFACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,gBACAC,gBAAA,EACAC,kBAAA,GAGAtB,EAAAuB,oBAAA,wEACAvB,EAAAwB,0BAAA,qCACAxB,EAtBA,CADAH,EAAA,MAwBC4B,MAAAC,WAED,SAAAf,EAAAgB,EAAAC,GACA,OAAA7B,EAAA8B,aAAAF,EAAAnB,WAAA,SAAAsB,EAAAC,GACA,GAAAjC,EAAAkC,mBAAAD,MAAAE,cAAAC,OAAAnC,EAAAoC,WAAAC,UAAA,CACA,IAAAC,EAAAC,EAAAV,EAAAW,kBAAAR,EAAAS,OACAC,EAAAH,EAAAV,EAAAW,kBAAAR,EAAAW,QACA,eAAAL,GAAA,YAAAI,GAAAJ,IAAAI,EACA,iBAAAJ,GAAA,WAAAI,EACAd,EAAAgB,iBAAAZ,EAAA/B,EAAAuB,oBAAAvB,EAAAwB,2BAGAG,EAAAgB,iBAAAZ,EAAA/B,EAAAuB,qBAIA,OAAAxB,EAAA8B,aAAAE,EAAAD,KAGA,SAAAQ,EAAAlB,GACA,GAAAtB,EAAA8C,cAAAxB,EAAArB,EAAA8C,UAAAC,gBACAhD,EAAA8C,cAAAxB,EAAArB,EAAA8C,UAAAE,QACA,eAEA,GAAAjD,EAAA8C,cAAAxB,EAAArB,EAAA8C,UAAAG,gBACAlD,EAAA8C,cAAAxB,EAAArB,EAAA8C,UAAAI,QACA,eAEA,GAAAnD,EAAAoD,YAAA9B,KAAAtB,EAAA8C,cAAAxB,EAAArB,EAAA8C,UAAAM,MAAA,CACA,IAAAC,EAAAhC,EAAAgC,MAAAC,IAAAf,GACA,OAQAgB,EARAF,GASAG,MAAA,SAAA5D,GAAyC,OAAAA,IAAA2D,EAAA,KATzCF,EAAA,aAQA,IAAAE,EAFA,OAJAxD,EAAA8C,cAAAxB,EAAArB,EAAA8C,UAAAW,cAEAlB,EAAAlB,EAAAqC,UAEA,UAnCA/D,EAAAM","file":"static/js/48.31feae9a.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.applyWithProgram = function (sourceFile, program) {\n        return this.applyWithFunction(sourceFile, walk, undefined, program.getTypeChecker());\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"restrict-plus-operands\",\n        description: \"When adding two variables, operands must both be of type number or of type string.\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"functionality\",\n        typescriptOnly: false,\n        requiresTypeInfo: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.INVALID_TYPES_ERROR = \"Operands of '+' operation must either be both strings or both numbers\";\n    Rule.SUGGEST_TEMPLATE_LITERALS = \", consider using template literals\";\n    return Rule;\n}(Lint.Rules.TypedRule));\nexports.Rule = Rule;\nfunction walk(ctx, tc) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isBinaryExpression(node) && node.operatorToken.kind === ts.SyntaxKind.PlusToken) {\n            var leftType = getBaseTypeOfLiteralType(tc.getTypeAtLocation(node.left));\n            var rightType = getBaseTypeOfLiteralType(tc.getTypeAtLocation(node.right));\n            if (leftType === \"invalid\" || rightType === \"invalid\" || leftType !== rightType) {\n                if (leftType === \"string\" || rightType === \"string\") {\n                    return ctx.addFailureAtNode(node, Rule.INVALID_TYPES_ERROR + Rule.SUGGEST_TEMPLATE_LITERALS);\n                }\n                else {\n                    return ctx.addFailureAtNode(node, Rule.INVALID_TYPES_ERROR);\n                }\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction getBaseTypeOfLiteralType(type) {\n    if (tsutils_1.isTypeFlagSet(type, ts.TypeFlags.StringLiteral) ||\n        tsutils_1.isTypeFlagSet(type, ts.TypeFlags.String)) {\n        return \"string\";\n    }\n    else if (tsutils_1.isTypeFlagSet(type, ts.TypeFlags.NumberLiteral) ||\n        tsutils_1.isTypeFlagSet(type, ts.TypeFlags.Number)) {\n        return \"number\";\n    }\n    else if (tsutils_1.isUnionType(type) && !tsutils_1.isTypeFlagSet(type, ts.TypeFlags.Enum)) {\n        var types = type.types.map(getBaseTypeOfLiteralType);\n        return allSame(types) ? types[0] : \"invalid\";\n    }\n    else if (tsutils_1.isTypeFlagSet(type, ts.TypeFlags.EnumLiteral)) {\n        // Compatibility for TypeScript pre-2.4, which used EnumLiteralType instead of LiteralType\n        getBaseTypeOfLiteralType(type.baseType);\n    }\n    return \"invalid\";\n}\nfunction allSame(array) {\n    return array.every(function (value) { return value === array[0]; });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/restrictPlusOperandsRule.js\n// module id = 2137\n// module chunks = 48"],"sourceRoot":""}