webpackJsonp([88],{2085:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i,o=t(1),s=t(843),a=t(54),u=t(1116),d=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return o.__extends(n,e),n.prototype.apply=function(e){return this.applyWithFunction(e,l)},n.metadata={ruleName:"no-null-keyword",description:"Disallows use of the `null` keyword literal.",rationale:u.Utils.dedent(i||(i=o.__makeTemplateObject(["\n            Instead of having the dual concepts of `null` and`undefined` in a codebase,\n            this rule ensures that only `undefined` is used.\n\n            JavaScript originally intended `undefined` to refer to a value that doesn't yet exist,\n            while `null` was meant to refer to a value that does exist but points to nothing.\n            That's confusing.\n            `undefined` is the default value when object members don't exist, and is the return value\n            for newer native collection APIs such as `Map.get` when collection values don't exist.\n\n            ```\n            const myObject = {};\n            myObject.doesNotExist; // undefined\n            ```\n\n            ```\n            const myMap = new Map<string, number>();\n            myMap.get(\"doesNotExist\"); // undefined\n            ```\n\n            To remove confusion over the two similar values, it's better to stick with just `undefined`.\n        "],["\n            Instead of having the dual concepts of \\`null\\` and\\`undefined\\` in a codebase,\n            this rule ensures that only \\`undefined\\` is used.\n\n            JavaScript originally intended \\`undefined\\` to refer to a value that doesn't yet exist,\n            while \\`null\\` was meant to refer to a value that does exist but points to nothing.\n            That's confusing.\n            \\`undefined\\` is the default value when object members don't exist, and is the return value\n            for newer native collection APIs such as \\`Map.get\\` when collection values don't exist.\n\n            \\`\\`\\`\n            const myObject = {};\n            myObject.doesNotExist; // undefined\n            \\`\\`\\`\n\n            \\`\\`\\`\n            const myMap = new Map<string, number>();\n            myMap.get(\"doesNotExist\"); // undefined\n            \\`\\`\\`\n\n            To remove confusion over the two similar values, it's better to stick with just \\`undefined\\`.\n        "]))),optionsDescription:"Not configurable.",options:null,optionExamples:[!0],type:"functionality",typescriptOnly:!1,hasFix:!0},n.FAILURE_STRING="Use 'undefined' instead of 'null'",n}(u.Rules.AbstractRule);function l(e){return a.forEachChild(e.sourceFile,function n(t){if(s.isTypeNodeKind(t.kind))return;if(t.kind!==a.SyntaxKind.NullKeyword)return a.forEachChild(t,n);var i=t.parent;var o;s.isBinaryExpression(i)&&(o=u.getEqualsKind(i.operatorToken));void 0===o?e.addFailureAtNode(t,d.FAILURE_STRING):o.isStrict||e.addFailureAtNode(t,d.FAILURE_STRING,u.Replacement.replaceNode(t,"undefined",e.sourceFile))})}n.Rule=d}});
//# sourceMappingURL=88.5939cf9a.chunk.js.map