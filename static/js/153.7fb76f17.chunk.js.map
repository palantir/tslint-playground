{"version":3,"sources":["../node_modules/tslint/lib/rules/awaitPromiseRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","applyWithProgram","sourceFile","program","promiseTypes","Set","concat","ruleArguments","applyWithFunction","walk","getTypeChecker","metadata","ruleName","description","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","listType","items","optionExamples","rationale","typescriptOnly","requiresTypeInfo","FAILURE_STRING","FAILURE_FOR_AWAIT_OF","Rules","TypedRule","ctx","tc","forEachChild","cb","node","isAwaitExpression","containsType","getTypeAtLocation","expression","isPromiseType","addFailureAtNode","isForOfStatement","undefined","awaitModifier","isAsyncIterable","name","has","predicate","isTypeFlagSet","TypeFlags","Any","isTypeReference","target","symbol","isUnionOrIntersectionType","types","some","t","bases","getBaseTypes"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IA2EAC,EAAAC,EA3EAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KA2BA,OA7BAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAC,iBAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,IAAAC,KAAA,WAAAC,OAAAT,KAAAU,gBACA,OAAAV,KAAAW,kBAAAN,EAAAO,EAAAL,EAAAD,EAAAO,mBAGAhB,EAAAiB,UACAC,SAAA,gBACAC,YAAA,oDACAC,mBAAArB,EAAAsB,MAAAC,OAAA7B,MAAAE,EAAA4B,sBAAA,keAAshB,oeACthBC,SACAC,KAAA,OACAC,UACAD,KAAA,QACAE,OAAwBF,KAAA,YAGxBG,iBAAA,mBACAC,UAAA9B,EAAAsB,MAAAC,OAAA5B,MAAAC,EAAA4B,sBAAA,szBACAE,KAAA,gBACAK,gBAAA,EACAC,kBAAA,GAGA/B,EAAAgC,eAAA,0CACAhC,EAAAiC,qBAAA,uDACAjC,EA9BA,CA+BCD,EAAAmC,MAAAC,WAED,SAAApB,EAAAqB,EAAAC,GACA,IAAA3B,EAAA0B,EAAAZ,QACA,OAAA1B,EAAAwC,aAAAF,EAAA5B,WACA,SAAA+B,EAAAC,GACA3C,EAAA4C,kBAAAD,KACAE,EAAAL,EAAAM,kBAAAH,EAAAI,YAAAC,GACAT,EAAAU,iBAAAN,EAAAxC,EAAAgC,gBAEAnC,EAAAkD,iBAAAP,SACAQ,IAAAR,EAAAS,gBACAP,EAAAL,EAAAM,kBAAAH,EAAAI,YAAAM,IACAd,EAAAU,iBAAAN,EAAAI,WAAA5C,EAAAiC,sBAEA,OAAAnC,EAAAwC,aAAAE,EAAAD,KAEA,SAAAM,EAAAM,GACA,OAAAzC,EAAA0C,IAAAD,IAGA,SAAAT,EAAAjB,EAAA4B,GACA,GAAAxD,EAAAyD,cAAA7B,EAAA3B,EAAAyD,UAAAC,KACA,SAKA,GAHA3D,EAAA4D,gBAAAhC,KACAA,IAAAiC,aAEAV,IAAAvB,EAAAkC,QAAAN,EAAA5B,EAAAkC,OAAAR,MACA,SAEA,GAAAtD,EAAA+D,0BAAAnC,GACA,OAAAA,EAAAoC,MAAAC,KAAA,SAAAC,GAA6C,OAAArB,EAAAqB,EAAAV,KAE7C,IAAAW,EAAAvC,EAAAwC,eACA,YAAAjB,IAAAgB,KAAAF,KAAA,SAAAC,GAA2D,OAAArB,EAAAqB,EAAAV,KAE3D,SAAAH,EAAAC,GACA,wBAAAA,GAAA,0BAAAA,EArCA5D,EAAAS","file":"static/js/153.7fb76f17.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.applyWithProgram = function (sourceFile, program) {\n        var promiseTypes = new Set([\"Promise\"].concat(this.ruleArguments));\n        return this.applyWithFunction(sourceFile, walk, promiseTypes, program.getTypeChecker());\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"await-promise\",\n        description: \"Warns for an awaited value that is not a Promise.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            A list of 'string' names of any additional classes that should also be treated as Promises.\\n            For example, if you are using a class called 'Future' that implements the Thenable interface,\\n            you might tell the rule to consider type references with the name 'Future' as valid Promise-like\\n            types. Note that this rule doesn't check for type assignability or compatibility; it just checks\\n            type reference names.\\n        \"], [\"\\n            A list of 'string' names of any additional classes that should also be treated as Promises.\\n            For example, if you are using a class called 'Future' that implements the Thenable interface,\\n            you might tell the rule to consider type references with the name 'Future' as valid Promise-like\\n            types. Note that this rule doesn't check for type assignability or compatibility; it just checks\\n            type reference names.\\n        \"]))),\n        options: {\n            type: \"list\",\n            listType: {\n                type: \"array\",\n                items: { type: \"string\" },\n            },\n        },\n        optionExamples: [true, [true, \"Thenable\"]],\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            While it is valid JavaScript to await a non-Promise-like value (it will resolve immediately),\\n            this pattern is often a programmer error and the resulting semantics can be unintuitive.\\n\\n            Awaiting non-Promise-like values often is an indication of programmer error, such as\\n            forgetting to add parenthesis to call a function that returns a Promise.\\n        \"], [\"\\n            While it is valid JavaScript to await a non-Promise-like value (it will resolve immediately),\\n            this pattern is often a programmer error and the resulting semantics can be unintuitive.\\n\\n            Awaiting non-Promise-like values often is an indication of programmer error, such as\\n            forgetting to add parenthesis to call a function that returns a Promise.\\n        \"]))),\n        type: \"functionality\",\n        typescriptOnly: true,\n        requiresTypeInfo: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Invalid 'await' of a non-Promise value.\";\n    Rule.FAILURE_FOR_AWAIT_OF = \"Invalid 'for-await-of' of a non-AsyncIterable value.\";\n    return Rule;\n}(Lint.Rules.TypedRule));\nexports.Rule = Rule;\nfunction walk(ctx, tc) {\n    var promiseTypes = ctx.options;\n    return ts.forEachChild(ctx.sourceFile, cb);\n    function cb(node) {\n        if (tsutils_1.isAwaitExpression(node) &&\n            !containsType(tc.getTypeAtLocation(node.expression), isPromiseType)) {\n            ctx.addFailureAtNode(node, Rule.FAILURE_STRING);\n        }\n        else if (tsutils_1.isForOfStatement(node) &&\n            node.awaitModifier !== undefined &&\n            !containsType(tc.getTypeAtLocation(node.expression), isAsyncIterable)) {\n            ctx.addFailureAtNode(node.expression, Rule.FAILURE_FOR_AWAIT_OF);\n        }\n        return ts.forEachChild(node, cb);\n    }\n    function isPromiseType(name) {\n        return promiseTypes.has(name);\n    }\n}\nfunction containsType(type, predicate) {\n    if (tsutils_1.isTypeFlagSet(type, ts.TypeFlags.Any)) {\n        return true;\n    }\n    if (tsutils_1.isTypeReference(type)) {\n        type = type.target;\n    }\n    if (type.symbol !== undefined && predicate(type.symbol.name)) {\n        return true;\n    }\n    if (tsutils_1.isUnionOrIntersectionType(type)) {\n        return type.types.some(function (t) { return containsType(t, predicate); });\n    }\n    var bases = type.getBaseTypes();\n    return bases !== undefined && bases.some(function (t) { return containsType(t, predicate); });\n}\nfunction isAsyncIterable(name) {\n    return name === \"AsyncIterable\" || name === \"AsyncIterableIterator\";\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/awaitPromiseRule.js\n// module id = 2014\n// module chunks = 153"],"sourceRoot":""}