webpackJsonp([136],{2035:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r,i=n(1),a=n(843),s=n(54),p=n(1116),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i.__extends(t,e),t.prototype.apply=function(e){var t={allowPost:-1!==this.ruleArguments.indexOf("allow-post")};return this.applyWithFunction(e,d,t)},t.metadata={description:"Enforces using explicit += 1 or -= 1 operators.",optionExamples:[!0,[!0,"allow-post"]],options:{items:{enum:["allow-post"],type:"string"},maxLength:1,minLength:0,type:"array"},optionsDescription:p.Utils.dedent(o||(o=i.__makeTemplateObject(['\n            If no arguments are provided, both pre- and post-unary operators are banned.\n            If `"','"` is provided, post-unary operators will be allowed.\n        '],['\n            If no arguments are provided, both pre- and post-unary operators are banned.\n            If \\`"','"\\` is provided, post-unary operators will be allowed.\n        '])),"allow-post"),rationale:p.Utils.dedent(r||(r=i.__makeTemplateObject(["\n            It's easy to type +i or -i instead of --i or ++i, and won't always result in invalid code.\n            Prefer standardizing small arithmetic operations with the explicit += and -= operators.\n        "],["\n            It's easy to type +i or -i instead of --i or ++i, and won't always result in invalid code.\n            Prefer standardizing small arithmetic operations with the explicit += and -= operators.\n        "]))),ruleName:"increment-decrement",type:"style",typescriptOnly:!1},t.FAILURE_STRING_FACTORY=function(e){return"Use an explicit "+e+" operator."},t}(p.Rules.AbstractRule);function d(e){function t(t){var n=t.operator===s.SyntaxKind.PlusPlusToken?"+= 1":"-= 1",o=function(t,n){var o=t.operand.getText(e.sourceFile)+" "+n;return void 0!==t.parent&&a.isBinaryExpression(t.parent)&&(o="("+o+")"),p.Replacement.replaceNode(t,o)}(t,n),r=l.FAILURE_STRING_FACTORY(n);e.addFailureAtNode(t,r,o)}return s.forEachChild(e.sourceFile,function n(o){return a.isPostfixUnaryExpression(o)?function(n){!e.options.allowPost&&u(n.operator)&&t(n)}(o):a.isPrefixUnaryExpression(o)&&function(e){u(e.operator)&&t(e)}(o),s.forEachChild(o,n)})}function u(e){return e===s.SyntaxKind.PlusPlusToken||e===s.SyntaxKind.MinusMinusToken}t.Rule=l}});
//# sourceMappingURL=136.eabe1ef7.chunk.js.map