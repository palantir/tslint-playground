webpackJsonp([31],{2158:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,c=a(1),r=a(843),o=a(54),i=a(1116),s="check-branch",p="check-decl",d="check-operator",h="check-module",k="check-separator",l="check-rest-spread",y="check-type",f="check-typecast",u="check-type-operator",b="check-preblock",S="check-postbrace",x=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return c.__extends(t,e),t.prototype.apply=function(e){return this.applyWithFunction(e,m,function(e){return{branch:t(s),decl:t(p),operator:t(d),module:t(h),separator:t(k),restSpread:t(l),type:t(y),typecast:t(f),typeOperator:t(u),preblock:t(b),postbrace:t(S)};function t(t){return-1!==e.indexOf(t)}}(this.ruleArguments))},t.metadata={ruleName:"whitespace",description:"Enforces whitespace style conventions.",rationale:"Helps maintain a readable, consistent style in your codebase.",optionsDescription:i.Utils.dedent(n||(n=c.__makeTemplateObject(['\n            Ten arguments may be optionally provided:\n\n            * `"check-branch"` checks branching statements (`if`/`else`/`for`/`while`) are followed by whitespace.\n            * `"check-decl"`checks that variable declarations have whitespace around the equals token.\n            * `"check-operator"` checks for whitespace around operator tokens.\n            * `"check-module"` checks for whitespace in import & export statements.\n            * `"check-separator"` checks for whitespace after separator tokens (`,`/`;`).\n            * `"check-rest-spread"` checks that there is no whitespace after rest/spread operator (`...`).\n            * `"check-type"` checks for whitespace before a variable type specification.\n            * `"check-typecast"` checks for whitespace between a typecast and its target.\n            * `"check-type-operator"` checks for whitespace between type operators `|` and `&`.\n            * `"check-preblock"` checks for whitespace before the opening brace of a block.\n            * `"check-postbrace"` checks for whitespace after an opening brace.'],['\n            Ten arguments may be optionally provided:\n\n            * \\`"check-branch"\\` checks branching statements (\\`if\\`/\\`else\\`/\\`for\\`/\\`while\\`) are followed by whitespace.\n            * \\`"check-decl"\\`checks that variable declarations have whitespace around the equals token.\n            * \\`"check-operator"\\` checks for whitespace around operator tokens.\n            * \\`"check-module"\\` checks for whitespace in import & export statements.\n            * \\`"check-separator"\\` checks for whitespace after separator tokens (\\`,\\`/\\`;\\`).\n            * \\`"check-rest-spread"\\` checks that there is no whitespace after rest/spread operator (\\`...\\`).\n            * \\`"check-type"\\` checks for whitespace before a variable type specification.\n            * \\`"check-typecast"\\` checks for whitespace between a typecast and its target.\n            * \\`"check-type-operator"\\` checks for whitespace between type operators \\`|\\` and \\`&\\`.\n            * \\`"check-preblock"\\` checks for whitespace before the opening brace of a block.\n            * \\`"check-postbrace"\\` checks for whitespace after an opening brace.']))),options:{type:"array",items:{type:"string",enum:["check-branch","check-decl","check-operator","check-module","check-separator","check-rest-spread","check-type","check-typecast","check-type-operator","check-preblock","check-postbrace"]},minLength:0,maxLength:11},optionExamples:[[!0,"check-branch","check-operator","check-typecast"]],type:"style",typescriptOnly:!1,hasFix:!0},t.FAILURE_STRING_MISSING="missing whitespace",t.FAILURE_STRING_INVALID="invalid whitespace",t}(i.Rules.AbstractRule);function m(e){var t=e.sourceFile,a=e.options;o.forEachChild(t,function e(t){switch(t.kind){case o.SyntaxKind.ArrowFunction:c(t);break;case o.SyntaxKind.BinaryExpression:var n=t,r=n.left,i=n.operatorToken,p=n.right;a.operator&&i.kind!==o.SyntaxKind.CommaToken&&(s(r.getEnd()),s(p.getFullStart()));break;case o.SyntaxKind.Block:a.preblock&&s(t.getFullStart());break;case o.SyntaxKind.ConditionalExpression:if(a.operator){var h=t,k=h.condition,l=h.whenTrue;s(k.getEnd()),s(l.getFullStart()),s(l.getEnd())}break;case o.SyntaxKind.ConstructorType:c(t);break;case o.SyntaxKind.ExportAssignment:if(a.module)s(f=t.getChildAt(0).getEnd());break;case o.SyntaxKind.FunctionType:c(t);break;case o.SyntaxKind.ImportDeclaration:var y=t.importClause;if(a.module&&void 0!==y){var f=void 0,u=y.namedBindings;void 0!==u?(u.kind!==o.SyntaxKind.NamespaceImport&&u.elements.forEach(function(e,t,a){if(void 0!==e.name){if(t===a.length-1)s(u.getLastToken().getFullStart());if(0===t){var n=e.getStart()-1;s(n,n+1)}}}),f=u.getEnd()):void 0!==y.name&&(f=y.name.getEnd()),void 0!==f&&s(f)}break;case o.SyntaxKind.ImportEqualsDeclaration:if(a.module)s(f=t.name.getEnd());break;case o.SyntaxKind.TypeAssertionExpression:if(a.typecast)s(f=t.expression.getFullStart());break;case o.SyntaxKind.VariableDeclaration:case o.SyntaxKind.PropertyDeclaration:var b=t,S=b.name,x=b.type,m=b.initializer;a.decl&&void 0!==m&&s((void 0!==x?x:S).getEnd());break;case o.SyntaxKind.BindingElement:case o.SyntaxKind.Parameter:var K=t.dotDotDotToken;a.restSpread&&void 0!==K&&d(K.end);break;case o.SyntaxKind.SpreadAssignment:case o.SyntaxKind.SpreadElement:if(a.restSpread)d(f=t.expression.getFullStart());break;case o.SyntaxKind.UnionType:case o.SyntaxKind.IntersectionType:if(a.typeOperator){var w=t.types;w.forEach(function(e,t){t>0&&s(e.getFullStart()),t<w.length-1&&s(e.getEnd())})}}o.forEachChild(t,e)});var n=!1;function c(e){if(a.operator){var n=r.getChildOfKind(e,o.SyntaxKind.EqualsGreaterThanToken,t);void 0!==n&&(s(n.getFullStart()),s(n.getEnd()))}}function s(e,a){void 0===a&&(a=e),e===t.end||i.isWhiteSpace(t.text.charCodeAt(e))||p(a)}function p(t){if(!e.failures.some(function(e){return e.getStartPosition().getPosition()===t})){var a=i.Replacement.appendText(t," ");e.addFailureAt(t,1,x.FAILURE_STRING_MISSING,a)}}function d(a){a!==t.end&&i.isWhiteSpace(t.text.charCodeAt(a))&&function(t){var a=i.Replacement.deleteText(t,1);e.addFailureAt(t,1,x.FAILURE_STRING_INVALID,a)}(a)}r.forEachTokenWithTrivia(t,function(e,c,i,s){if(c!==o.SyntaxKind.WhitespaceTrivia&&c!==o.SyntaxKind.NewLineTrivia&&c!==o.SyntaxKind.EndOfFileToken)switch(n&&(p(i.pos),n=!1),c){case o.SyntaxKind.CatchKeyword:case o.SyntaxKind.ForKeyword:case o.SyntaxKind.IfKeyword:case o.SyntaxKind.SwitchKeyword:case o.SyntaxKind.WhileKeyword:case o.SyntaxKind.WithKeyword:a.branch&&(n=!0);break;case o.SyntaxKind.CommaToken:a.separator&&(n=!0);break;case o.SyntaxKind.SemicolonToken:if(!a.separator)break;var d=i.pos+1;s.kind===o.SyntaxKind.ForStatement&&d!==t.end&&(";"===t.text[d]||")"===t.text[d])||(n=!0);break;case o.SyntaxKind.EqualsToken:a.decl&&s.kind!==o.SyntaxKind.JsxAttribute&&(n=!0);break;case o.SyntaxKind.ColonToken:a.type&&(n=!0);break;case o.SyntaxKind.OpenBraceToken:var h=i.pos+1;a.postbrace&&" "!==t.text[h]&&"\r"!==t.text[h]&&"\t"!==t.text[h]&&"\n"!==t.text[h]&&p(h);break;case o.SyntaxKind.ImportKeyword:if(r.isCallExpression(s)&&s.expression.kind===o.SyntaxKind.ImportKeyword)return;if(r.isImportTypeNode(s))return;case o.SyntaxKind.ExportKeyword:case o.SyntaxKind.FromKeyword:a.typecast&&(n=!0)}else n=!1})}t.Rule=x}});
//# sourceMappingURL=31.f695ff68.chunk.js.map