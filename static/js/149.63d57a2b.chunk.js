webpackJsonp([149],{2019:function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,t,i=a(1),s=a(843),o=a(54),d=a(1116),l=a(254),p=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return i.__extends(n,e),n.prototype.apply=function(e){return this.applyWithFunction(e,c)},n.metadata={ruleName:"binary-expression-operand-order",description:d.Utils.dedent(r||(r=i.__makeTemplateObject(["\n            In a binary expression, a literal should always be on the right-hand side if possible.\n            For example, prefer 'x + 1' over '1 + x'."],["\n            In a binary expression, a literal should always be on the right-hand side if possible.\n            For example, prefer 'x + 1' over '1 + x'."]))),optionsDescription:"Not configurable.",options:null,optionExamples:[!0],rationale:d.Utils.dedent(t||(t=i.__makeTemplateObject(['\n            Expressions like `1 + x` are sometimes referred to as "Yoda" expressions because they read\n            opposite to how we would normally speak the expression.\n\n            Sticking to a consistent grammar for conditions helps keep code readable and understandable.\n        '],['\n            Expressions like \\`1 + x\\` are sometimes referred to as "Yoda" expressions because they read\n            opposite to how we would normally speak the expression.\n\n            Sticking to a consistent grammar for conditions helps keep code readable and understandable.\n        ']))),type:"style",typescriptOnly:!1},n.FAILURE_STRING="Literal expression should be on the right-hand side of a binary expression.",n}(d.Rules.AbstractRule);function c(e){o.forEachChild(e.sourceFile,function n(a){s.isBinaryExpression(a)&&u(a.left)&&!u(a.right)&&!function(e){switch(e.operatorToken.kind){case o.SyntaxKind.PlusToken:return e.left.kind===o.SyntaxKind.StringLiteral;case o.SyntaxKind.MinusToken:case o.SyntaxKind.SlashToken:case o.SyntaxKind.PercentToken:case o.SyntaxKind.LessThanLessThanToken:case o.SyntaxKind.GreaterThanGreaterThanToken:case o.SyntaxKind.GreaterThanGreaterThanGreaterThanToken:case o.SyntaxKind.AsteriskAsteriskToken:case o.SyntaxKind.InKeyword:case o.SyntaxKind.CommaToken:return!0;default:return!1}}(a)&&e.addFailureAtNode(a,p.FAILURE_STRING),o.forEachChild(a,n)})}function u(e){switch(e.kind){case o.SyntaxKind.StringLiteral:case o.SyntaxKind.NumericLiteral:case o.SyntaxKind.TrueKeyword:case o.SyntaxKind.FalseKeyword:case o.SyntaxKind.NullKeyword:return!0;case o.SyntaxKind.Identifier:return e.originalKeywordKind===o.SyntaxKind.UndefinedKeyword;case o.SyntaxKind.PrefixUnaryExpression:return l.isNegativeNumberLiteral(e);case o.SyntaxKind.ParenthesizedExpression:return u(e.expression);default:return!1}}n.Rule=p}});
//# sourceMappingURL=149.63d57a2b.chunk.js.map