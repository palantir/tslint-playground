{"version":3,"sources":["../node_modules/tslint/lib/rules/deprecationRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","name","message","trim","prototype","applyWithProgram","sourceFile","program","applyWithFunction","walk","undefined","getTypeChecker","metadata","ruleName","description","descriptionDetails","Utils","dedent","__makeTemplateObject","rationale","optionsDescription","options","optionExamples","type","typescriptOnly","requiresTypeInfo","Rules","TypedRule","ctx","tc","forEachChild","cb","node","isIdentifier","kind","SyntaxKind","ImportDeclaration","ImportEqualsDeclaration","ExportDeclaration","ExportAssignment","identifier","parent","ClassDeclaration","ClassExpression","InterfaceDeclaration","TypeParameter","FunctionExpression","FunctionDeclaration","LabeledStatement","JsxAttribute","MethodDeclaration","MethodSignature","PropertySignature","TypeAliasDeclaration","GetAccessor","SetAccessor","EnumDeclaration","ModuleDeclaration","VariableDeclaration","Parameter","PropertyDeclaration","EnumMember","PropertyAssignment","isReassignmentTarget","BindingElement","propertyName","isDeclaration","deprecation","symbol","callExpression","isPropertyAccessExpression","isTaggedTemplateExpression","isCallExpression","isNewExpression","expression","getCallExpresion","result","signature","getJsDocTags","findDeprecationTag","declaration","getDeprecationFromDeclaration","getSignatureDeprecation","getResolvedSignature","getTypeAtLocation","getProperty","text","isPropertyAssignment","isShorthandPropertyAssignment","getPropertySymbolOfDestructuringAssignment","getSymbolAtLocation","isSymbolFlagSet","SymbolFlags","Alias","getAliasedSymbol","declarations","length","isFunctionOrMethod","_i","declarations_1","isBindingElement","getDeclarationOfBindingElement","isVariableDeclaration","isVariableDeclarationList","getDeprecationFromDeclarations","getSymbolDeprecation","getDeprecation","addFailureAtNode","tags","tags_1","tag","_a","getJsDoc","comment","_b","_c","tagName"],"mappings":"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","file":"static/js/144.9049021c.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (name, message) {\n        return name + \" is deprecated\" + (message === \"\" ? \".\" : \": \" + message.trim());\n    };\n    Rule.prototype.applyWithProgram = function (sourceFile, program) {\n        return this.applyWithFunction(sourceFile, walk, undefined, program.getTypeChecker());\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"deprecation\",\n        description: \"Warns when deprecated APIs are used.\",\n        descriptionDetails: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"Any usage of an identifier\\n            with the @deprecated JSDoc annotation will trigger a warning.\\n            See http://usejsdoc.org/tags-deprecated.html\"], [\"Any usage of an identifier\\n            with the @deprecated JSDoc annotation will trigger a warning.\\n            See http://usejsdoc.org/tags-deprecated.html\"]))),\n        rationale: \"Deprecated APIs should be avoided, and usage updated.\",\n        optionsDescription: \"\",\n        options: null,\n        optionExamples: [true],\n        type: \"maintainability\",\n        typescriptOnly: false,\n        requiresTypeInfo: true,\n    };\n    return Rule;\n}(Lint.Rules.TypedRule));\nexports.Rule = Rule;\nfunction walk(ctx, tc) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isIdentifier(node)) {\n            if (!isDeclaration(node)) {\n                var deprecation = getDeprecation(node, tc);\n                if (deprecation !== undefined) {\n                    ctx.addFailureAtNode(node, Rule.FAILURE_STRING(node.text, deprecation));\n                }\n            }\n        }\n        else {\n            switch (node.kind) {\n                case ts.SyntaxKind.ImportDeclaration:\n                case ts.SyntaxKind.ImportEqualsDeclaration:\n                case ts.SyntaxKind.ExportDeclaration:\n                case ts.SyntaxKind.ExportAssignment:\n                    return;\n            }\n            return ts.forEachChild(node, cb);\n        }\n    });\n}\nfunction isDeclaration(identifier) {\n    var parent = identifier.parent;\n    switch (parent.kind) {\n        case ts.SyntaxKind.ClassDeclaration:\n        case ts.SyntaxKind.ClassExpression:\n        case ts.SyntaxKind.InterfaceDeclaration:\n        case ts.SyntaxKind.TypeParameter:\n        case ts.SyntaxKind.FunctionExpression:\n        case ts.SyntaxKind.FunctionDeclaration:\n        case ts.SyntaxKind.LabeledStatement:\n        case ts.SyntaxKind.JsxAttribute:\n        case ts.SyntaxKind.MethodDeclaration:\n        case ts.SyntaxKind.MethodSignature:\n        case ts.SyntaxKind.PropertySignature:\n        case ts.SyntaxKind.TypeAliasDeclaration:\n        case ts.SyntaxKind.GetAccessor:\n        case ts.SyntaxKind.SetAccessor:\n        case ts.SyntaxKind.EnumDeclaration:\n        case ts.SyntaxKind.ModuleDeclaration:\n            return true;\n        case ts.SyntaxKind.VariableDeclaration:\n        case ts.SyntaxKind.Parameter:\n        case ts.SyntaxKind.PropertyDeclaration:\n        case ts.SyntaxKind.EnumMember:\n        case ts.SyntaxKind.ImportEqualsDeclaration:\n            return parent.name === identifier;\n        case ts.SyntaxKind.PropertyAssignment:\n            return (parent.name === identifier &&\n                !tsutils_1.isReassignmentTarget(identifier.parent.parent));\n        case ts.SyntaxKind.BindingElement:\n            // return true for `b` in `const {a: b} = obj\"`\n            return (parent.name === identifier &&\n                parent.propertyName !== undefined);\n        default:\n            return false;\n    }\n}\nfunction getCallExpresion(node) {\n    var parent = node.parent;\n    if (tsutils_1.isPropertyAccessExpression(parent) && parent.name === node) {\n        node = parent;\n        parent = node.parent;\n    }\n    return tsutils_1.isTaggedTemplateExpression(parent) ||\n        ((tsutils_1.isCallExpression(parent) || tsutils_1.isNewExpression(parent)) && parent.expression === node)\n        ? parent\n        : undefined;\n}\nfunction getDeprecation(node, tc) {\n    var callExpression = getCallExpresion(node);\n    if (callExpression !== undefined) {\n        var result = getSignatureDeprecation(tc.getResolvedSignature(callExpression));\n        if (result !== undefined) {\n            return result;\n        }\n    }\n    var symbol;\n    var parent = node.parent;\n    if (parent.kind === ts.SyntaxKind.BindingElement) {\n        symbol = tc.getTypeAtLocation(parent.parent).getProperty(node.text);\n    }\n    else if ((tsutils_1.isPropertyAssignment(parent) && parent.name === node) ||\n        (tsutils_1.isShorthandPropertyAssignment(parent) &&\n            parent.name === node &&\n            tsutils_1.isReassignmentTarget(node))) {\n        symbol = tc.getPropertySymbolOfDestructuringAssignment(node);\n    }\n    else {\n        symbol = tc.getSymbolAtLocation(node);\n    }\n    if (symbol !== undefined && tsutils_1.isSymbolFlagSet(symbol, ts.SymbolFlags.Alias)) {\n        symbol = tc.getAliasedSymbol(symbol);\n    }\n    if (symbol === undefined ||\n        // if this is a CallExpression and the declaration is a function or method,\n        // stop here to avoid collecting JsDoc of all overload signatures\n        (callExpression !== undefined && isFunctionOrMethod(symbol.declarations))) {\n        return undefined;\n    }\n    return getSymbolDeprecation(symbol);\n}\nfunction findDeprecationTag(tags) {\n    for (var _i = 0, tags_1 = tags; _i < tags_1.length; _i++) {\n        var tag = tags_1[_i];\n        if (tag.name === \"deprecated\") {\n            return tag.text === undefined ? \"\" : tag.text;\n        }\n    }\n    return undefined;\n}\nfunction getSymbolDeprecation(symbol) {\n    if (symbol.getJsDocTags !== undefined) {\n        return findDeprecationTag(symbol.getJsDocTags());\n    }\n    // for compatibility with typescript@<2.3.0\n    return getDeprecationFromDeclarations(symbol.declarations);\n}\nfunction getSignatureDeprecation(signature) {\n    if (signature === undefined) {\n        return undefined;\n    }\n    if (signature.getJsDocTags !== undefined) {\n        return findDeprecationTag(signature.getJsDocTags());\n    }\n    // for compatibility with typescript@<2.3.0\n    return signature.declaration === undefined\n        ? undefined\n        : getDeprecationFromDeclaration(signature.declaration);\n}\nfunction getDeprecationFromDeclarations(declarations) {\n    if (declarations === undefined) {\n        return undefined;\n    }\n    var declaration;\n    for (var _i = 0, declarations_1 = declarations; _i < declarations_1.length; _i++) {\n        declaration = declarations_1[_i];\n        if (tsutils_1.isBindingElement(declaration)) {\n            declaration = tsutils_1.getDeclarationOfBindingElement(declaration);\n        }\n        if (tsutils_1.isVariableDeclaration(declaration)) {\n            declaration = declaration.parent;\n        }\n        if (tsutils_1.isVariableDeclarationList(declaration)) {\n            declaration = declaration.parent;\n        }\n        var result = getDeprecationFromDeclaration(declaration);\n        if (result !== undefined) {\n            return result;\n        }\n    }\n    return undefined;\n}\nfunction getDeprecationFromDeclaration(declaration) {\n    for (var _i = 0, _a = tsutils_1.getJsDoc(declaration); _i < _a.length; _i++) {\n        var comment = _a[_i];\n        if (comment.tags === undefined) {\n            continue;\n        }\n        for (var _b = 0, _c = comment.tags; _b < _c.length; _b++) {\n            var tag = _c[_b];\n            if (tag.tagName.text === \"deprecated\") {\n                return tag.comment === undefined ? \"\" : tag.comment;\n            }\n        }\n    }\n    return undefined;\n}\nfunction isFunctionOrMethod(declarations) {\n    if (declarations === undefined || declarations.length === 0) {\n        return false;\n    }\n    switch (declarations[0].kind) {\n        case ts.SyntaxKind.MethodDeclaration:\n        case ts.SyntaxKind.FunctionDeclaration:\n        case ts.SyntaxKind.FunctionExpression:\n        case ts.SyntaxKind.MethodSignature:\n            return true;\n        default:\n            return false;\n    }\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/deprecationRule.js\n// module id = 2026\n// module chunks = 144"],"sourceRoot":""}