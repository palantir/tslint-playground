{"version":3,"sources":["../node_modules/tslint/lib/rules/noUnsafeFinallyRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","utils","ts","Lint","utils_1","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","name","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","Utils","dedent","__makeTemplateObject","descriptionDetails","rationale","optionsDescription","options","optionExamples","type","typescriptOnly","Rules","AbstractRule","ctx","inFinally","forEachChild","cb","node","kind","SyntaxKind","TryStatement","_a","tryBlock","catchClause","finallyBlock","undefined","old","BreakStatement","ContinueStatement","ThrowStatement","ReturnStatement","jump","isBreakOrContinue","isBreakOrContinueStatement","label","parent","SwitchStatement","ForInStatement","ForOfStatement","ForStatement","WhileStatement","DoStatement","LabeledStatement","text","isFunctionScopeBoundary","jumpIsLocalToFinallyBlock","addFailureAtNode","printJumpKind"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAyHAC,EAAAC,EAzHAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,IACAK,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAqBA,OAvBAT,EAAAW,UAAAL,EAAAC,GAKAD,EAAAM,eAAA,SAAAC,GACA,UAAAA,EAAA,iDAEAP,EAAAQ,UAAAN,MAAA,SAAAO,GACA,OAAAN,KAAAO,kBAAAD,EAAAE,IAGAX,EAAAY,UACAC,SAAA,oBACAC,YAAAhB,EAAAiB,MAAAC,OAAAxB,MAAAE,EAAAuB,sBAAA,kSACAC,mBAAA,GACAC,UAAArB,EAAAiB,MAAAC,OAAAvB,MAAAC,EAAAuB,sBAAA,4kBACAG,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,gBACAC,gBAAA,GAEAxB,EAxBA,CAyBCF,EAAA2B,MAAAC,cAED,SAAAf,EAAAgB,GACA,IAAAC,GAAA,EACA/B,EAAAgC,aAAAF,EAAAlB,WAAA,SAAAqB,EAAAC,GACA,OAAAA,EAAAC,MACA,KAAAnC,EAAAoC,WAAAC,aACA,IAAAC,EAAAJ,EAAAK,EAAAD,EAAAC,SAAAC,EAAAF,EAAAE,YAAAC,EAAAH,EAAAG,aAKA,GAJAzC,EAAAgC,aAAAO,EAAAN,QACAS,IAAAF,GACAxC,EAAAgC,aAAAQ,EAAAP,QAEAS,IAAAD,EAAA,CACA,IAAAE,EAAAZ,EACAA,GAAA,EACAE,EAAAQ,GACAV,EAAAY,EAEA,MACA,KAAA3C,EAAAoC,WAAAQ,eACA,KAAA5C,EAAAoC,WAAAS,kBACA,KAAA7C,EAAAoC,WAAAU,eACA,KAAA9C,EAAAoC,WAAAW,gBACAhB,IASA,SAAAiB,GACA,IAAAC,EAAAlD,EAAAmD,2BAAAF,GACAG,EAAAF,EAAAD,EAAAG,WAAAT,EACAR,EAAAc,EAEA,QACA,IAAAI,EAAAlB,EAAAkB,OACA,OAAAA,EAAAjB,MACA,KAAAnC,EAAAoC,WAAAC,aACA,GAAAe,EAAAX,eAAAP,EACA,SAEA,MACA,KAAAlC,EAAAoC,WAAAiB,gBACA,GAAAL,EAAAb,OAAAnC,EAAAoC,WAAAQ,qBAAAF,IAAAS,EACA,SAEA,MACA,KAAAnD,EAAAoC,WAAAkB,eACA,KAAAtD,EAAAoC,WAAAmB,eACA,KAAAvD,EAAAoC,WAAAoB,aACA,KAAAxD,EAAAoC,WAAAqB,eACA,KAAAzD,EAAAoC,WAAAsB,YACA,GAAAT,QAAAP,IAAAS,EACA,SAEA,MACA,KAAAnD,EAAAoC,WAAAuB,iBACA,IAAAC,EAAAR,EAAAD,MAAAS,KACA,QAAAlB,IAAAS,KAAAS,SACA,SAEA,MAEA,QAGA,GAAA1D,EAAA2D,wBAAAT,GAIA,SAGAlB,EAAAkB,GArDAU,CAAA5B,IACAJ,EAAAiC,iBAAA7B,EAAA/B,EAAAM,eAuDA,SAAAyB,GACA,OAAAA,EAAAC,MACA,KAAAnC,EAAAoC,WAAAQ,eACA,cACA,KAAA5C,EAAAoC,WAAAS,kBACA,iBACA,KAAA7C,EAAAoC,WAAAU,eACA,cACA,KAAA9C,EAAAoC,WAAAW,gBACA,gBAhEAiB,CAAA9B,KAGA,QACA,OAAAlC,EAAAgC,aAAAE,EAAAD,MA3BAxC,EAAAU","file":"static/js/68.5d0a07dd.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar utils_1 = require(\"../utils\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (name) {\n        return \"'\" + name + \"' statements in finally blocks are forbidden.\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-unsafe-finally\",\n        description: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Disallows control flow statements, such as `return`, `continue`,\\n            `break` and `throws` in finally blocks.\"], [\"\\n            Disallows control flow statements, such as \\\\`return\\\\`, \\\\`continue\\\\`,\\n            \\\\`break\\\\` and \\\\`throws\\\\` in finally blocks.\"]))),\n        descriptionDetails: \"\",\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            When used inside `finally` blocks, control flow statements,\\n            such as `return`, `continue`, `break` and `throws`\\n            override any other control flow statements in the same try/catch scope.\\n            This is confusing and unexpected behavior.\"], [\"\\n            When used inside \\\\`finally\\\\` blocks, control flow statements,\\n            such as \\\\`return\\\\`, \\\\`continue\\\\`, \\\\`break\\\\` and \\\\`throws\\\\`\\n            override any other control flow statements in the same try/catch scope.\\n            This is confusing and unexpected behavior.\"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var inFinally = false;\n    ts.forEachChild(ctx.sourceFile, function cb(node) {\n        switch (node.kind) {\n            case ts.SyntaxKind.TryStatement:\n                var _a = node, tryBlock = _a.tryBlock, catchClause = _a.catchClause, finallyBlock = _a.finallyBlock;\n                ts.forEachChild(tryBlock, cb);\n                if (catchClause !== undefined) {\n                    ts.forEachChild(catchClause, cb);\n                }\n                if (finallyBlock !== undefined) {\n                    var old = inFinally;\n                    inFinally = true;\n                    cb(finallyBlock);\n                    inFinally = old;\n                }\n                break;\n            case ts.SyntaxKind.BreakStatement:\n            case ts.SyntaxKind.ContinueStatement:\n            case ts.SyntaxKind.ThrowStatement:\n            case ts.SyntaxKind.ReturnStatement:\n                if (inFinally && !jumpIsLocalToFinallyBlock(node)) {\n                    ctx.addFailureAtNode(node, Rule.FAILURE_STRING(printJumpKind(node)));\n                }\n            // falls through\n            default:\n                return ts.forEachChild(node, cb);\n        }\n    });\n}\nfunction jumpIsLocalToFinallyBlock(jump) {\n    var isBreakOrContinue = utils.isBreakOrContinueStatement(jump);\n    var label = isBreakOrContinue ? jump.label : undefined;\n    var node = jump;\n    // This should only be called inside a finally block, so we'll eventually reach the TryStatement case and return.\n    while (true) {\n        var parent = node.parent;\n        switch (parent.kind) {\n            case ts.SyntaxKind.TryStatement:\n                if (parent.finallyBlock === node) {\n                    return false;\n                }\n                break;\n            case ts.SyntaxKind.SwitchStatement:\n                if (jump.kind === ts.SyntaxKind.BreakStatement && label === undefined) {\n                    return true;\n                }\n                break;\n            case ts.SyntaxKind.ForInStatement:\n            case ts.SyntaxKind.ForOfStatement:\n            case ts.SyntaxKind.ForStatement:\n            case ts.SyntaxKind.WhileStatement:\n            case ts.SyntaxKind.DoStatement:\n                if (isBreakOrContinue && label === undefined) {\n                    return true;\n                }\n                break;\n            case ts.SyntaxKind.LabeledStatement: {\n                var text = parent.label.text;\n                if (label !== undefined && label.text === text) {\n                    return true;\n                }\n                break;\n            }\n            default:\n                // tslint:disable:deprecation This is needed for https://github.com/palantir/tslint/pull/4274 and will be fixed once TSLint\n                // requires tsutils > 3.0.\n                if (utils_1.isFunctionScopeBoundary(parent)) {\n                    // tslint:enable:deprecation\n                    // Haven't seen TryStatement yet, so the function is inside it.\n                    // No jump statement can escape a function, so the jump is local.\n                    return true;\n                }\n        }\n        node = parent;\n    }\n}\nfunction printJumpKind(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.BreakStatement:\n            return \"break\";\n        case ts.SyntaxKind.ContinueStatement:\n            return \"continue\";\n        case ts.SyntaxKind.ThrowStatement:\n            return \"throw\";\n        case ts.SyntaxKind.ReturnStatement:\n            return \"return\";\n    }\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noUnsafeFinallyRule.js\n// module id = 2109\n// module chunks = 68"],"sourceRoot":""}