{"version":3,"sources":["../node_modules/tslint/lib/rules/commentTypeRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","utils","ts","Lint","templateObject_1","MULTILINE_FAILURE","SINGLE_LINE_FAILURE","DOC_FAILURE","DIRECTIVE_FAILURE","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","opts","ruleArguments","Set","metadata","ruleName","description","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","items","enum","uniqueItems","optionExamples","hasFix","typescriptOnly","Rules","AbstractRule","ctx","forEachComment","fullText","_a","kind","pos","end","SyntaxKind","SingleLineCommentTrivia","slice","has","addFailure","MultiLineCommentTrivia"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MAKA,IA2DAI,EA3DAC,EAAA,qCACAC,EAAA,sCACAC,EAAA,+BACAC,EAAA,0CAEAC,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAuBA,OAzBAb,EAAAe,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,GAfAC,EAeAP,KAAAQ,cAdA,IAAAC,IAAAF,KADA,IAAAA,GAkBAV,EAAAa,UACAC,SAAA,eACAC,YAAA,wCACAC,mBAAAtB,EAAAuB,MAAAC,OAAAvB,MAAAL,EAAA6B,sBAAA,g2BACAC,SACAC,KAAA,QACAC,OACAD,KAAA,SACAE,MAAA,6CAEAC,aAAA,GAEAC,kBAAA,0DACAC,QAAA,EACAL,KAAA,QACAM,gBAAA,GAEA3B,EA1BA,CA2BCN,EAAAkC,MAAAC,cAED,SAAApB,EAAAqB,GACAtC,EAAAuC,eAAAD,EAAAvB,WAAA,SAAAyB,EAAAC,GACA,IAAAC,EAAAD,EAAAC,KAAAC,EAAAF,EAAAE,IAAAC,EAAAH,EAAAG,IACAF,IAAAzC,EAAA4C,WAAAC,wBAEA,QAAAN,EAAAO,MAAAJ,IAAA,IAAAL,EAAAV,QAAAoB,IAAA,aAIA,QAAAR,EAAAO,MAAAJ,IAAA,IAAAL,EAAAV,QAAAoB,IAAA,eACAV,EAAAW,WAAAN,EAAAC,EAAAvC,GAJAiC,EAAAW,WAAAN,EAAAC,EAAArC,GAOAmC,IAAAzC,EAAA4C,WAAAK,yBAEA,QAAAV,EAAAO,MAAAJ,IAAA,IAAAL,EAAAV,QAAAoB,IAAA,OAIA,QAAAR,EAAAO,MAAAJ,IAAA,IAAAL,EAAAV,QAAAoB,IAAA,cACAV,EAAAW,WAAAN,EAAAC,EAAAxC,GAJAkC,EAAAW,WAAAN,EAAAC,EAAAtC,MAjBAV,EAAAY","file":"static/js/146.7147680a.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nfunction parseOptions(opts) {\n    return new Set(opts);\n}\n// Constant Messages\nvar MULTILINE_FAILURE = \"multiline comments are not allowed\";\nvar SINGLE_LINE_FAILURE = \"singleline comments are not allowed\";\nvar DOC_FAILURE = \"doc comments are not allowed\";\nvar DIRECTIVE_FAILURE = \"triple-slash directives are not allowed\";\n// Logic\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, parseOptions(this.ruleArguments));\n    };\n    // tslint:disable:object-literal-sort-keys\n    Rule.metadata = {\n        ruleName: \"comment-type\",\n        description: \"Allows a limited set of comment types\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            One or more of the following mutually exclusive comment types may be provided:\\n\\n            * `singleline`: Comments starting with `//`\\n            * `multiline`:  Comments between `/*` and `*/` but are not doc comments\\n            * `doc`:        Multiline comments that start with `/**`\\n            * 'directive':  Triple-slash directives that are singleline comments starting with `///`\"], [\"\\n            One or more of the following mutually exclusive comment types may be provided:\\n\\n            * \\\\`singleline\\\\`: Comments starting with \\\\`//\\\\`\\n            * \\\\`multiline\\\\`:  Comments between \\\\`/*\\\\` and \\\\`*/\\\\` but are not doc comments\\n            * \\\\`doc\\\\`:        Multiline comments that start with \\\\`/**\\\\`\\n            * \\\\'directive\\\\':  Triple-slash directives that are singleline comments starting with \\\\`///\\\\`\"]))),\n        options: {\n            type: \"array\",\n            items: {\n                type: \"string\",\n                enum: [\"singleline\", \"multiline\", \"doc\", \"directive\"],\n            },\n            uniqueItems: true,\n        },\n        optionExamples: [[true, \"doc\", \"singleline\"], [true, \"singleline\"], [true, \"multiline\"]],\n        hasFix: false,\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    utils.forEachComment(ctx.sourceFile, function (fullText, _a) {\n        var kind = _a.kind, pos = _a.pos, end = _a.end;\n        if (kind === ts.SyntaxKind.SingleLineCommentTrivia) {\n            // directive\n            if (fullText.slice(pos, pos + 3) === \"///\" && !ctx.options.has(\"directive\")) {\n                ctx.addFailure(pos, end, DIRECTIVE_FAILURE);\n                // singleline\n            }\n            else if (fullText.slice(pos, pos + 3) !== \"///\" && !ctx.options.has(\"singleline\")) {\n                ctx.addFailure(pos, end, SINGLE_LINE_FAILURE);\n            }\n        }\n        else if (kind === ts.SyntaxKind.MultiLineCommentTrivia) {\n            // doc\n            if (fullText.slice(pos, pos + 3) === \"/**\" && !ctx.options.has(\"doc\")) {\n                ctx.addFailure(pos, end, DOC_FAILURE);\n                // multiline\n            }\n            else if (fullText.slice(pos, pos + 3) !== \"/**\" && !ctx.options.has(\"multiline\")) {\n                ctx.addFailure(pos, end, MULTILINE_FAILURE);\n            }\n        }\n    });\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/commentTypeRule.js\n// module id = 2023\n// module chunks = 146"],"sourceRoot":""}