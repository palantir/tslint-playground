{"version":3,"sources":["../node_modules/tslint/lib/rules/switchFinalBreakRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","always","ruleArguments","indexOf","metadata","ruleName","description","hasFix","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","enum","optionExamples","typescriptOnly","FAILURE_STRING_ALWAYS","FAILURE_STRING_NEVER","Rules","AbstractRule","ctx","forEachChild","cb","node","isSwitchStatement","clause","last","caseBlock","clauses","undefined","endsControlFlow","addFailureAtNode","getChildAt","lastStatement","getLastStatement","Replacement","appendText","end","fullText","getFullText","indentation","slice","search","createAddFix","isBreakStatement","label","parent","isLabeledStatement","replaceFromTo","getFullStart","createRemoveFix","check","statements","length","block","isBlock","arr"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IA2FAC,EA3FAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MAEAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAwBA,OA1BAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,GACAC,QAAA,IAAAP,KAAAQ,cAAAC,QARA,aAYAZ,EAAAa,UACAC,SAAA,qBACAC,YAAA,0EACAC,QAAA,EACAC,mBAAAlB,EAAAmB,MAAAC,OAAAzB,MAAAC,EAAAyB,sBAAA,4OAAuQ,8OACvQC,SACAC,KAAA,SACAC,MAnBA,WAqBAC,iBAAA,MArBA,WAsBAF,KAAA,QACAG,gBAAA,GAGAzB,EAAA0B,sBAAA,+DACA1B,EAAA2B,qBAAA,mEACA3B,EA3BA,CA4BCD,EAAA6B,MAAAC,cAED,SAAApB,EAAAqB,GACA,IAAAvB,EAAAuB,EAAAvB,WAAAG,EAAAoB,EAAAT,QAAAX,OACAZ,EAAAiC,aAAAxB,EAAA,SAAAyB,EAAAC,GACApC,EAAAqC,kBAAAD,IAKA,SAAAA,GACA,IAAAE,EAAAC,EAAAH,EAAAI,UAAAC,SACA,QAAAC,IAAAJ,EACA,OAEA,GAAAzB,EAIA,YAHAb,EAAA2C,gBAAAL,IACAL,EAAAW,iBAAAN,EAAAO,WAAA,GAAA1C,EAAA0B,sBAiBA,SAAAS,GACA,IAAAQ,EAAAC,EAAAT,GACA,QAAAI,IAAAI,EACA,OAAA5C,EAAA8C,YAAAC,WAAAX,EAAAY,IAAA,WAEA,IAAAC,EAAAL,EAAAM,YAAAnB,EAAAvB,YACA2C,EAAAF,EAAAG,MAAA,EAAAH,EAAAI,OAAA,QACA,OAAArD,EAAA8C,YAAAC,WAAAH,EAAAI,IAAAG,EAAA,UAxBAG,CAAAlB,KAIA,IAAAQ,EAAAC,EAAAT,GACA,QAAAI,IAAAI,IAAA9C,EAAAyD,iBAAAX,GACA,OAEA,QAAAJ,IAAAI,EAAAY,MAAA,CACA,IAAAC,EAAAvB,EAAAuB,OACA,IAAA3D,EAAA4D,mBAAAD,MAAAD,QAAAZ,EAAAY,MAEA,OAGAzB,EAAAW,iBAAAE,EAAA3C,EAAA2B,qBAWA,SAAAgB,GACA,OAAA5C,EAAA8C,YAAAa,cAAAf,EAAAgB,eAAAhB,EAAAI,IAAA,IAZAa,CAAAjB,IA1BAkB,CAAA5B,GAEAnC,EAAAiC,aAAAE,EAAAD,KAuCA,SAAAY,EAAAT,GACA,OAAAA,EAAA2B,WAAAC,OAAA,CAGA,IAAAC,EAAA7B,EAAA2B,WAAA,GAEA,OAAA1B,EADA,IAAAD,EAAA2B,WAAAC,QAAAlE,EAAAoE,QAAAD,KAAAF,WAAA3B,EAAA2B,aAGA,SAAA1B,EAAA8B,GACA,OAAAA,IAAAH,OAAA,GAvDAvE,EAAAQ","file":"static/js/41.b0dfcaaf.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_ALWAYS = \"always\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, {\n            always: this.ruleArguments.indexOf(OPTION_ALWAYS) !== -1,\n        });\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"switch-final-break\",\n        description: \"Checks whether the final clause of a switch statement ends in `break;`.\",\n        hasFix: true,\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            If no options are passed, a final 'break;' is forbidden.\\n            If the \\\"always\\\" option is passed this will require a 'break;' to always be present\\n            unless control flow is escaped in some other way.\"], [\"\\n            If no options are passed, a final 'break;' is forbidden.\\n            If the \\\"always\\\" option is passed this will require a 'break;' to always be present\\n            unless control flow is escaped in some other way.\"]))),\n        options: {\n            type: \"string\",\n            enum: [OPTION_ALWAYS],\n        },\n        optionExamples: [true, [true, OPTION_ALWAYS]],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING_ALWAYS = \"Final clause in 'switch' statement should end with 'break;'.\";\n    Rule.FAILURE_STRING_NEVER = \"Final clause in 'switch' statement should not end with 'break;'.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var sourceFile = ctx.sourceFile, always = ctx.options.always;\n    ts.forEachChild(sourceFile, function cb(node) {\n        if (tsutils_1.isSwitchStatement(node)) {\n            check(node);\n        }\n        ts.forEachChild(node, cb);\n    });\n    function check(node) {\n        var clause = last(node.caseBlock.clauses);\n        if (clause === undefined) {\n            return;\n        }\n        if (always) {\n            if (!tsutils_1.endsControlFlow(clause)) {\n                ctx.addFailureAtNode(clause.getChildAt(0), Rule.FAILURE_STRING_ALWAYS, createAddFix(clause));\n            }\n            return;\n        }\n        var lastStatement = getLastStatement(clause);\n        if (lastStatement === undefined || !tsutils_1.isBreakStatement(lastStatement)) {\n            return;\n        }\n        if (lastStatement.label !== undefined) {\n            var parent = node.parent;\n            if (!tsutils_1.isLabeledStatement(parent) || parent.label === lastStatement.label) {\n                // break jumps somewhere else, don't complain\n                return;\n            }\n        }\n        ctx.addFailureAtNode(lastStatement, Rule.FAILURE_STRING_NEVER, createRemoveFix(lastStatement));\n    }\n    function createAddFix(clause) {\n        var lastStatement = getLastStatement(clause);\n        if (lastStatement === undefined) {\n            return Lint.Replacement.appendText(clause.end, \" break;\");\n        }\n        var fullText = lastStatement.getFullText(ctx.sourceFile);\n        var indentation = fullText.slice(0, fullText.search(/\\S+/));\n        return Lint.Replacement.appendText(lastStatement.end, indentation + \"break;\");\n    }\n    function createRemoveFix(lastStatement) {\n        return Lint.Replacement.replaceFromTo(lastStatement.getFullStart(), lastStatement.end, \"\");\n    }\n}\nfunction getLastStatement(clause) {\n    if (clause.statements.length === 0) {\n        return undefined;\n    }\n    var block = clause.statements[0];\n    var statements = clause.statements.length === 1 && tsutils_1.isBlock(block) ? block.statements : clause.statements;\n    return last(statements);\n}\nfunction last(arr) {\n    return arr[arr.length - 1];\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/switchFinalBreakRule.js\n// module id = 2145\n// module chunks = 41"],"sourceRoot":""}