{"version":3,"sources":["../node_modules/tslint/lib/rules/noVoidExpressionRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","applyWithProgram","sourceFile","program","ignoreArrowFunctionShorthand","ruleArguments","indexOf","applyWithFunction","walk","getTypeChecker","metadata","ruleName","description","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","items","enum","minLength","maxLength","rationale","requiresTypeInfo","typescriptOnly","FAILURE_STRING","Rules","TypedRule","ctx","checker","forEachChild","cb","node","kind","SyntaxKind","AwaitExpression","CallExpression","TaggedTemplateExpression","isPossiblyVoidExpression","isParentAllowedVoid","parent","ExpressionStatement","ArrowFunction","BinaryExpression","isTypeFlagSet","getTypeAtLocation","TypeFlags","Void","addFailureAtNode"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAwEAC,EAAAC,EAxEAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MAEAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KA2BA,OA7BAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAC,iBAAA,SAAAC,EAAAC,GACA,IAAAC,GAAA,IAAAP,KAAAQ,cAAAC,QAPA,mCAQA,OAAAT,KAAAU,kBAAAL,EAAAM,GAAyDJ,gCAA6DD,EAAAM,mBAGtHf,EAAAgB,UACAC,SAAA,qBACAC,YAAA,uEACAC,mBAAApB,EAAAqB,MAAAC,OAAA5B,MAAAE,EAAA2B,sBAAA,yJAAwQ,sKAdxQ,mCAeAC,SACAC,KAAA,QACAC,OACAD,KAAA,SACAE,MAnBA,oCAqBAC,UAAA,EACAC,UAAA,GAEAC,UAAA9B,EAAAqB,MAAAC,OAAA3B,MAAAC,EAAA2B,sBAAA,igBAA6kB,uhBAC7kBQ,kBAAA,EACAN,KAAA,gBACAO,gBAAA,GAGA/B,EAAAgC,eAAA,qEACAhC,EA9BA,CA+BCD,EAAAkC,MAAAC,WAED,SAAApB,EAAAqB,EAAAC,GACA,IAAA5B,EAAA2B,EAAA3B,WAAAE,EAAAyB,EAAAZ,QAAAb,6BACA,OAAAZ,EAAAuC,aAAA7B,EAAA,SAAA8B,EAAAC,GAMA,OAgBA,SAAAA,GACA,OAAAA,EAAAC,MACA,KAAA1C,EAAA2C,WAAAC,gBACA,KAAA5C,EAAA2C,WAAAE,eACA,KAAA7C,EAAA2C,WAAAG,yBACA,SACA,QACA,UA5BAC,CAAAN,KAOA,SAAAO,EAAAP,GACA,OAAAA,EAAAQ,OAAAP,MACA,KAAA1C,EAAA2C,WAAAO,oBACA,SACA,KAAAlD,EAAA2C,WAAAQ,cACA,OAAAvC,EAEA,KAAAZ,EAAA2C,WAAAS,iBACA,OAAAJ,EAAAP,EAAAQ,QACA,QACA,UAhBAD,CAAAP,IACA1C,EAAAsD,cAAAf,EAAAgB,kBAAAb,GAAAzC,EAAAuD,UAAAC,OACAnB,EAAAoB,iBAAAhB,EAAAvC,EAAAgC,gBAEAlC,EAAAuC,aAAAE,EAAAD,KATA/C,EAAAS","file":"static/js/63.ba7c7db5.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_IGNORE_ARROW_FUNCTION_SHORTHAND = \"ignore-arrow-function-shorthand\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.applyWithProgram = function (sourceFile, program) {\n        var ignoreArrowFunctionShorthand = this.ruleArguments.indexOf(OPTION_IGNORE_ARROW_FUNCTION_SHORTHAND) !== -1;\n        return this.applyWithFunction(sourceFile, walk, { ignoreArrowFunctionShorthand: ignoreArrowFunctionShorthand }, program.getTypeChecker());\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-void-expression\",\n        description: \"Requires expressions of type `void` to appear in statement position.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            If `\", \"` is provided, `() => returnsVoid()` will be allowed.\\n            Otherwise, it must be written as `() => { returnsVoid(); }`.\"], [\"\\n            If \\\\`\", \"\\\\` is provided, \\\\`() => returnsVoid()\\\\` will be allowed.\\n            Otherwise, it must be written as \\\\`() => { returnsVoid(); }\\\\`.\"])), OPTION_IGNORE_ARROW_FUNCTION_SHORTHAND),\n        options: {\n            type: \"array\",\n            items: {\n                type: \"string\",\n                enum: [OPTION_IGNORE_ARROW_FUNCTION_SHORTHAND],\n            },\n            minLength: 0,\n            maxLength: 1,\n        },\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            It's misleading returning the results of an expression whose type is `void`.\\n            Attempting to do so is likely a symptom of expecting a different return type from a function.\\n            For example, the following code will log `undefined` but looks like it logs a value:\\n\\n            ```\\n            const performWork = (): void => {\\n                workFirst();\\n                workSecond();\\n            };\\n\\n            console.log(performWork());\\n            ```\\n        \"], [\"\\n            It's misleading returning the results of an expression whose type is \\\\`void\\\\`.\\n            Attempting to do so is likely a symptom of expecting a different return type from a function.\\n            For example, the following code will log \\\\`undefined\\\\` but looks like it logs a value:\\n\\n            \\\\`\\\\`\\\\`\\n            const performWork = (): void => {\\n                workFirst();\\n                workSecond();\\n            };\\n\\n            console.log(performWork());\\n            \\\\`\\\\`\\\\`\\n        \"]))),\n        requiresTypeInfo: true,\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Expression has type `void`. Put it on its own line as a statement.\";\n    return Rule;\n}(Lint.Rules.TypedRule));\nexports.Rule = Rule;\nfunction walk(ctx, checker) {\n    var sourceFile = ctx.sourceFile, ignoreArrowFunctionShorthand = ctx.options.ignoreArrowFunctionShorthand;\n    return ts.forEachChild(sourceFile, function cb(node) {\n        if (isPossiblyVoidExpression(node) &&\n            !isParentAllowedVoid(node) &&\n            tsutils_1.isTypeFlagSet(checker.getTypeAtLocation(node), ts.TypeFlags.Void)) {\n            ctx.addFailureAtNode(node, Rule.FAILURE_STRING);\n        }\n        return ts.forEachChild(node, cb);\n    });\n    function isParentAllowedVoid(node) {\n        switch (node.parent.kind) {\n            case ts.SyntaxKind.ExpressionStatement:\n                return true;\n            case ts.SyntaxKind.ArrowFunction:\n                return ignoreArrowFunctionShorthand;\n            // Something like \"x && console.log(x)\".\n            case ts.SyntaxKind.BinaryExpression:\n                return isParentAllowedVoid(node.parent);\n            default:\n                return false;\n        }\n    }\n}\nfunction isPossiblyVoidExpression(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.AwaitExpression:\n        case ts.SyntaxKind.CallExpression:\n        case ts.SyntaxKind.TaggedTemplateExpression:\n            return true;\n        default:\n            return false;\n    }\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noVoidExpressionRule.js\n// module id = 2115\n// module chunks = 63"],"sourceRoot":""}