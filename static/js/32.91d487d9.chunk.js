webpackJsonp([32],{2157:function(e,a,n){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var r,i=n(1),t=n(843),o=n(54),s=n(1116),l=n(56),c=["any","Number","number","String","string","Boolean","boolean","Undefined","undefined"],d=new Set(c),u=c.map(function(e){return"`"+e+"`"}).join(", "),f="allow-leading-underscore",m="allow-trailing-underscore",p="ban-keywords",y="check-format",w="allow-pascal-case",h="allow-snake-case",k=function(e){function a(){return null!==e&&e.apply(this,arguments)||this}return i.__extends(a,e),a.prototype.apply=function(e){return this.applyWithFunction(e,C,function(e){var a=n(p);return{banKeywords:a,checkFormat:!a||n(y),leadingUnderscore:n(f),trailingUnderscore:n(m),allowPascalCase:n(w),allowSnakeCase:n(h)};function n(a){return-1!==e.indexOf(a)}}(this.ruleArguments))},a.metadata={ruleName:"variable-name",description:"Checks variable names for various errors.",optionsDescription:s.Utils.dedent(r||(r=i.__makeTemplateObject(['\n            Five arguments may be optionally provided:\n\n            * `"','"`: allows only lowerCamelCased or UPPER_CASED variable names\n              * `"','"` allows underscores at the beginning (only has an effect if "check-format" specified)\n              * `"','"` allows underscores at the end. (only has an effect if "check-format" specified)\n              * `"','"` allows PascalCase in addition to lowerCamelCase.\n              * `"','"` allows snake_case in addition to lowerCamelCase.\n            * `"','"`: disallows the use of certain TypeScript keywords as variable or parameter names.\n              * These are: ',""],['\n            Five arguments may be optionally provided:\n\n            * \\`"','"\\`: allows only lowerCamelCased or UPPER_CASED variable names\n              * \\`"','"\\` allows underscores at the beginning (only has an effect if "check-format" specified)\n              * \\`"','"\\` allows underscores at the end. (only has an effect if "check-format" specified)\n              * \\`"','"\\` allows PascalCase in addition to lowerCamelCase.\n              * \\`"','"\\` allows snake_case in addition to lowerCamelCase.\n            * \\`"','"\\`: disallows the use of certain TypeScript keywords as variable or parameter names.\n              * These are: ',""])),y,f,m,w,h,p,u),options:{type:"array",items:{type:"string",enum:[y,f,m,w,h,p]},minLength:0,maxLength:5},optionExamples:[[!0,"ban-keywords","check-format","allow-leading-underscore"]],type:"style",typescriptOnly:!1},a.KEYWORD_FAILURE="variable name clashes with keyword/type",a}(s.Rules.AbstractRule);function C(e){var a=e.options,n=e.sourceFile;return o.forEachChild(n,function e(a){switch(a.kind){case o.SyntaxKind.BindingElement:var n=a,s=n.initializer,l=n.name,c=n.propertyName;l.kind===o.SyntaxKind.Identifier&&(i(l),a.parent.kind===o.SyntaxKind.ObjectBindingPattern&&void 0===c||r(l,s));break;case o.SyntaxKind.VariableStatement:if(t.hasModifier(a.modifiers,o.SyntaxKind.DeclareKeyword))return;break;case o.SyntaxKind.Parameter:case o.SyntaxKind.PropertyDeclaration:case o.SyntaxKind.VariableDeclaration:var d=a;l=d.name,s=d.initializer;l.kind===o.SyntaxKind.Identifier&&(r(l,s),a.kind!==o.SyntaxKind.PropertyDeclaration&&i(l))}return o.forEachChild(a,e)});function r(n,r){if(a.checkFormat){var i=n.text;void 0!==r&&function(e,a){switch(a.kind){case o.SyntaxKind.PropertyAccessExpression:return a.name.text===e;case o.SyntaxKind.Identifier:return a.text===e;default:return!1}}(i,r)||0===i.length||function(e,a){var n=e[0],r=e[e.length-1],i=e.slice(1,-1);if(!a.leadingUnderscore&&"_"===n)return!1;if(!a.trailingUnderscore&&"_"===r)return!1;if(!a.allowPascalCase&&!l.isLowerCase(n))return!1;if(!a.allowSnakeCase&&-1!==i.indexOf("_"))return!1;return!0}(i,a)||l.isUpperCase(i)||e.addFailureAtNode(n,function(){var e="variable name must be in lowerCamelCase";a.allowPascalCase&&(e+=", PascalCase");a.allowSnakeCase&&(e+=", snake_case");return e+" or UPPER_CASE"}())}}function i(n){a.banKeywords&&d.has(n.text)&&e.addFailureAtNode(n,k.KEYWORD_FAILURE)}}a.Rule=k}});
//# sourceMappingURL=32.91d487d9.chunk.js.map