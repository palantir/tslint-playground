{"version":3,"sources":["../node_modules/tslint/lib/rules/noFloatingPromisesRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","applyWithProgram","sourceFile","program","applyWithFunction","walk","concat","ruleArguments","getTypeChecker","metadata","ruleName","description","descriptionDetails","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","listType","items","optionExamples","rationale","typescriptOnly","requiresTypeInfo","FAILURE_STRING","Rules","TypedRule","ctx","tc","forEachChild","cb","node","isExpressionStatement","expression","isCallExpression","isPropertyAccessExpression","name","text","isPromiseCatchCall","length","isPromiseThenCallWithRejectionHandler","symbol","getTypeAtLocation","undefined","indexOf","addFailureAtNode"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IA6DAC,EAAAC,EA7DAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KA0BA,OA5BAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAC,iBAAA,SAAAC,EAAAC,GACA,OAAAN,KAAAO,kBAAAF,EAAAG,GAAA,WAAAC,OAAAT,KAAAU,eAAAJ,EAAAK,mBAGAd,EAAAe,UACAC,SAAA,uBACAC,YAAA,gEACAC,mBAAA,2FACAC,mBAAApB,EAAAqB,MAAAC,OAAA5B,MAAAE,EAAA2B,sBAAA,sPACAC,SACAC,KAAA,OACAC,UACAD,KAAA,QACAE,OAAwBF,KAAA,YAGxBG,iBAAA,wBACAC,UAAA7B,EAAAqB,MAAAC,OAAA3B,MAAAC,EAAA2B,sBAAA,k7BACAE,KAAA,gBACAK,gBAAA,EACAC,kBAAA,GAGA9B,EAAA+B,eAAA,yCACA/B,EA7BA,CA8BCD,EAAAiC,MAAAC,WAED,SAAAtB,EAAAuB,EAAAC,GACA,OAAArC,EAAAsC,aAAAF,EAAA1B,WAAA,SAAA6B,EAAAC,GACA,GAAAzC,EAAA0C,sBAAAD,GAAA,CACA,IAAAE,EAAAF,EAAAE,WACA,GAAA3C,EAAA4C,iBAAAD,KAYA,SAAAA,GACA,OAAA3C,EAAA6C,2BAAAF,eACA,UAAAA,aAAAG,KAAAC,KAbAC,CAAAL,KAeA,SAAAA,GACA,OAAA3C,EAAA6C,2BAAAF,eACA,SAAAA,aAAAG,KAAAC,MACAJ,EAAApC,UAAA0C,QAAA,EAjBAC,CAAAP,GAAA,CACA,IAAAQ,EAAAb,EAAAc,kBAAAT,GAAAQ,YACAE,IAAAF,IAAA,IAAAd,EAAAX,QAAA4B,QAAAH,EAAAL,OACAT,EAAAkB,iBAAAZ,EAAAxC,EAAA+B,iBAIA,OAAAjC,EAAAsC,aAAAE,EAAAD,KAdA9C,EAAAS","file":"static/js/102.9dffee48.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.applyWithProgram = function (sourceFile, program) {\n        return this.applyWithFunction(sourceFile, walk, [\"Promise\"].concat(this.ruleArguments), program.getTypeChecker());\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-floating-promises\",\n        description: \"Promises returned by functions must be handled appropriately.\",\n        descriptionDetails: \"Unhandled Promises can cause unexpected behavior, such as resolving at unexpected times.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            A list of 'string' names of any additional classes that should also be handled as Promises.\\n        \"], [\"\\n            A list of \\\\'string\\\\' names of any additional classes that should also be handled as Promises.\\n        \"]))),\n        options: {\n            type: \"list\",\n            listType: {\n                type: \"array\",\n                items: { type: \"string\" },\n            },\n        },\n        optionExamples: [true, [true, \"JQueryPromise\"]],\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            Creating a Promise and not storing or returning it may let other code run independently of its result.\\n            This can cause unexpected and/or non-deterministic behavior depending on external timing factors.\\n\\n            It's typically better to return Promises from functions that start them, then handle them in calling code.\\n\\n            Use `no-unused-expression` in addition to this rule to reveal even more floating promises.\\n        \"], [\"\\n            Creating a Promise and not storing or returning it may let other code run independently of its result.\\n            This can cause unexpected and/or non-deterministic behavior depending on external timing factors.\\n\\n            It's typically better to return Promises from functions that start them, then handle them in calling code.\\n\\n            Use \\\\`no-unused-expression\\\\` in addition to this rule to reveal even more floating promises.\\n        \"]))),\n        type: \"functionality\",\n        typescriptOnly: true,\n        requiresTypeInfo: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Promises must be handled appropriately\";\n    return Rule;\n}(Lint.Rules.TypedRule));\nexports.Rule = Rule;\nfunction walk(ctx, tc) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isExpressionStatement(node)) {\n            var expression = node.expression;\n            if (tsutils_1.isCallExpression(expression) &&\n                !isPromiseCatchCall(expression) &&\n                !isPromiseThenCallWithRejectionHandler(expression)) {\n                var symbol = tc.getTypeAtLocation(expression).symbol;\n                if (symbol !== undefined && ctx.options.indexOf(symbol.name) !== -1) {\n                    ctx.addFailureAtNode(expression, Rule.FAILURE_STRING);\n                }\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction isPromiseCatchCall(expression) {\n    return (tsutils_1.isPropertyAccessExpression(expression.expression) &&\n        expression.expression.name.text === \"catch\");\n}\nfunction isPromiseThenCallWithRejectionHandler(expression) {\n    return (tsutils_1.isPropertyAccessExpression(expression.expression) &&\n        expression.expression.name.text === \"then\" &&\n        expression.arguments.length >= 2);\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noFloatingPromisesRule.js\n// module id = 2070\n// module chunks = 102"],"sourceRoot":""}