{"version":3,"sources":["../node_modules/tslint/lib/rules/binaryExpressionOperandOrderRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","tsutils_1","ts","Lint","utils_1","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","Utils","dedent","__makeTemplateObject","optionsDescription","options","optionExamples","rationale","type","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","isBinaryExpression","isLiteral","left","right","operatorToken","kind","SyntaxKind","PlusToken","StringLiteral","MinusToken","SlashToken","PercentToken","LessThanLessThanToken","GreaterThanGreaterThanToken","GreaterThanGreaterThanGreaterThanToken","AsteriskAsteriskToken","InKeyword","CommaToken","isAllowedOrderedOperator","addFailureAtNode","NumericLiteral","TrueKeyword","FalseKeyword","NullKeyword","Identifier","originalKeywordKind","UndefinedKeyword","PrefixUnaryExpression","isNegativeNumberLiteral","ParenthesizedExpression","expression"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IA8EAC,EAAAC,EA9EAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,KACAK,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAkBA,OApBAT,EAAAW,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,kCACAC,YAAAd,EAAAe,MAAAC,OAAAtB,MAAAE,EAAAqB,sBAAA,kUACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,UAAArB,EAAAe,MAAAC,OAAArB,MAAAC,EAAAqB,sBAAA,slBACAK,KAAA,QACAC,gBAAA,GAGArB,EAAAsB,eAAA,8EACAtB,EArBA,CAsBCF,EAAAyB,MAAAC,cAED,SAAAf,EAAAgB,GACA5B,EAAA6B,aAAAD,EAAAlB,WAAA,SAAAoB,EAAAC,GACAhC,EAAAiC,mBAAAD,IACAE,EAAAF,EAAAG,QACAD,EAAAF,EAAAI,SAQA,SAAAJ,GACA,OAAAA,EAAAK,cAAAC,MACA,KAAArC,EAAAsC,WAAAC,UAEA,OAAAR,EAAAG,KAAAG,OAAArC,EAAAsC,WAAAE,cACA,KAAAxC,EAAAsC,WAAAG,WACA,KAAAzC,EAAAsC,WAAAI,WACA,KAAA1C,EAAAsC,WAAAK,aACA,KAAA3C,EAAAsC,WAAAM,sBACA,KAAA5C,EAAAsC,WAAAO,4BACA,KAAA7C,EAAAsC,WAAAQ,uCACA,KAAA9C,EAAAsC,WAAAS,sBACA,KAAA/C,EAAAsC,WAAAU,UACA,KAAAhD,EAAAsC,WAAAW,WACA,SACA,QACA,UAvBAC,CAAAnB,IACAH,EAAAuB,iBAAApB,EAAA5B,EAAAsB,gBAEAzB,EAAA6B,aAAAE,EAAAD,KAuBA,SAAAG,EAAAF,GACA,OAAAA,EAAAM,MACA,KAAArC,EAAAsC,WAAAE,cACA,KAAAxC,EAAAsC,WAAAc,eACA,KAAApD,EAAAsC,WAAAe,YACA,KAAArD,EAAAsC,WAAAgB,aACA,KAAAtD,EAAAsC,WAAAiB,YACA,SACA,KAAAvD,EAAAsC,WAAAkB,WACA,OAAAzB,EAAA0B,sBAAAzD,EAAAsC,WAAAoB,iBACA,KAAA1D,EAAAsC,WAAAqB,sBACA,OAAAzD,EAAA0D,wBAAA7B,GACA,KAAA/B,EAAAsC,WAAAuB,wBACA,OAAA5B,EAAAF,EAAA+B,YACA,QACA,UA/CArE,EAAAU","file":"static/js/149.63d57a2b.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar utils_1 = require(\"../language/utils\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"binary-expression-operand-order\",\n        description: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            In a binary expression, a literal should always be on the right-hand side if possible.\\n            For example, prefer 'x + 1' over '1 + x'.\"], [\"\\n            In a binary expression, a literal should always be on the right-hand side if possible.\\n            For example, prefer 'x + 1' over '1 + x'.\"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            Expressions like `1 + x` are sometimes referred to as \\\"Yoda\\\" expressions because they read\\n            opposite to how we would normally speak the expression.\\n\\n            Sticking to a consistent grammar for conditions helps keep code readable and understandable.\\n        \"], [\"\\n            Expressions like \\\\`1 + x\\\\` are sometimes referred to as \\\"Yoda\\\" expressions because they read\\n            opposite to how we would normally speak the expression.\\n\\n            Sticking to a consistent grammar for conditions helps keep code readable and understandable.\\n        \"]))),\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Literal expression should be on the right-hand side of a binary expression.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isBinaryExpression(node) &&\n            isLiteral(node.left) &&\n            !isLiteral(node.right) &&\n            !isAllowedOrderedOperator(node)) {\n            ctx.addFailureAtNode(node, Rule.FAILURE_STRING);\n        }\n        ts.forEachChild(node, cb);\n    });\n}\n/** Allows certain inherently ordered operators that can't easily be written with the literal on the right. */\nfunction isAllowedOrderedOperator(node) {\n    switch (node.operatorToken.kind) {\n        case ts.SyntaxKind.PlusToken:\n            // Allow `\"foo\" + x` but not `1 + x`.\n            return node.left.kind === ts.SyntaxKind.StringLiteral;\n        case ts.SyntaxKind.MinusToken:\n        case ts.SyntaxKind.SlashToken:\n        case ts.SyntaxKind.PercentToken:\n        case ts.SyntaxKind.LessThanLessThanToken:\n        case ts.SyntaxKind.GreaterThanGreaterThanToken:\n        case ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken:\n        case ts.SyntaxKind.AsteriskAsteriskToken:\n        case ts.SyntaxKind.InKeyword:\n        case ts.SyntaxKind.CommaToken:\n            return true;\n        default:\n            return false;\n    }\n}\nfunction isLiteral(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.StringLiteral:\n        case ts.SyntaxKind.NumericLiteral:\n        case ts.SyntaxKind.TrueKeyword:\n        case ts.SyntaxKind.FalseKeyword:\n        case ts.SyntaxKind.NullKeyword:\n            return true;\n        case ts.SyntaxKind.Identifier:\n            return node.originalKeywordKind === ts.SyntaxKind.UndefinedKeyword;\n        case ts.SyntaxKind.PrefixUnaryExpression:\n            return utils_1.isNegativeNumberLiteral(node);\n        case ts.SyntaxKind.ParenthesizedExpression:\n            return isLiteral(node.expression);\n        default:\n            return false;\n    }\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/binaryExpressionOperandOrderRule.js\n// module id = 2019\n// module chunks = 149"],"sourceRoot":""}