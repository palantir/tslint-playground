{"version":3,"sources":["../node_modules/tslint/lib/rules/unnecessaryConstructorRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","description","optionExamples","options","optionsDescription","rationale","Utils","dedent","templateObject_1","__makeTemplateObject","ruleName","type","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","isEmptyConstructor","node","undefined","body","statements","length","containsConstructorParameter","_i","_a","parameters","parameter","isParameterProperty","context","callback","isConstructorDeclaration","addFailureAtNode","forEachChild"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAgBA,OAlBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAEAT,EAAAU,UACAC,YAAA,sDACAC,iBAAA,GACAC,QAAA,KACAC,mBAAA,oBACAC,UAAAhB,EAAAiB,MAAAC,OAAAC,MAAAvB,EAAAwB,sBAAA,oTACAC,SAAA,0BACAC,KAAA,gBACAC,gBAAA,GAEAtB,EAAAuB,eAAA,wCACAvB,EAnBA,CAoBCD,EAAAyB,MAAAC,cACDhC,EAAAO,OACA,IAyBAkB,EAzBAQ,EAAA,SAAAC,GACA,YAAAC,IAAAD,EAAAE,MAAA,IAAAF,EAAAE,KAAAC,WAAAC,QAEAC,EAAA,SAAAL,GACA,QAAAM,EAAA,EAAAC,EAAAP,EAAAQ,WAA0CF,EAAAC,EAAAH,OAAgBE,IAAA,CAC1D,IAAAG,EAAAF,EAAAD,GACA,GAAApC,EAAAwC,oBAAAD,GACA,SAGA,UAEA,SAAA3B,EAAA6B,GACA,IAAAC,EAAA,SAAAZ,GACA9B,EAAA2C,yBAAAb,IACAD,EAAAC,KACAK,EAAAL,GACAW,EAAAG,iBAAAd,EAAA3B,EAAAuB,gBAGAzB,EAAA4C,aAAAf,EAAAY,IAGA,OAAAzC,EAAA4C,aAAAJ,EAAA/B,WAAAgC","file":"static/js/34.5fda75ec.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    Rule.metadata = {\n        description: \"Prevents blank constructors, as they are redundant.\",\n        optionExamples: [true],\n        options: null,\n        optionsDescription: \"Not configurable.\",\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            JavaScript implicitly adds a blank constructor when there isn't one.\\n            It's not necessary to manually add one in.\\n        \"], [\"\\n            JavaScript implicitly adds a blank constructor when there isn't one.\\n            It's not necessary to manually add one in.\\n        \"]))),\n        ruleName: \"unnecessary-constructor\",\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    Rule.FAILURE_STRING = \"Remove unnecessary empty constructor.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar isEmptyConstructor = function (node) {\n    return node.body !== undefined && node.body.statements.length === 0;\n};\nvar containsConstructorParameter = function (node) {\n    for (var _i = 0, _a = node.parameters; _i < _a.length; _i++) {\n        var parameter = _a[_i];\n        if (tsutils_1.isParameterProperty(parameter)) {\n            return true;\n        }\n    }\n    return false;\n};\nfunction walk(context) {\n    var callback = function (node) {\n        if (tsutils_1.isConstructorDeclaration(node) &&\n            isEmptyConstructor(node) &&\n            !containsConstructorParameter(node)) {\n            context.addFailureAtNode(node, Rule.FAILURE_STRING);\n        }\n        else {\n            ts.forEachChild(node, callback);\n        }\n    };\n    return ts.forEachChild(context.sourceFile, callback);\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/unnecessaryConstructorRule.js\n// module id = 2154\n// module chunks = 34"],"sourceRoot":""}