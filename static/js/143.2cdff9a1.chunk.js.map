{"version":3,"sources":["../node_modules/tslint/lib/rules/encodingRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","fs","Lint","utils_1","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","actual","encoding","showEncoding","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","optionsDescription","options","optionExamples","type","typescriptOnly","Rules","AbstractRule","ctx","fileName","fd","buffer","bytesRead","openSync","Buffer","allocUnsafe","readSync","closeSync","detectBufferEncoding","addFailure"],"mappings":"mEAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,IACAE,EAAAF,EAAA,MACAG,EAAAH,EAAA,IACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAR,EAAAU,UAAAL,EAAAC,GAKAD,EAAAM,eAAA,SAAAC,GACA,iCAwBA,SAAAC,GACA,OAAAA,GACA,WACA,cACA,eACA,2CACA,cACA,+BACA,cACA,6BAjCAC,CAAAF,GAAA,sBAEAP,EAAAU,UAAAR,MAAA,SAAAS,GACA,OAAAR,KAAAS,kBAAAD,EAAAE,IAGAb,EAAAc,UACAC,SAAA,WACAC,YAAA,gCACAC,mBAAA,oBACAC,QAAA,KACAC,gBAAA,QACAC,KAAA,QACAC,gBAAA,GAEArB,EAtBA,CAuBCF,EAAAwB,MAAAC,cAED,SAAAV,EAAAW,GACA,IAiBAC,EACAC,EAEAC,EACAC,EArBApB,GAiBAiB,EAjBAD,EAAAb,WAAAc,SAkBAC,EAAA7B,EAAAgC,SAAAJ,EAAA,KAEAE,EAAAG,EAAAC,YADA,GAEAH,EAAA/B,EAAAmC,SAAAN,EAAAC,EACA,EAHA,EAKA,GACA9B,EAAAoC,UAAAP,GACA3B,EAAAmC,qBAAAP,EAAAC,IAzBA,SAAApB,GACAgB,EAAAW,WAAA,IAAAnC,EAAAM,eAAAE,IAJAf,EAAAO","file":"static/js/143.2cdff9a1.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar fs = require(\"fs\");\nvar Lint = require(\"../index\");\nvar utils_1 = require(\"../utils\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (actual) {\n        return \"This file is encoded as \" + showEncoding(actual) + \" instead of UTF-8.\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"encoding\",\n        description: \"Enforces UTF-8 file encoding.\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [\"true\"],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var encoding = detectEncoding(ctx.sourceFile.fileName);\n    if (encoding !== \"utf8\") {\n        ctx.addFailure(0, 1, Rule.FAILURE_STRING(encoding));\n    }\n}\nfunction showEncoding(encoding) {\n    switch (encoding) {\n        case \"utf8\":\n            return \"UTF-8\";\n        case \"utf8-bom\":\n            return \"UTF-8 with byte-order marker (BOM)\";\n        case \"utf16le\":\n            return \"UTF-16 (little-endian)\";\n        case \"utf16be\":\n            return \"UTF-16 (big-endian)\";\n    }\n}\nfunction detectEncoding(fileName) {\n    var fd = fs.openSync(fileName, \"r\");\n    var maxBytesRead = 3; // Only need 3 bytes to detect the encoding.\n    var buffer = Buffer.allocUnsafe(maxBytesRead);\n    var bytesRead = fs.readSync(fd, buffer, \n    /*offset*/ 0, \n    /*length*/ maxBytesRead, \n    /*position*/ 0);\n    fs.closeSync(fd);\n    return utils_1.detectBufferEncoding(buffer, bytesRead);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/encodingRule.js\n// module id = 2027\n// module chunks = 143"],"sourceRoot":""}