{"version":3,"sources":["../node_modules/tslint/lib/rules/typeofCompareRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils","ts","Lint","LEGAL_TYPEOF_RESULTS","Set","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","optionsDescription","options","optionExamples","type","typescriptOnly","deprecationMessage","test","version","FAILURE_STRING","Array","from","map","x","join","Rules","AbstractRule","ctx","forEachChild","cb","node","isBinaryExpression","operatorToken","left","right","undefined","getEqualsKind","isFaultyTypeof","addFailureAtNode","kind","SyntaxKind","TypeOfExpression","StringLiteral","has","text","Identifier","originalKeywordKind","UndefinedKeyword","NullKeyword","NumericLiteral","TrueKeyword","FalseKeyword","ObjectLiteralExpression","ArrayLiteralExpression","isFaultyTypeofResult"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,IAAAC,KACA,YACA,SACA,UACA,SACA,WACA,SACA,WAEAC,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAsBA,OAxBAV,EAAAY,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,iBACAC,YAAA,qEACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,gBACAC,gBAAA,EACAC,mBAAA,UAAAC,KAAAvB,EAAAwB,SAEA,GADA,kGAIApB,EAAAqB,eAAA,mDAAAC,MAAAC,KAAAzB,GACA0B,IAAA,SAAAC,GAA2B,UAAAA,EAAA,MAC3BC,KAAA,MACA1B,EAzBA,CA0BCH,EAAA8B,MAAAC,cAED,SAAAnB,EAAAoB,GACAjC,EAAAkC,aAAAD,EAAAtB,WAAA,SAAAwB,EAAAC,GACA,GAAArC,EAAAsC,mBAAAD,GAAA,CACA,IAAAE,EAAAF,EAAAE,cAAAC,EAAAH,EAAAG,KAAAC,EAAAJ,EAAAI,WACAC,IAAAxC,EAAAyC,cAAAJ,KACAK,EAAAJ,EAAAC,IAAAG,EAAAH,EAAAD,KACAN,EAAAW,iBAAAR,EAAAhC,EAAAqB,gBAGAzB,EAAAkC,aAAAE,EAAAD,KAGA,SAAAQ,EAAAJ,EAAAC,GACA,OAAAD,EAAAM,OAAA7C,EAAA8C,WAAAC,kBAEA,SAAAX,GACA,OAAAA,EAAAS,MACA,KAAA7C,EAAA8C,WAAAE,cACA,OAAA9C,EAAA+C,IAAAb,EAAAc,MACA,KAAAlD,EAAA8C,WAAAK,WACA,OAAAf,EAAAgB,sBAAApD,EAAA8C,WAAAO,iBACA,KAAArD,EAAA8C,WAAAQ,YACA,KAAAtD,EAAA8C,WAAAS,eACA,KAAAvD,EAAA8C,WAAAU,YACA,KAAAxD,EAAA8C,WAAAW,aACA,KAAAzD,EAAA8C,WAAAY,wBACA,KAAA1D,EAAA8C,WAAAa,uBACA,SACA,QACA,UAhBAC,CAAApB,GAdA7C,EAAAS","file":"static/js/36.c1fde3e5.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar LEGAL_TYPEOF_RESULTS = new Set([\n    \"undefined\",\n    \"string\",\n    \"boolean\",\n    \"number\",\n    \"function\",\n    \"object\",\n    \"symbol\",\n]);\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"typeof-compare\",\n        description: \"Makes sure result of `typeof` is compared to correct string values\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"functionality\",\n        typescriptOnly: false,\n        deprecationMessage: !/^2\\.1\\./.test(ts.version)\n            ? \"Starting from TypeScript 2.2 the compiler includes this check which makes this rule redundant.\"\n            : \"\",\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"'typeof' expression must be compared to one of: \" + Array.from(LEGAL_TYPEOF_RESULTS)\n        .map(function (x) { return \"\\\"\" + x + \"\\\"\"; })\n        .join(\", \");\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils.isBinaryExpression(node)) {\n            var operatorToken = node.operatorToken, left = node.left, right = node.right;\n            if (Lint.getEqualsKind(operatorToken) !== undefined &&\n                (isFaultyTypeof(left, right) || isFaultyTypeof(right, left))) {\n                ctx.addFailureAtNode(node, Rule.FAILURE_STRING);\n            }\n        }\n        ts.forEachChild(node, cb);\n    });\n}\nfunction isFaultyTypeof(left, right) {\n    return left.kind === ts.SyntaxKind.TypeOfExpression && isFaultyTypeofResult(right);\n}\nfunction isFaultyTypeofResult(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.StringLiteral:\n            return !LEGAL_TYPEOF_RESULTS.has(node.text);\n        case ts.SyntaxKind.Identifier:\n            return node.originalKeywordKind === ts.SyntaxKind.UndefinedKeyword;\n        case ts.SyntaxKind.NullKeyword:\n        case ts.SyntaxKind.NumericLiteral:\n        case ts.SyntaxKind.TrueKeyword:\n        case ts.SyntaxKind.FalseKeyword:\n        case ts.SyntaxKind.ObjectLiteralExpression:\n        case ts.SyntaxKind.ArrayLiteralExpression:\n            return true;\n        default:\n            return false;\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/typeofCompareRule.js\n// module id = 2151\n// module chunks = 36"],"sourceRoot":""}