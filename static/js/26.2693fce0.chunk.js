webpackJsonp([26],{2013:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,a,u=t(1),s=t(843),i=t(54),l=t(1116),d=t(254),o=t(2177),c=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return u.__extends(n,e),n.FAILURE_STRING=function(e){return"This arrow function body can be simplified by omitting the curly braces and the keyword 'return'"+(e?", and wrapping the object literal in parentheses.":".")},n.prototype.apply=function(e){return this.applyWithFunction(e,m,{multiline:-1!==this.ruleArguments.indexOf("multiline")})},n.metadata={ruleName:"arrow-return-shorthand",description:"Suggests to convert `() => { return x; }` to `() => x`.",hasFix:!0,optionsDescription:l.Utils.dedent(r||(r=u.__makeTemplateObject(["\n            If `","` is specified, then this will warn even if the function spans multiple lines."],["\n            If \\`","\\` is specified, then this will warn even if the function spans multiple lines."])),"multiline"),options:{type:"string",enum:["multiline"]},optionExamples:[!0,[!0,"multiline"]],rationale:l.Utils.dedent(a||(a=u.__makeTemplateObject(["\n            It's unnecessary to include `return` and `{}` brackets in arrow lambdas.\n            Leaving them out results in simpler and easier to read code.\n        "],["\n            It's unnecessary to include \\`return\\` and \\`{}\\` brackets in arrow lambdas.\n            Leaving them out results in simpler and easier to read code.\n        "]))),type:"style",typescriptOnly:!1,codeExamples:o.codeExamples},n}(l.Rules.AbstractRule);function m(e){var n=e.sourceFile,t=e.options.multiline;return i.forEachChild(n,function r(a){if(s.isArrowFunction(a)&&s.isBlock(a.body)){var u=1===(m=a.body).statements.length&&m.statements[0].kind===i.SyntaxKind.ReturnStatement?m.statements[0].expression:void 0;if(void 0!==u&&(t||s.isSameLine(n,a.body.getStart(n),a.body.end))){var o=u.kind===i.SyntaxKind.ObjectLiteralExpression;e.addFailureAtNode(a.body,c.FAILURE_STRING(o),function(e,n,t,r){var a=t.parent,u=s.getChildOfKind(a,i.SyntaxKind.ReturnKeyword),o=s.getChildOfKind(e,i.SyntaxKind.EqualsGreaterThanToken),c=s.getChildOfKind(n,i.SyntaxKind.OpenBraceToken),m=s.getChildOfKind(n,i.SyntaxKind.CloseBraceToken),y=s.getChildOfKind(a,i.SyntaxKind.SemicolonToken);return x(o)||x(c)||x(a)||x(u)||x(t)||void 0!==y&&x(y)||x(m)?void 0:(t.kind===i.SyntaxKind.ObjectLiteralExpression?[l.Replacement.appendText(t.getStart(),"("),l.Replacement.appendText(t.getEnd(),")")]:[]).concat([l.Replacement.deleteFromTo(o.end,c.end),l.Replacement.deleteFromTo(a.getStart(),t.getStart()),l.Replacement.deleteFromTo(t.end,m.end)]);function x(e){return d.hasCommentAfterPosition(r,e.getEnd())}}(a,a.body,u,n.text))}}var m;return i.forEachChild(a,r)})}n.Rule=c},2177:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,a,u,s,i,l,d=t(1),o=t(1116);n.codeExamples=[{description:"Enforces usage of the shorthand return syntax when an arrow function's body does not span multiple lines.",config:o.Utils.dedent(r||(r=d.__makeTemplateObject(['\n            "rules": { "arrow-return-shorthand": true }\n        '],['\n            "rules": { "arrow-return-shorthand": true }\n        ']))),pass:o.Utils.dedent(a||(a=d.__makeTemplateObject(["\n            const calc = (x: number, y: number) => ({ add: x + y, sub: x - y, mul: x * y });\n            const calc2 = (x: number, y: number) => {\n                return { add: x + y, sub: x - y, mul: x * y }\n            };\n        "],["\n            const calc = (x: number, y: number) => ({ add: x + y, sub: x - y, mul: x * y });\n            const calc2 = (x: number, y: number) => {\n                return { add: x + y, sub: x - y, mul: x * y }\n            };\n        "]))),fail:o.Utils.dedent(u||(u=d.__makeTemplateObject(["\n            const calc = (x: number, y: number) => { return { add: x + y, sub: x - y, mul: x * y } };\n            const calc2 = (x: number, y: number) => {\n                return { add: x + y, sub: x - y, mul: x * y }\n            };\n       "],["\n            const calc = (x: number, y: number) => { return { add: x + y, sub: x - y, mul: x * y } };\n            const calc2 = (x: number, y: number) => {\n                return { add: x + y, sub: x - y, mul: x * y }\n            };\n       "])))},{description:"Enforces usage of the shorthand return syntax even when an arrow function's body spans multiple lines.",config:o.Utils.dedent(s||(s=d.__makeTemplateObject(['\n            "rules": { "arrow-return-shorthand": [true, "multiline"] }\n        '],['\n            "rules": { "arrow-return-shorthand": [true, "multiline"] }\n        ']))),pass:o.Utils.dedent(i||(i=d.__makeTemplateObject(["\n            const calc = (x: number, y: number) => ({ add: x + y, sub: x - y, mul: x * y });\n            const calc2 = (x: number, y: number) =>\n                ({ add: x + y, sub: x - y, mul: x * y });\n        "],["\n            const calc = (x: number, y: number) => ({ add: x + y, sub: x - y, mul: x * y });\n            const calc2 = (x: number, y: number) =>\n                ({ add: x + y, sub: x - y, mul: x * y });\n        "]))),fail:o.Utils.dedent(l||(l=d.__makeTemplateObject(["\n            const calc = (x: number, y: number) => { return { add: x + y, sub: x - y, mul: x * y } };\n            const calc2 = (x: number, y: number) => {\n                return { add: x + y, sub: x - y, mul: x * y }\n            };\n       "],["\n            const calc = (x: number, y: number) => { return { add: x + y, sub: x - y, mul: x * y } };\n            const calc2 = (x: number, y: number) => {\n                return { add: x + y, sub: x - y, mul: x * y }\n            };\n       "])))}]}});
//# sourceMappingURL=26.2693fce0.chunk.js.map