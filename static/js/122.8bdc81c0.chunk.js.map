{"version":3,"sources":["../node_modules/tslint/lib/rules/newlineBeforeReturnRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithWalker","NewlineBeforeReturnWalker","ruleName","undefined","metadata","description","rationale","optionsDescription","options","optionExamples","type","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","walk","_this","cb","node","kind","SyntaxKind","ReturnStatement","visitReturnStatement","forEachChild","prev","getPreviousStatement","start","getStart","line","getLineAndCharacterOfPosition","comments","getLeadingCommentRanges","text","pos","i","length","end","addFailure","AbstractWalker"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAkBA,OApBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,gBAAA,IAAAC,EAAAF,EAAAJ,KAAAO,cAAAC,KAGAX,EAAAY,UACAF,SAAA,wBACAG,YAAA,yEACAC,UAAA,oDACAC,mBAAA,oBACAC,WACAC,iBAAA,GACAC,KAAA,QACAC,gBAAA,GAGAnB,EAAAoB,eAAA,mCACApB,EArBA,CAsBCD,EAAAsB,MAAAC,cACD7B,EAAAO,OACA,IAAAS,EAAA,SAAAR,GAEA,SAAAQ,IACA,cAAAR,KAAAC,MAAAC,KAAAC,YAAAD,KAwCA,OA1CAR,EAAAU,UAAAI,EAAAR,GAIAQ,EAAAH,UAAAiB,KAAA,SAAAhB,GACA,IAAAiB,EAAArB,KACAsB,EAAA,SAAAC,GAIA,OAHAA,EAAAC,OAAA7B,EAAA8B,WAAAC,iBACAL,EAAAM,qBAAAJ,GAEA5B,EAAAiC,aAAAL,EAAAD,IAEA,OAAA3B,EAAAiC,aAAAxB,EAAAkB,IAEAhB,EAAAH,UAAAwB,qBAAA,SAAAJ,GACA,IAAAM,EAAAnC,EAAAoC,qBAAAP,GACA,QAAAf,IAAAqB,EAAA,CAKA,IAAAE,EAAAR,EAAAS,SAAAhC,KAAAI,YACA6B,EAAAtC,EAAAuC,8BAAAlC,KAAAI,WAAA2B,GAAAE,KACAE,EAAAxC,EAAAyC,wBAAApC,KAAAI,WAAAiC,KAAAd,EAAAe,KACA,QAAA9B,IAAA2B,EAEA,QAAAI,EAAAJ,EAAAK,OAAA,EAA6CD,GAAA,IAAQA,EAAA,CAGrD,GAFA5C,EAAAuC,8BAAAlC,KAAAI,WAAA+B,EAAAI,GAAAE,KACAR,KACAA,EAAA,EACA,OAEAF,EAAAI,EAAAI,GAAAD,IACAL,EAAAtC,EAAAuC,8BAAAlC,KAAAI,WAAA2B,GAAAE,KAGAtC,EAAAuC,8BAAAlC,KAAAI,WAAAyB,EAAAY,KAAAR,MACAA,EAAA,GAEAjC,KAAA0C,WAAAX,IAAAlC,EAAAoB,kBAGAX,EA3CA,CA4CCV,EAAA+C","file":"static/js/122.8bdc81c0.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithWalker(new NewlineBeforeReturnWalker(sourceFile, this.ruleName, undefined));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"newline-before-return\",\n        description: \"Enforces blank line before return when not the only line in the block.\",\n        rationale: \"Helps maintain a readable style in your codebase.\",\n        optionsDescription: \"Not configurable.\",\n        options: {},\n        optionExamples: [true],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Missing blank line before return\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar NewlineBeforeReturnWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(NewlineBeforeReturnWalker, _super);\n    function NewlineBeforeReturnWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NewlineBeforeReturnWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        var cb = function (node) {\n            if (node.kind === ts.SyntaxKind.ReturnStatement) {\n                _this.visitReturnStatement(node);\n            }\n            return ts.forEachChild(node, cb);\n        };\n        return ts.forEachChild(sourceFile, cb);\n    };\n    NewlineBeforeReturnWalker.prototype.visitReturnStatement = function (node) {\n        var prev = tsutils_1.getPreviousStatement(node);\n        if (prev === undefined) {\n            // return is not within a block (e.g. the only child of an IfStatement) or the first statement of the block\n            // no need to check for preceding newline\n            return;\n        }\n        var start = node.getStart(this.sourceFile);\n        var line = ts.getLineAndCharacterOfPosition(this.sourceFile, start).line;\n        var comments = ts.getLeadingCommentRanges(this.sourceFile.text, node.pos);\n        if (comments !== undefined) {\n            // check for blank lines between comments\n            for (var i = comments.length - 1; i >= 0; --i) {\n                var endLine = ts.getLineAndCharacterOfPosition(this.sourceFile, comments[i].end)\n                    .line;\n                if (endLine < line - 1) {\n                    return;\n                }\n                start = comments[i].pos;\n                line = ts.getLineAndCharacterOfPosition(this.sourceFile, start).line;\n            }\n        }\n        var prevLine = ts.getLineAndCharacterOfPosition(this.sourceFile, prev.end).line;\n        if (prevLine >= line - 1) {\n            // Previous statement is on the same or previous line\n            this.addFailure(start, start, Rule.FAILURE_STRING);\n        }\n    };\n    return NewlineBeforeReturnWalker;\n}(Lint.AbstractWalker));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/newlineBeforeReturnRule.js\n// module id = 2049\n// module chunks = 122"],"sourceRoot":""}