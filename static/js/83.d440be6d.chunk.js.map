{"version":3,"sources":["../node_modules/tslint/lib/rules/noReferenceImportRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","moduleReference","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","optionsDescription","options","type","typescriptOnly","Rules","AbstractRule","ctx","typeReferenceDirectives","length","imports","Set","findImports","map","name","text","_i","_a","ref","has","fileName","addFailure","pos","end"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KAEAE,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAkBA,OApBAN,EAAAQ,UAAAL,EAAAC,GAKAD,EAAAM,eAAA,SAAAC,GACA,+BAAAA,EAAA,4BAEAP,EAAAQ,UAAAN,MAAA,SAAAO,GACA,OAAAN,KAAAO,kBAAAD,EAAAE,IAGAX,EAAAY,UACAC,SAAA,sBACAC,YAAA,iEACAC,mBAAA,oBACAC,QAAA,KACAC,KAAA,QACAC,gBAAA,GAEAlB,EArBA,CADAF,EAAA,MAuBCqB,MAAAC,cAED,SAAAT,EAAAU,GACA,OAAAA,EAAAZ,WAAAa,wBAAAC,OAIA,IADA,IAAAC,EAAA,IAAAC,IAAA1B,EAAA2B,YAAAL,EAAAZ,WAAA,GAAAkB,IAAA,SAAAC,GAA+G,OAAAA,EAAAC,QAC/GC,EAAA,EAAAC,EAAAV,EAAAZ,WAAAa,wBAAiEQ,EAAAC,EAAAR,OAAgBO,IAAA,CACjF,IAAAE,EAAAD,EAAAD,GACAN,EAAAS,IAAAD,EAAAE,WACAb,EAAAc,WAAAH,EAAAI,IAAAJ,EAAAK,IAAArC,EAAAM,eAAA0B,EAAAE,YATAvC,EAAAK","file":"static/js/83.d440be6d.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (moduleReference) {\n        return \"No need to reference \\\"\" + moduleReference + \"\\\", since it is imported.\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-reference-import\",\n        description: 'Don\\'t `<reference types=\"foo\" />` if you import `foo` anyway.',\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        type: \"style\",\n        typescriptOnly: true,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    if (ctx.sourceFile.typeReferenceDirectives.length === 0) {\n        return;\n    }\n    var imports = new Set(tsutils_1.findImports(ctx.sourceFile, 3 /* AllStaticImports */).map(function (name) { return name.text; }));\n    for (var _i = 0, _a = ctx.sourceFile.typeReferenceDirectives; _i < _a.length; _i++) {\n        var ref = _a[_i];\n        if (imports.has(ref.fileName)) {\n            ctx.addFailure(ref.pos, ref.end, Rule.FAILURE_STRING(ref.fileName));\n        }\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noReferenceImportRule.js\n// module id = 2090\n// module chunks = 83"],"sourceRoot":""}