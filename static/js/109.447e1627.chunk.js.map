{"version":3,"sources":["../node_modules/tslint/lib/rules/noDuplicateImportsRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","module","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","Utils","dedent","__makeTemplateObject","rationale","optionsDescription","options","optionExamples","type","typescriptOnly","Rules","AbstractRule","ctx","walkWorker","statements","seen","_i","statements_1","length","statement","isImportDeclaration","isLiteralExpression","moduleSpecifier","text","has","addFailureAtNode","add","isModuleDeclaration","undefined","body","name","kind","SyntaxKind","StringLiteral","isExternalModule","Set"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAoDAC,EAAAC,EApDAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,eAAA,SAAAC,GACA,gCAAAA,EAAA,+BAEAP,EAAAQ,UAAAN,MAAA,SAAAO,GACA,OAAAN,KAAAO,kBAAAD,EAAAE,IAGAX,EAAAY,UACAC,SAAA,uBACAC,YAAAf,EAAAgB,MAAAC,OAAAvB,MAAAE,EAAAsB,sBAAA,4JACAC,UAAAnB,EAAAgB,MAAAC,OAAAtB,MAAAC,EAAAsB,sBAAA,oWACAE,mBAAA,mBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,kBACAC,gBAAA,GAEAvB,EAtBA,CAuBCD,EAAAyB,MAAAC,cAED,SAAAd,EAAAe,IAGA,SAAAC,EAAAD,EAAAE,EAAAC,GACA,QAAAC,EAAA,EAAAC,EAAAH,EAA+CE,EAAAC,EAAAC,OAA0BF,IAAA,CACzE,IAAAG,EAAAF,EAAAD,GACA,GAAAjC,EAAAqC,oBAAAD,IAAApC,EAAAsC,oBAAAF,EAAAG,iBAAA,CACA,IAAAC,EAAAJ,EAAAG,gBAAAC,KACAR,EAAAS,IAAAD,IACAX,EAAAa,iBAAAN,EAAAjC,EAAAM,eAAA+B,IAEAR,EAAAW,IAAAH,GAEAxC,EAAA4C,oBAAAR,SACAS,IAAAT,EAAAU,MACAV,EAAAW,KAAAC,OAAA/C,EAAAgD,WAAAC,eAIApB,EAAAD,EAAAO,EAAAU,KAAAf,WAAA9B,EAAAkD,iBAAAtB,EAAAjB,YAAAoB,EAAA,IAAAoB,MAlBAtB,CAAAD,IAAAjB,WAAAmB,WAAA,IAAAqB,KAFA1D,EAAAS","file":"static/js/109.447e1627.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.FAILURE_STRING = function (module) {\n        return \"Multiple imports from '\" + module + \"' can be combined into one.\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-duplicate-imports\",\n        description: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Disallows multiple import statements from the same module.\"], [\"\\n            Disallows multiple import statements from the same module.\"]))),\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            Using a single import statement per module will make the code clearer because you can see everything being imported\\n            from that module on one line.\"], [\"\\n            Using a single import statement per module will make the code clearer because you can see everything being imported\\n            from that module on one line.\"]))),\n        optionsDescription: \"Not configurable\",\n        options: null,\n        optionExamples: [true],\n        type: \"maintainability\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    walkWorker(ctx, ctx.sourceFile.statements, new Set());\n}\nfunction walkWorker(ctx, statements, seen) {\n    for (var _i = 0, statements_1 = statements; _i < statements_1.length; _i++) {\n        var statement = statements_1[_i];\n        if (tsutils_1.isImportDeclaration(statement) && tsutils_1.isLiteralExpression(statement.moduleSpecifier)) {\n            var text = statement.moduleSpecifier.text;\n            if (seen.has(text)) {\n                ctx.addFailureAtNode(statement, Rule.FAILURE_STRING(text));\n            }\n            seen.add(text);\n        }\n        if (tsutils_1.isModuleDeclaration(statement) &&\n            statement.body !== undefined &&\n            statement.name.kind === ts.SyntaxKind.StringLiteral) {\n            // If this is a module augmentation, re-use `seen` since those imports could be moved outside.\n            // If this is an ambient module, create a fresh `seen`\n            // because they should have separate imports to avoid becoming augmentations.\n            walkWorker(ctx, statement.body.statements, ts.isExternalModule(ctx.sourceFile) ? seen : new Set());\n        }\n    }\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noDuplicateImportsRule.js\n// module id = 2062\n// module chunks = 109"],"sourceRoot":""}