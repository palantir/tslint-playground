webpackJsonp([110],{2061:function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,n,i,a=o(1),s=o(843),u=o(54),l=o(1116),d="fromModules",p=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a.__extends(t,e),t.getNamedDefaultImport=function(e){for(var t=0,o=e.elements;t<o.length;t++){var r=o[t];if(void 0!==r.propertyName&&"default"===r.propertyName.text)return r.propertyName}return null},t.prototype.apply=function(e){return this.applyWithFunction(e,m,this.getRuleOptions(this.ruleArguments))},t.prototype.isFromModulesConfigOption=function(e){return"object"===typeof e&&void 0!==e[d]},t.prototype.getRuleOptions=function(e){var t,o,r=e.find(this.isFromModulesConfigOption);return void 0!==r&&"string"===typeof r[d]?((t={})[d]=new RegExp(r[d]),t):((o={})[d]=new RegExp("^\\./|^\\.\\./"),o)},t.metadata={ruleName:"no-default-import",description:"Disallows importing default members from certain ES6-style modules.",descriptionDetails:"Import named members instead.",rationale:l.Utils.dedent(i||(i=a.__makeTemplateObject(['\n            Named imports/exports [promote clarity](https://github.com/palantir/tslint/issues/1182#issue-151780453).\n            In addition, current tooling differs on the correct way to handle default imports/exports.\n            Avoiding them all together can help avoid tooling bugs and conflicts.\n\n            The rule supposed to narrow the scope of your changes in the case of monorepo.\n            Say, you have packages `A`, `B`, `C` and `utils`, where `A`, `B`, `C` dependends on `utils`,\n            which is full of default exports.\n            `"no-default-export"` requires you to remove default _export_ from `utils`, which leads to changes\n            in packages `A`, `B`, `C`. It\'s harder to get merged bigger changeset by various reasons (harder to get your code approved\n            due to a number of required reviewers; longer build time due to a number of affected packages)\n            and could result in ignored `"no-default-export"` rule in `utils\'`.\n\n            Unlike `"no-default-export"`, the rule requires you to repalce default _import_ with named only in `A` you work on,\n            and `utils` you import from.'],['\n            Named imports/exports [promote clarity](https://github.com/palantir/tslint/issues/1182#issue-151780453).\n            In addition, current tooling differs on the correct way to handle default imports/exports.\n            Avoiding them all together can help avoid tooling bugs and conflicts.\n\n            The rule supposed to narrow the scope of your changes in the case of monorepo.\n            Say, you have packages \\`A\\`, \\`B\\`, \\`C\\` and \\`utils\\`, where \\`A\\`, \\`B\\`, \\`C\\` dependends on \\`utils\\`,\n            which is full of default exports.\n            \\`"no-default-export"\\` requires you to remove default _export_ from \\`utils\\`, which leads to changes\n            in packages \\`A\\`, \\`B\\`, \\`C\\`. It\'s harder to get merged bigger changeset by various reasons (harder to get your code approved\n            due to a number of required reviewers; longer build time due to a number of affected packages)\n            and could result in ignored \\`"no-default-export"\\` rule in \\`utils\'\\`.\n\n            Unlike \\`"no-default-export"\\`, the rule requires you to repalce default _import_ with named only in \\`A\\` you work on,\n            and \\`utils\\` you import from.']))),optionsDescription:"optionsDescription",options:{type:"array",items:{type:"object",properties:(r={},r[d]={type:"string"},r),required:["fromModules"]}},optionExamples:[[!0,(n={},n[d]="^palantir-|^_internal-*|^\\./|^\\.\\./",n)]],type:"maintainability",typescriptOnly:!1},t.FAILURE_STRING="Import of default members from this module is forbidden. Import named member instead",t}(l.Rules.AbstractRule);function m(e){if(!e.sourceFile.isDeclarationFile&&u.isExternalModule(e.sourceFile))for(var t=0,o=e.sourceFile.statements;t<o.length;t++){var r=o[t];if(s.isImportDeclaration(r)){var n=r.importClause,i=r.moduleSpecifier;if(void 0!==n&&s.isStringLiteral(i)&&e.options[d].test(i.text))if(void 0!==n.name){var a=n.name;e.addFailureAtNode(a,p.FAILURE_STRING)}else if(void 0!==n.namedBindings&&s.isNamedImports(n.namedBindings)){var l=p.getNamedDefaultImport(n.namedBindings);null!==l&&e.addFailureAtNode(l,p.FAILURE_STRING)}}}}t.Rule=p}});
//# sourceMappingURL=110.d8a10589.chunk.js.map