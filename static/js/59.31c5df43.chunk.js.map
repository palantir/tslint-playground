{"version":3,"sources":["../node_modules/tslint/lib/rules/oneLineRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithWalker","OneLineWalker","ruleName","brace","ruleArguments","indexOf","catch","else","finally","whitespace","metadata","description","optionsDescription","Utils","dedent","templateObject_1","__makeTemplateObject","options","type","items","enum","minLength","maxLength","optionExamples","typescriptOnly","hasFix","WHITESPACE_FAILURE_STRING","Rules","AbstractRule","walk","_this","cb","node","kind","SyntaxKind","Block","isBlockLike","parent","CaseClause","statements","length","check","pos","end","CaseBlock","clauses","ModuleBlock","EnumDeclaration","members","name","InterfaceDeclaration","ClassDeclaration","ClassExpression","openBrace","getChildOfKind","OpenBraceToken","undefined","IfStatement","_a","thenStatement","elseStatement","TryStatement","_b","finallyBlock","catchClause","tryBlock","getChildAt","BinaryExpression","_c","operatorToken","right","EqualsToken","isObjectLiteralExpression","properties","VariableDeclaration","initializer","TypeAliasDeclaration","MappedType","TypeLiteral","forEachChild","range","tokenStart","isSameLine","addFailure","Replacement","replaceFromTo","appendText","AbstractWalker"],"mappings":"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","file":"static/js/59.31c5df43.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_BRACE = \"check-open-brace\";\nvar OPTION_CATCH = \"check-catch\";\nvar OPTION_ELSE = \"check-else\";\nvar OPTION_FINALLY = \"check-finally\";\nvar OPTION_WHITESPACE = \"check-whitespace\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithWalker(new OneLineWalker(sourceFile, this.ruleName, {\n            brace: this.ruleArguments.indexOf(OPTION_BRACE) !== -1,\n            catch: this.ruleArguments.indexOf(OPTION_CATCH) !== -1,\n            else: this.ruleArguments.indexOf(OPTION_ELSE) !== -1,\n            finally: this.ruleArguments.indexOf(OPTION_FINALLY) !== -1,\n            whitespace: this.ruleArguments.indexOf(OPTION_WHITESPACE) !== -1,\n        }));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"one-line\",\n        description: \"Requires the specified tokens to be on the same line as the expression preceding them.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Five arguments may be optionally provided:\\n\\n            * `\\\"\", \"\\\"` checks that `catch` is on the same line as the closing brace for `try`.\\n            * `\\\"\", \"\\\"` checks that `finally` is on the same line as the closing brace for `catch`.\\n            * `\\\"\", \"\\\"` checks that `else` is on the same line as the closing brace for `if`.\\n            * `\\\"\", \"\\\"` checks that an open brace falls on the same line as its preceding expression.\\n            * `\\\"\", \"\\\"` checks preceding whitespace for the specified tokens.\"], [\"\\n            Five arguments may be optionally provided:\\n\\n            * \\\\`\\\"\", \"\\\"\\\\` checks that \\\\`catch\\\\` is on the same line as the closing brace for \\\\`try\\\\`.\\n            * \\\\`\\\"\", \"\\\"\\\\` checks that \\\\`finally\\\\` is on the same line as the closing brace for \\\\`catch\\\\`.\\n            * \\\\`\\\"\", \"\\\"\\\\` checks that \\\\`else\\\\` is on the same line as the closing brace for \\\\`if\\\\`.\\n            * \\\\`\\\"\", \"\\\"\\\\` checks that an open brace falls on the same line as its preceding expression.\\n            * \\\\`\\\"\", \"\\\"\\\\` checks preceding whitespace for the specified tokens.\"])), OPTION_CATCH, OPTION_FINALLY, OPTION_ELSE, OPTION_BRACE, OPTION_WHITESPACE),\n        options: {\n            type: \"array\",\n            items: {\n                type: \"string\",\n                enum: [OPTION_CATCH, OPTION_FINALLY, OPTION_ELSE, OPTION_BRACE, OPTION_WHITESPACE],\n            },\n            minLength: 0,\n            maxLength: 5,\n        },\n        optionExamples: [[true, OPTION_CATCH, OPTION_FINALLY, OPTION_ELSE]],\n        type: \"style\",\n        typescriptOnly: false,\n        hasFix: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.WHITESPACE_FAILURE_STRING = \"missing whitespace\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar OneLineWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(OneLineWalker, _super);\n    function OneLineWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OneLineWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        var cb = function (node) {\n            switch (node.kind) {\n                case ts.SyntaxKind.Block:\n                    if (!tsutils_1.isBlockLike(node.parent) ||\n                        (node.parent.kind === ts.SyntaxKind.CaseClause &&\n                            node.parent.statements.length === 1)) {\n                        _this.check({ pos: node.pos, end: node.statements.pos });\n                    }\n                    break;\n                case ts.SyntaxKind.CaseBlock:\n                    _this.check({ pos: node.pos, end: node.clauses.pos });\n                    break;\n                case ts.SyntaxKind.ModuleBlock:\n                    _this.check({ pos: node.pos, end: node.statements.pos });\n                    break;\n                case ts.SyntaxKind.EnumDeclaration:\n                    _this.check({\n                        end: node.members.pos,\n                        pos: node.name.end,\n                    });\n                    break;\n                case ts.SyntaxKind.InterfaceDeclaration:\n                case ts.SyntaxKind.ClassDeclaration:\n                case ts.SyntaxKind.ClassExpression: {\n                    var openBrace = tsutils_1.getChildOfKind(node, ts.SyntaxKind.OpenBraceToken, sourceFile);\n                    if (openBrace !== undefined) {\n                        _this.check(openBrace);\n                    }\n                    break;\n                }\n                case ts.SyntaxKind.IfStatement: {\n                    var _a = node, thenStatement = _a.thenStatement, elseStatement = _a.elseStatement;\n                    if (elseStatement !== undefined && thenStatement.kind === ts.SyntaxKind.Block) {\n                        _this.check({ pos: thenStatement.end, end: elseStatement.pos }, \"else\");\n                    }\n                    break;\n                }\n                case ts.SyntaxKind.TryStatement: {\n                    var _b = node, finallyBlock = _b.finallyBlock, catchClause = _b.catchClause, tryBlock = _b.tryBlock;\n                    if (catchClause !== undefined) {\n                        _this.check(catchClause.getChildAt(0, sourceFile), \"catch\");\n                        if (finallyBlock !== undefined) {\n                            _this.check({ pos: catchClause.end, end: finallyBlock.pos }, \"finally\");\n                        }\n                    }\n                    else if (finallyBlock !== undefined) {\n                        _this.check({ pos: tryBlock.end, end: finallyBlock.pos }, \"finally\");\n                    }\n                    break;\n                }\n                case ts.SyntaxKind.BinaryExpression: {\n                    var _c = node, operatorToken = _c.operatorToken, right = _c.right;\n                    if (operatorToken.kind === ts.SyntaxKind.EqualsToken &&\n                        tsutils_1.isObjectLiteralExpression(right)) {\n                        _this.check({ pos: right.pos, end: right.properties.pos });\n                    }\n                    break;\n                }\n                case ts.SyntaxKind.VariableDeclaration: {\n                    var initializer = node.initializer;\n                    if (initializer !== undefined && tsutils_1.isObjectLiteralExpression(initializer)) {\n                        _this.check({ pos: initializer.pos, end: initializer.properties.pos });\n                    }\n                    break;\n                }\n                case ts.SyntaxKind.TypeAliasDeclaration: {\n                    var type = node.type;\n                    if (type.kind === ts.SyntaxKind.MappedType ||\n                        type.kind === ts.SyntaxKind.TypeLiteral) {\n                        _this.check(type.getChildAt(0, sourceFile));\n                    }\n                }\n            }\n            return ts.forEachChild(node, cb);\n        };\n        return ts.forEachChild(sourceFile, cb);\n    };\n    OneLineWalker.prototype.check = function (range, kind) {\n        var tokenStart = range.end - (kind === undefined ? 1 : kind.length);\n        if (this.options[kind === undefined ? \"brace\" : kind] &&\n            !tsutils_1.isSameLine(this.sourceFile, range.pos, tokenStart)) {\n            this.addFailure(tokenStart, range.end, \"misplaced \" + (kind === undefined ? \"opening brace\" : \"'\" + kind + \"'\"), Lint.Replacement.replaceFromTo(range.pos, tokenStart, this.options.whitespace ? \" \" : \"\"));\n        }\n        else if (this.options.whitespace && range.pos === tokenStart) {\n            this.addFailure(tokenStart, range.end, Rule.WHITESPACE_FAILURE_STRING, Lint.Replacement.appendText(range.pos, \" \"));\n        }\n    };\n    return OneLineWalker;\n}(Lint.AbstractWalker));\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/oneLineRule.js\n// module id = 2120\n// module chunks = 59"],"sourceRoot":""}