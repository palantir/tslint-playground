{"version":3,"sources":["../node_modules/tslint/lib/rules/useDefaultTypeParameterRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","utils_1","Rule","_super","apply","this","arguments","__extends","prototype","applyWithProgram","sourceFile","program","applyWithFunction","walk","undefined","getTypeChecker","metadata","ruleName","description","optionsDescription","options","optionExamples","type","typescriptOnly","requiresTypeInfo","FAILURE_STRING","Rules","TypedRule","ctx","checker","forEachChild","cb","node","argsAndParams","kind","SyntaxKind","CallExpression","NewExpression","TypeReference","ExpressionWithTypeArguments","decl","typeArguments","typeParameters","typeParamsFromType","typeName","expression","sig","getResolvedSignature","sigDecl","getDeclaration","typeParamsFromCall","getArgsAndParameters","_a","i","length","arg","param","default","getText","addFailureAtNode","Replacement","deleteFromTo","pos","end","checkArgsAndParameters","sym","symbol","isSymbolFlagSet","SymbolFlags","Alias","getAliasedSymbol","getSymbolAtLocation","declarations","find","isClassLikeDeclaration","isTypeAliasDeclaration","isInterfaceDeclaration"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,IACAK,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAkBA,OApBAT,EAAAW,UAAAL,EAAAC,GAIAD,EAAAM,UAAAC,iBAAA,SAAAC,EAAAC,GACA,OAAAN,KAAAO,kBAAAF,EAAAG,OAAAC,EAAAH,EAAAI,mBAGAb,EAAAc,UACAC,SAAA,6BACAC,YAAA,yFACAC,mBAAA,oBACAC,QAAA,KACAC,gBAAA,QACAC,KAAA,gBACAC,gBAAA,EACAC,kBAAA,GAGAtB,EAAAuB,eAAA,2EACAvB,EArBA,CAsBCF,EAAA0B,MAAAC,WAED,SAAAd,EAAAe,EAAAC,GACA,OAAA9B,EAAA+B,aAAAF,EAAAlB,WAAA,SAAAqB,EAAAC,GACA,IAAAC,EA0BA,SAAAD,EAAAH,GACA,OAAAG,EAAAE,MACA,KAAAnC,EAAAoC,WAAAC,eACA,KAAArC,EAAAoC,WAAAE,cACA,KAAAtC,EAAAoC,WAAAG,cACA,KAAAvC,EAAAoC,WAAAI,4BACA,IAAAC,EAAAR,EACAS,EAAAD,EAAAC,cACA,QAAA3B,IAAA2B,EACA,OAEA,IAAAC,EAAAF,EAAAN,OAAAnC,EAAAoC,WAAAG,cACAK,EAAAH,EAAAI,SAAAf,GACAW,EAAAN,OAAAnC,EAAAoC,WAAAI,4BACAI,EAAAH,EAAAK,WAAAhB,GAOA,SAAAG,EAAAH,GACA,IAAAiB,EAAAjB,EAAAkB,qBAAAf,GACAgB,OAAAlC,IAAAgC,OAAAhC,EAAAgC,EAAAG,iBACA,QAAAnC,IAAAkC,EACA,OAAAhB,EAAAE,OAAAnC,EAAAoC,WAAAE,cACAM,EAAAX,EAAAa,WAAAhB,QACAf,EAEA,YAAAA,IAAAkC,EAAAN,oBAAA5B,EAAAkC,EAAAN,eAdAQ,CAAAlB,EAAAH,GACA,YAAAf,IAAA4B,OAAA5B,GAA+D2B,gBAAAC,kBAC/D,QACA,QA5CAS,CAAAnB,EAAAH,GAIA,YAHAf,IAAAmB,GAKA,SAAAmB,GACA,IAAAX,EAAAW,EAAAX,cAAAC,EAAAU,EAAAV,eAEAW,EAAAZ,EAAAa,OAAA,EACAC,EAAAd,EAAAY,GACAG,EAAAd,EAAAW,QAEAvC,IAAA0C,EAAAC,SAAAD,EAAAC,QAAAC,YAAAH,EAAAG,WACA9B,EAAA+B,iBAAAJ,EAAArD,EAAAuB,eAGA,IAAA4B,EACArD,EAAA4D,YAAAC,aAAApB,EAAAqB,IAAA,EAAArB,EAAAsB,IAAA,GAGA/D,EAAA4D,YAAAC,aAAApB,EAAAY,EAAA,GAAAU,IAAAR,EAAAQ,MAnBAC,CAAA/B,GAEAlC,EAAA+B,aAAAE,EAAAD,KAqDA,SAAAY,EAAArB,EAAAO,GACA,IAAAoC,EAYA,SAAAC,EAAArC,GACA,QAAAf,IAAAoD,EACA,OAEA,OAAApE,EAAAqE,gBAAAD,EAAAnE,EAAAqE,YAAAC,OACAxC,EAAAyC,iBAAAJ,GACAA,EAlBAI,CAAAzC,EAAA0C,oBAAAjD,GAAAO,GACA,QAAAf,IAAAmD,QAAAnD,IAAAmD,EAAAO,aAGA,OAAAvE,EAAAwE,KAAAR,EAAAO,aAAA,SAAAhC,GACA,OAAA1C,EAAA4E,uBAAAlC,IACA1C,EAAA6E,uBAAAnC,IACA1C,EAAA8E,uBAAApC,GACAA,EAAAE,oBACA5B,IAtEApB,EAAAQ","file":"static/js/33.44fd40a6.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar utils_1 = require(\"../utils\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.applyWithProgram = function (sourceFile, program) {\n        return this.applyWithFunction(sourceFile, walk, undefined, program.getTypeChecker());\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"use-default-type-parameter\",\n        description: \"Warns if an explicitly specified type argument is the default for that type parameter.\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [\"true\"],\n        type: \"functionality\",\n        typescriptOnly: true,\n        requiresTypeInfo: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"This is the default value for this type parameter, so it can be omitted.\";\n    return Rule;\n}(Lint.Rules.TypedRule));\nexports.Rule = Rule;\nfunction walk(ctx, checker) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        var argsAndParams = getArgsAndParameters(node, checker);\n        if (argsAndParams !== undefined) {\n            checkArgsAndParameters(argsAndParams);\n        }\n        return ts.forEachChild(node, cb);\n    });\n    function checkArgsAndParameters(_a) {\n        var typeArguments = _a.typeArguments, typeParameters = _a.typeParameters;\n        // Just check the last one. Must specify previous type parameters if the last one is specified.\n        var i = typeArguments.length - 1;\n        var arg = typeArguments[i];\n        var param = typeParameters[i];\n        // TODO: would like checker.areTypesEquivalent. https://github.com/Microsoft/TypeScript/issues/13502\n        if (param.default !== undefined && param.default.getText() === arg.getText()) {\n            ctx.addFailureAtNode(arg, Rule.FAILURE_STRING, createFix());\n        }\n        function createFix() {\n            if (i === 0) {\n                return Lint.Replacement.deleteFromTo(typeArguments.pos - 1, typeArguments.end + 1);\n            }\n            else {\n                return Lint.Replacement.deleteFromTo(typeArguments[i - 1].end, arg.end);\n            }\n        }\n    }\n}\nfunction getArgsAndParameters(node, checker) {\n    switch (node.kind) {\n        case ts.SyntaxKind.CallExpression:\n        case ts.SyntaxKind.NewExpression:\n        case ts.SyntaxKind.TypeReference:\n        case ts.SyntaxKind.ExpressionWithTypeArguments:\n            var decl = node;\n            var typeArguments = decl.typeArguments;\n            if (typeArguments === undefined) {\n                return undefined;\n            }\n            var typeParameters = decl.kind === ts.SyntaxKind.TypeReference\n                ? typeParamsFromType(decl.typeName, checker)\n                : decl.kind === ts.SyntaxKind.ExpressionWithTypeArguments\n                    ? typeParamsFromType(decl.expression, checker)\n                    : typeParamsFromCall(node, checker);\n            return typeParameters === undefined ? undefined : { typeArguments: typeArguments, typeParameters: typeParameters };\n        default:\n            return undefined;\n    }\n}\nfunction typeParamsFromCall(node, checker) {\n    var sig = checker.getResolvedSignature(node);\n    var sigDecl = sig === undefined ? undefined : sig.getDeclaration();\n    if (sigDecl === undefined) {\n        return node.kind === ts.SyntaxKind.NewExpression\n            ? typeParamsFromType(node.expression, checker)\n            : undefined;\n    }\n    return sigDecl.typeParameters === undefined ? undefined : sigDecl.typeParameters;\n}\nfunction typeParamsFromType(type, checker) {\n    var sym = getAliasedSymbol(checker.getSymbolAtLocation(type), checker);\n    if (sym === undefined || sym.declarations === undefined) {\n        return undefined;\n    }\n    return utils_1.find(sym.declarations, function (decl) {\n        return tsutils_1.isClassLikeDeclaration(decl) ||\n            tsutils_1.isTypeAliasDeclaration(decl) ||\n            tsutils_1.isInterfaceDeclaration(decl)\n            ? decl.typeParameters\n            : undefined;\n    });\n}\nfunction getAliasedSymbol(symbol, checker) {\n    if (symbol === undefined) {\n        return undefined;\n    }\n    return tsutils_1.isSymbolFlagSet(symbol, ts.SymbolFlags.Alias)\n        ? checker.getAliasedSymbol(symbol)\n        : symbol;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/useDefaultTypeParameterRule.js\n// module id = 2155\n// module chunks = 33"],"sourceRoot":""}