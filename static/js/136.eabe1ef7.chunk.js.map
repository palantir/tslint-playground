{"version":3,"sources":["../node_modules/tslint/lib/rules/incrementDecrementRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","tsutils","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","options","allowPost","ruleArguments","indexOf","applyWithFunction","walk","metadata","description","optionExamples","items","enum","type","maxLength","minLength","optionsDescription","Utils","dedent","__makeTemplateObject","rationale","ruleName","typescriptOnly","FAILURE_STRING_FACTORY","newOperatorText","Rules","AbstractRule","context","complainOnNode","node","operator","SyntaxKind","PlusPlusToken","replacement","text","operand","getText","undefined","parent","isBinaryExpression","Replacement","replaceNode","createReplacement","failure","addFailureAtNode","forEachChild","callback","isPostfixUnaryExpression","isIncrementOrDecrementOperator","checkPostfixUnaryExpression","isPrefixUnaryExpression","checkPrefixUnaryExpression","MinusMinusToken"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IA6EAC,EAAAC,EA7EAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MAEAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KA6BA,OA/BAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,IAAAC,GACAC,WAAA,IAAAN,KAAAO,cAAAC,QARA,eAUA,OAAAR,KAAAS,kBAAAL,EAAAM,EAAAL,IAEAR,EAAAc,UACAC,YAAA,kDACAC,iBAAA,MAdA,eAeAR,SACAS,OACAC,MAjBA,cAkBAC,KAAA,UAEAC,UAAA,EACAC,UAAA,EACAF,KAAA,SAEAG,mBAAAvB,EAAAwB,MAAAC,OAAA/B,MAAAE,EAAA8B,sBAAA,6WAxBA,cAyBAC,UAAA3B,EAAAwB,MAAAC,OAAA9B,MAAAC,EAAA8B,sBAAA,0bACAE,SAAA,sBACAR,KAAA,QACAS,gBAAA,GAEA5B,EAAA6B,uBAAA,SAAAC,GACA,yBAAAA,EAAA,cAEA9B,EAhCA,CAiCCD,EAAAgC,MAAAC,cAED,SAAAnB,EAAAoB,GAQA,SAAAC,EAAAC,GACA,IAAAL,EAAAK,EAAAC,WAAAtC,EAAAuC,WAAAC,cAAA,cACAC,EATA,SAAAJ,EAAAL,GACA,IAAAU,EAAAL,EAAAM,QAAAC,QAAAT,EAAA1B,YAAA,IAAAuB,EAIA,YAHAa,IAAAR,EAAAS,QAAA/C,EAAAgD,mBAAAV,EAAAS,UACAJ,EAAA,IAAAA,EAAA,KAEAzC,EAAA+C,YAAAC,YAAAZ,EAAAK,GAIAQ,CAAAb,EAAAL,GACAmB,EAAAjD,EAAA6B,uBAAAC,GACAG,EAAAiB,iBAAAf,EAAAc,EAAAV,GAYA,OAAAzC,EAAAqD,aAAAlB,EAAA1B,WAAA,SAAA6C,EAAAjB,GAOA,OANAtC,EAAAwD,yBAAAlB,GAXA,SAAAA,IACAF,EAAAzB,QAAAC,WAAA6C,EAAAnB,EAAAC,WACAF,EAAAC,GAUAoB,CAAApB,GAEAtC,EAAA2D,wBAAArB,IATA,SAAAA,GACAmB,EAAAnB,EAAAC,WACAF,EAAAC,GAQAsB,CAAAtB,GAEArC,EAAAqD,aAAAhB,EAAAiB,KAGA,SAAAE,EAAAlB,GACA,OAAAA,IAAAtC,EAAAuC,WAAAC,eAAAF,IAAAtC,EAAAuC,WAAAqB,gBApCAnE,EAAAS","file":"static/js/136.eabe1ef7.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_ALLOW_POST = \"allow-post\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        var options = {\n            allowPost: this.ruleArguments.indexOf(OPTION_ALLOW_POST) !== -1,\n        };\n        return this.applyWithFunction(sourceFile, walk, options);\n    };\n    Rule.metadata = {\n        description: \"Enforces using explicit += 1 or -= 1 operators.\",\n        optionExamples: [true, [true, OPTION_ALLOW_POST]],\n        options: {\n            items: {\n                enum: [OPTION_ALLOW_POST],\n                type: \"string\",\n            },\n            maxLength: 1,\n            minLength: 0,\n            type: \"array\",\n        },\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            If no arguments are provided, both pre- and post-unary operators are banned.\\n            If `\\\"\", \"\\\"` is provided, post-unary operators will be allowed.\\n        \"], [\"\\n            If no arguments are provided, both pre- and post-unary operators are banned.\\n            If \\\\`\\\"\", \"\\\"\\\\` is provided, post-unary operators will be allowed.\\n        \"])), OPTION_ALLOW_POST),\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            It's easy to type +i or -i instead of --i or ++i, and won't always result in invalid code.\\n            Prefer standardizing small arithmetic operations with the explicit += and -= operators.\\n        \"], [\"\\n            It's easy to type +i or -i instead of --i or ++i, and won't always result in invalid code.\\n            Prefer standardizing small arithmetic operations with the explicit += and -= operators.\\n        \"]))),\n        ruleName: \"increment-decrement\",\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    Rule.FAILURE_STRING_FACTORY = function (newOperatorText) {\n        return \"Use an explicit \" + newOperatorText + \" operator.\";\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(context) {\n    function createReplacement(node, newOperatorText) {\n        var text = node.operand.getText(context.sourceFile) + \" \" + newOperatorText;\n        if (node.parent !== undefined && tsutils.isBinaryExpression(node.parent)) {\n            text = \"(\" + text + \")\";\n        }\n        return Lint.Replacement.replaceNode(node, text);\n    }\n    function complainOnNode(node) {\n        var newOperatorText = node.operator === ts.SyntaxKind.PlusPlusToken ? \"+= 1\" : \"-= 1\";\n        var replacement = createReplacement(node, newOperatorText);\n        var failure = Rule.FAILURE_STRING_FACTORY(newOperatorText);\n        context.addFailureAtNode(node, failure, replacement);\n    }\n    function checkPostfixUnaryExpression(node) {\n        if (!context.options.allowPost && isIncrementOrDecrementOperator(node.operator)) {\n            complainOnNode(node);\n        }\n    }\n    function checkPrefixUnaryExpression(node) {\n        if (isIncrementOrDecrementOperator(node.operator)) {\n            complainOnNode(node);\n        }\n    }\n    return ts.forEachChild(context.sourceFile, function callback(node) {\n        if (tsutils.isPostfixUnaryExpression(node)) {\n            checkPostfixUnaryExpression(node);\n        }\n        else if (tsutils.isPrefixUnaryExpression(node)) {\n            checkPrefixUnaryExpression(node);\n        }\n        return ts.forEachChild(node, callback);\n    });\n}\nfunction isIncrementOrDecrementOperator(operator) {\n    return operator === ts.SyntaxKind.PlusPlusToken || operator === ts.SyntaxKind.MinusMinusToken;\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/incrementDecrementRule.js\n// module id = 2035\n// module chunks = 136"],"sourceRoot":""}