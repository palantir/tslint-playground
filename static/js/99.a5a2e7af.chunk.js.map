{"version":3,"sources":["../node_modules/tslint/lib/rules/noInferrableTypesRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING_FACTORY","type","prototype","sourceFile","applyWithWalker","NoInferrableTypesWalker","ruleName","ignoreParameters","ruleArguments","indexOf","ignoreProperties","metadata","description","rationale","optionsDescription","Utils","dedent","templateObject_1","__makeTemplateObject","options","items","enum","minLength","maxLength","hasFix","optionExamples","typescriptOnly","Rules","AbstractRule","walk","_this","cb","node","_a","kind","SyntaxKind","Parameter","hasModifier","modifiers","ReadonlyKeyword","undefined","PropertyDeclaration","VariableDeclaration","shouldCheck","name","initializer","BooleanKeyword","TrueKeyword","FalseKeyword","NumberKeyword","isNumeric","StringKeyword","StringLiteral","NoSubstitutionTemplateLiteral","TemplateExpression","typeIsInferrable","fix","Replacement","deleteFromTo","end","addFailureAtNode","tokenToString","forEachChild","AbstractWalker"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MAGAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAoCA,OAtCAR,EAAAU,UAAAL,EAAAC,GAKAD,EAAAM,uBAAA,SAAAC,GACA,cAAAA,EAAA,8BAAAA,EAAA,oCAEAP,EAAAQ,UAAAN,MAAA,SAAAO,GACA,OAAAN,KAAAO,gBAAA,IAAAC,EAAAF,EAAAN,KAAAS,UACAC,kBAAA,IAAAV,KAAAW,cAAAC,QAbA,iBAcAC,kBAAA,IAAAb,KAAAW,cAAAC,QAbA,yBAiBAf,EAAAiB,UACAL,SAAA,sBACAM,YAAA,gHACAC,UAAA,2FACAC,mBAAArB,EAAAsB,MAAAC,OAAAC,MAAA5B,EAAA6B,sBAAA,moBAtBA,gBACA,qBAsBAC,SACAlB,KAAA,QACAmB,OACAnB,KAAA,SACAoB,MA3BA,gBACA,sBA4BAC,UAAA,EACAC,UAAA,GAEAC,QAAA,EACAC,iBACA,IACA,EAnCA,mBAoCA,EApCA,gBACA,sBAqCAxB,KAAA,aACAyB,gBAAA,GAEAhC,EAvCA,CAwCCD,EAAAkC,MAAAC,cACDzC,EAAAO,OACA,IA2DAuB,EA3DAZ,EAAA,SAAAV,GAEA,SAAAU,IACA,cAAAV,KAAAC,MAAAC,KAAAC,YAAAD,KAkBA,OApBAR,EAAAU,UAAAM,EAAAV,GAIAU,EAAAH,UAAA2B,KAAA,SAAA1B,GACA,IAAA2B,EAAAjC,KACAkC,EAAA,SAAAC,GACA,GAeA,SAAAA,EAAAC,GACA,IAAA1B,EAAA0B,EAAA1B,iBAAAG,EAAAuB,EAAAvB,iBACA,OAAAsB,EAAAE,MACA,KAAA1C,EAAA2C,WAAAC,UACA,OAAA7B,IACAhB,EAAA8C,YAAAL,EAAAM,UAAA9C,EAAA2C,WAAAI,oBAEA7B,QAAA8B,IAAAR,EAAAM,WACA,KAAA9C,EAAA2C,WAAAM,oBACA,OAAA/B,IAAAnB,EAAA8C,YAAAL,EAAAM,UAAA9C,EAAA2C,WAAAI,iBACA,KAAA/C,EAAA2C,WAAAO,oBACA,SACA,QACA,UA5BAC,CAAAX,EAAAF,EAAAX,SAAA,CACA,IAAAyB,EAAAZ,EAAAY,KAAA3C,EAAA+B,EAAA/B,KAAA4C,EAAAb,EAAAa,YACA,QAAAL,IAAAvC,QACAuC,IAAAK,GA4BA,SAAA5C,EAAA4C,GACA,OAAA5C,GACA,KAAAT,EAAA2C,WAAAW,eACA,OAAAD,EAAAX,OAAA1C,EAAA2C,WAAAY,aACAF,EAAAX,OAAA1C,EAAA2C,WAAAa,aACA,KAAAxD,EAAA2C,WAAAc,cACA,OAAAxD,EAAAyD,UAAAL,GACA,KAAArD,EAAA2C,WAAAgB,cACA,OAAAN,EAAAX,MACA,KAAA1C,EAAA2C,WAAAiB,cACA,KAAA5D,EAAA2C,WAAAkB,8BACA,KAAA7D,EAAA2C,WAAAmB,mBACA,SACA,QACA,SAEA,QACA,UA5CAC,CAAAtD,EAAAiC,KAAAW,GAAA,CACA,IAAAW,EAAA/D,EAAAgE,YAAAC,aAAAd,EAAAe,IAAA1D,EAAA0D,KACA7B,EAAA8B,iBAAA3D,EAAAP,EAAAM,uBAAAR,EAAAqE,cAAA5D,EAAAiC,OAAAsB,IAGA,OAAAhE,EAAAsE,aAAA9B,EAAAD,IAEA,OAAAvC,EAAAsE,aAAA3D,EAAA4B,IAEA1B,EArBA,CAsBCZ,EAAAsE","file":"static/js/99.a5a2e7af.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2015 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_IGNORE_PARMS = \"ignore-params\";\nvar OPTION_IGNORE_PROPERTIES = \"ignore-properties\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING_FACTORY = function (type) {\n        return \"Type \" + type + \" trivially inferred from a \" + type + \" literal, remove type annotation\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithWalker(new NoInferrableTypesWalker(sourceFile, this.ruleName, {\n            ignoreParameters: this.ruleArguments.indexOf(OPTION_IGNORE_PARMS) !== -1,\n            ignoreProperties: this.ruleArguments.indexOf(OPTION_IGNORE_PROPERTIES) !== -1,\n        }));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-inferrable-types\",\n        description: \"Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean.\",\n        rationale: \"Explicit types where they can be easily inferred by the compiler make code more verbose.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Two arguments may be optionally provided:\\n\\n            * `\", \"` allows specifying an inferrable type annotation for function params.\\n            This can be useful when combining with the `typedef` rule.\\n            * `\", \"` allows specifying an inferrable type annotation for class properties.\"], [\"\\n            Two arguments may be optionally provided:\\n\\n            * \\\\`\", \"\\\\` allows specifying an inferrable type annotation for function params.\\n            This can be useful when combining with the \\\\`typedef\\\\` rule.\\n            * \\\\`\", \"\\\\` allows specifying an inferrable type annotation for class properties.\"])), OPTION_IGNORE_PARMS, OPTION_IGNORE_PROPERTIES),\n        options: {\n            type: \"array\",\n            items: {\n                type: \"string\",\n                enum: [OPTION_IGNORE_PARMS, OPTION_IGNORE_PROPERTIES],\n            },\n            minLength: 0,\n            maxLength: 2,\n        },\n        hasFix: true,\n        optionExamples: [\n            true,\n            [true, OPTION_IGNORE_PARMS],\n            [true, OPTION_IGNORE_PARMS, OPTION_IGNORE_PROPERTIES],\n        ],\n        type: \"typescript\",\n        typescriptOnly: true,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar NoInferrableTypesWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(NoInferrableTypesWalker, _super);\n    function NoInferrableTypesWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoInferrableTypesWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        var cb = function (node) {\n            if (shouldCheck(node, _this.options)) {\n                var name = node.name, type = node.type, initializer = node.initializer;\n                if (type !== undefined &&\n                    initializer !== undefined &&\n                    typeIsInferrable(type.kind, initializer)) {\n                    var fix = Lint.Replacement.deleteFromTo(name.end, type.end);\n                    _this.addFailureAtNode(type, Rule.FAILURE_STRING_FACTORY(ts.tokenToString(type.kind)), fix);\n                }\n            }\n            return ts.forEachChild(node, cb);\n        };\n        return ts.forEachChild(sourceFile, cb);\n    };\n    return NoInferrableTypesWalker;\n}(Lint.AbstractWalker));\nfunction shouldCheck(node, _a) {\n    var ignoreParameters = _a.ignoreParameters, ignoreProperties = _a.ignoreProperties;\n    switch (node.kind) {\n        case ts.SyntaxKind.Parameter:\n            return (!ignoreParameters &&\n                !tsutils_1.hasModifier(node.modifiers, ts.SyntaxKind.ReadonlyKeyword) &&\n                // \"ignore-properties\" also works for parameter properties\n                !(ignoreProperties && node.modifiers !== undefined));\n        case ts.SyntaxKind.PropertyDeclaration:\n            return !ignoreProperties && !tsutils_1.hasModifier(node.modifiers, ts.SyntaxKind.ReadonlyKeyword);\n        case ts.SyntaxKind.VariableDeclaration:\n            return true;\n        default:\n            return false;\n    }\n}\nfunction typeIsInferrable(type, initializer) {\n    switch (type) {\n        case ts.SyntaxKind.BooleanKeyword:\n            return (initializer.kind === ts.SyntaxKind.TrueKeyword ||\n                initializer.kind === ts.SyntaxKind.FalseKeyword);\n        case ts.SyntaxKind.NumberKeyword:\n            return Lint.isNumeric(initializer);\n        case ts.SyntaxKind.StringKeyword:\n            switch (initializer.kind) {\n                case ts.SyntaxKind.StringLiteral:\n                case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n                case ts.SyntaxKind.TemplateExpression:\n                    return true;\n                default:\n                    return false;\n            }\n        default:\n            return false;\n    }\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noInferrableTypesRule.js\n// module id = 2074\n// module chunks = 99"],"sourceRoot":""}