{"version":3,"sources":["../node_modules/tslint/lib/rules/trailingCommaRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","defaultOptions","fillOptions","arrays","functions","imports","objects","typeLiterals","normalize","__assign","metadataOptionShape","anyOf","type","enum","properties","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","options","multiline","singleline","specCompliant","esSpecCompliant","normalizeOptions","ruleArguments","applyWithWalker","TrailingCommaWalker","ruleName","isEnabled","call","length","metadata","description","Utils","dedent","templateObject_1","__makeTemplateObject","hasFix","optionsDescription","templateObject_2","additionalProperties","optionExamples","typescriptOnly","FAILURE_STRING_NEVER","FAILURE_STRING_FORBIDDEN","FAILURE_STRING_ALWAYS","Rules","AbstractRule","walk","_this","cb","node","kind","SyntaxKind","ArrayLiteralExpression","checkList","elements","end","isArrayRest","ArrayBindingPattern","isDestructuringRest","ObjectBindingPattern","NamedImports","noRest","NamedExports","ObjectLiteralExpression","isObjectRest","EnumDeclaration","members","NewExpression","undefined","CallExpression","ArrowFunction","getChildOfKind","OpenParenToken","Constructor","FunctionDeclaration","FunctionExpression","MethodDeclaration","SetAccessor","MethodSignature","ConstructSignature","ConstructorType","FunctionType","CallSignature","parameters","CloseParenToken","isRestParameter","TypeLiteral","checkTypeLiteral","forEachChild","sourceText","text","_i","members_1","hasTrailingComma","checkComma","list","closeElementPos","optionKey","isRest","closeTokenPos","last","addFailureAt","Replacement","deleteText","option","isSameLine","appendText","AbstractWalker","dotDotDotToken","BindingElement","SpreadAssignment","isReassignmentTarget","expression","SpreadElement"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAAC,EAAA,UACA,SAAAA,EAAAP,GACA,OACAQ,OAAAR,EACAD,QAAAC,EACAS,UAAAT,EACAU,QAAAV,EACAW,QAAAX,EACAY,aAAAZ,GAUA,SAAAa,EAAAb,GACA,wBAAAA,EAAAO,EAAAP,GAAAC,EAAAa,YAA+ER,EAAAN,GAG/E,IAAAe,GACAC,QAEAC,KAAA,SACAC,MAAA,oBAGAD,KAAA,SACAE,WAAAZ,GACAU,KAAA,SACAC,MAAA,gCAMAE,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KA8CA,OAhDAtB,EAAAwB,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,IAAAC,EAjCA,SAAAA,GACA,OACAC,UAAAhB,EAAAe,EAAAC,WACAC,WAAAjB,EAAAe,EAAAE,YACAC,gBAAAH,EAAAI,iBA6BAC,CAAAV,KAAAW,cAAA,IACA,OAAAX,KAAAY,gBAAA,IAAAC,EAAAT,EAAAJ,KAAAc,SAAAT,KAEAR,EAAAM,UAAAY,UAAA,WACA,OAAAjB,EAAAK,UAAAY,UAAAC,KAAAhB,OAAA,IAAAA,KAAAW,cAAAM,QAGApB,EAAAqB,UACAJ,SAAA,iBACAK,YAAArC,EAAAsC,MAAAC,OAAAC,MAAA5C,EAAA6C,sBAAA,wYACAC,QAAA,EACAC,mBAAA3C,EAAAsC,MAAAC,OAAAK,MAAAhD,EAAA6C,sBAAA,mqCAAqd,6uCACrdlB,SACAX,KAAA,SACAE,YACAU,UAAAd,EACAe,WAAAf,EACAiB,iBAAkCf,KAAA,YAElCiC,sBAAA,GAEAC,kBACA,GAAoBtB,UAAA,SAAAC,WAAA,YAEpB,GAEAD,WACAlB,QAAA,SACAH,OAAA,SACAC,UAAA,QACAG,aAAA,UAEAoB,iBAAA,KAIAf,KAAA,kBACAmC,gBAAA,GAGAhC,EAAAiC,qBAAA,6BACAjC,EAAAkC,yBAAA,2BACAlC,EAAAmC,sBAAA,yBACAnC,EAjDA,CAkDCf,EAAAmD,MAAAC,cACD1D,EAAAqB,OACA,IA8HAyB,EAAAI,EA9HAb,EAAA,SAAAf,GAEA,SAAAe,IACA,cAAAf,KAAAC,MAAAC,KAAAC,YAAAD,KA0GA,OA5GAtB,EAAAwB,UAAAW,EAAAf,GAIAe,EAAAV,UAAAgC,KAAA,SAAA/B,GACA,IAAAgC,EAAApC,KACAqC,EAAA,SAAAC,GACA,OAAAA,EAAAC,MACA,KAAA1D,EAAA2D,WAAAC,uBACAL,EAAAM,UAAAJ,EAAAK,SAAAL,EAAAM,IAAA,SAAAC,GACA,MACA,KAAAhE,EAAA2D,WAAAM,oBACAV,EAAAM,UAAAJ,EAAAK,SAAAL,EAAAM,IAAA,SAAAG,GACA,MACA,KAAAlE,EAAA2D,WAAAQ,qBACAZ,EAAAM,UAAAJ,EAAAK,SAAAL,EAAAM,IAAA,UAAAG,GACA,MACA,KAAAlE,EAAA2D,WAAAS,aACAb,EAAAM,UAAAJ,EAAAK,SAAAL,EAAAM,IAAA,UAAAM,GACA,MACA,KAAArE,EAAA2D,WAAAW,aACAf,EAAAM,UAAAJ,EAAAK,SAAAL,EAAAM,IAAA,UAAAM,GACA,MACA,KAAArE,EAAA2D,WAAAY,wBACAhB,EAAAM,UAAAJ,EAAA1C,WAAA0C,EAAAM,IAAA,UAAAS,GACA,MACA,KAAAxE,EAAA2D,WAAAc,gBACAlB,EAAAM,UAAAJ,EAAAiB,QAAAjB,EAAAM,IAAA,UAAAM,GACA,MACA,KAAArE,EAAA2D,WAAAgB,cACA,QAAAC,IAAAnB,EAAArC,UACA,MAGA,KAAApB,EAAA2D,WAAAkB,eACAtB,EAAAM,UAAAJ,EAAArC,UAAAqC,EAAAM,IAAA,YAAAM,GACA,MACA,KAAArE,EAAA2D,WAAAmB,cAEA,QACAF,IADA7E,EAAAgF,eAAAtB,EAAAzD,EAAA2D,WAAAqB,eAAAzB,EAAAhC,YAEA,MAGA,KAAAvB,EAAA2D,WAAAsB,YACA,KAAAjF,EAAA2D,WAAAuB,oBACA,KAAAlF,EAAA2D,WAAAwB,mBACA,KAAAnF,EAAA2D,WAAAyB,kBACA,KAAApF,EAAA2D,WAAA0B,YACA,KAAArF,EAAA2D,WAAA2B,gBACA,KAAAtF,EAAA2D,WAAA4B,mBACA,KAAAvF,EAAA2D,WAAA6B,gBACA,KAAAxF,EAAA2D,WAAA8B,aACA,KAAAzF,EAAA2D,WAAA+B,cACAnC,EAAAM,UAAAJ,EAAAkC,WAAA5F,EAAAgF,eAAAtB,EAAAzD,EAAA2D,WAAAiC,gBAAArC,EAAAhC,YAAAwC,IAAA,YAAA8B,GACA,MACA,KAAA7F,EAAA2D,WAAAmC,YACAvC,EAAAwC,iBAAAtC,GAIA,OAAAzD,EAAAgG,aAAAvC,EAAAD,IAEA,OAAAxD,EAAAgG,aAAAzE,EAAAiC,IAEAxB,EAAAV,UAAAyE,iBAAA,SAAAtC,GACA,IAAAiB,EAAAjB,EAAAiB,QACA,OAAAA,EAAAtC,OAAA,CAIA,IADA,IAAA6D,EAAA9E,KAAAI,WAAA2E,KACAC,EAAA,EAAAC,EAAA1B,EAA6CyB,EAAAC,EAAAhE,OAAuB+D,IAAA,CAGpE,SAAAF,EAFAG,EAAAD,GAEApC,IAAA,GACA,OAIA,IAAAsC,EAAA,MAAAJ,EAAAvB,EAAAX,IAAA,GACA,OAAA5C,KAAAmF,WAAAD,EAAA3B,EAAAjB,EAAAM,IAAA,eAAAM,KAEArC,EAAAV,UAAAuC,UAAA,SAAA0C,EAAAC,EAAAC,EAAAC,GACA,OAAAH,EAAAnE,OAGA,OAAAjB,KAAAmF,WAAAC,EAAAF,iBAAAE,EAAAC,EAAAC,EAAAC,IAGA1E,EAAAV,UAAAgF,WAAA,SAAAD,EAAAE,EAAAI,EAAAF,EAAAC,GACA,IAAAE,EAAAL,IAAAnE,OAAA,GACA,GAAAjB,KAAAK,QAAAG,eAAA+E,EAAAE,GACAP,GACAlF,KAAA0F,aAAAN,EAAAxC,IAAA,IAAA/C,EAAAkC,yBAAAjD,EAAA6G,YAAAC,WAAAR,EAAAxC,IAAA,UAFA,CAMA,IAGAiD,GAHAjH,EAAAkH,WAAA9F,KAAAI,WAAAqF,EAAA7C,IAAA4C,GACAxF,KAAAK,QAAAE,WACAP,KAAAK,QAAAC,WACAgF,GACA,WAAAO,GAAAX,EAGA,UAAAW,GAAAX,GACAlF,KAAA0F,aAAAN,EAAAxC,IAAA,IAAA/C,EAAAiC,qBAAAhD,EAAA6G,YAAAC,WAAAR,EAAAxC,IAAA,MAHA5C,KAAA0F,aAAAN,EAAAxC,IAAA,EAAA/C,EAAAmC,sBAAAlD,EAAA6G,YAAAI,WAAAX,EAAAxC,IAAA,QAMA/B,EA7GA,CA8GC/B,EAAAkH,gBACD,SAAAtB,EAAApC,GACA,YAAAmB,IAAAnB,EAAA2D,eAEA,SAAAlD,EAAAT,GACA,OAAAA,EAAAC,OAAA1D,EAAA2D,WAAA0D,qBAAAzC,IAAAnB,EAAA2D,eAEA,SAAA5C,EAAAf,GACA,OAAAA,EAAAC,OAAA1D,EAAA2D,WAAA2D,kBAAAvH,EAAAwH,qBAAA9D,EAAA+D,YAEA,SAAAxD,EAAAP,GACA,OAAAA,EAAAC,OAAA1D,EAAA2D,WAAA8D,eAAA1H,EAAAwH,qBAAA9D,GAEA,SAAAY,IACA","file":"static/js/40.319c3e92.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar defaultOptions = fillOptions(\"ignore\");\nfunction fillOptions(value) {\n    return {\n        arrays: value,\n        exports: value,\n        functions: value,\n        imports: value,\n        objects: value,\n        typeLiterals: value,\n    };\n}\nfunction normalizeOptions(options) {\n    return {\n        multiline: normalize(options.multiline),\n        singleline: normalize(options.singleline),\n        specCompliant: !!options.esSpecCompliant,\n    };\n}\nfunction normalize(value) {\n    return typeof value === \"string\" ? fillOptions(value) : tslib_1.__assign({}, defaultOptions, value);\n}\n/* tslint:disable:object-literal-sort-keys */\nvar metadataOptionShape = {\n    anyOf: [\n        {\n            type: \"string\",\n            enum: [\"always\", \"never\"],\n        },\n        {\n            type: \"object\",\n            properties: fillOptions({\n                type: \"string\",\n                enum: [\"always\", \"never\", \"ignore\"],\n            }),\n        },\n    ],\n};\n/* tslint:enable:object-literal-sort-keys */\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        var options = normalizeOptions(this.ruleArguments[0]);\n        return this.applyWithWalker(new TrailingCommaWalker(sourceFile, this.ruleName, options));\n    };\n    Rule.prototype.isEnabled = function () {\n        return _super.prototype.isEnabled.call(this) && this.ruleArguments.length !== 0;\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"trailing-comma\",\n        description: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Requires or disallows trailing commas in array and object literals, destructuring assignments, function typings,\\n            named imports and exports and function parameters.\"], [\"\\n            Requires or disallows trailing commas in array and object literals, destructuring assignments, function typings,\\n            named imports and exports and function parameters.\"]))),\n        hasFix: true,\n        optionsDescription: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            One argument which is an object with the keys `multiline` and `singleline`.\\n            Both can be set to a string (`\\\"always\\\"` or `\\\"never\\\"`) or an object.\\n\\n            The object can contain any of the following keys: `\\\"arrays\\\"`, `\\\"objects\\\"`, `\\\"functions\\\"`,\\n            `\\\"imports\\\"`, `\\\"exports\\\"`, and `\\\"typeLiterals\\\"`; each key can have one of the following\\n            values: `\\\"always\\\"`, `\\\"never\\\"`, and `\\\"ignore\\\"`. Any missing keys will default to `\\\"ignore\\\"`.\\n\\n            * `\\\"multiline\\\"` checks multi-line object literals.\\n            * `\\\"singleline\\\"` checks single-line object literals.\\n\\n            An array is considered \\\"multiline\\\" if its closing bracket is on a line\\n            after the last array element. The same general logic is followed for\\n            object literals, function typings, named import statements\\n            and function parameters.\\n\\n            To align this rule with the ECMAScript specification that is implemented in modern JavaScript VMs,\\n            there is a third option `esSpecCompliant`. Set this option to `true` to disallow trailing comma on\\n            object and array rest and rest parameters.\\n        \"], [\"\\n            One argument which is an object with the keys \\\\`multiline\\\\` and \\\\`singleline\\\\`.\\n            Both can be set to a string (\\\\`\\\"always\\\"\\\\` or \\\\`\\\"never\\\"\\\\`) or an object.\\n\\n            The object can contain any of the following keys: \\\\`\\\"arrays\\\"\\\\`, \\\\`\\\"objects\\\"\\\\`, \\\\`\\\"functions\\\"\\\\`,\\n            \\\\`\\\"imports\\\"\\\\`, \\\\`\\\"exports\\\"\\\\`, and \\\\`\\\"typeLiterals\\\"\\\\`; each key can have one of the following\\n            values: \\\\`\\\"always\\\"\\\\`, \\\\`\\\"never\\\"\\\\`, and \\\\`\\\"ignore\\\"\\\\`. Any missing keys will default to \\\\`\\\"ignore\\\"\\\\`.\\n\\n            * \\\\`\\\"multiline\\\"\\\\` checks multi-line object literals.\\n            * \\\\`\\\"singleline\\\"\\\\` checks single-line object literals.\\n\\n            An array is considered \\\"multiline\\\" if its closing bracket is on a line\\n            after the last array element. The same general logic is followed for\\n            object literals, function typings, named import statements\\n            and function parameters.\\n\\n            To align this rule with the ECMAScript specification that is implemented in modern JavaScript VMs,\\n            there is a third option \\\\`esSpecCompliant\\\\`. Set this option to \\\\`true\\\\` to disallow trailing comma on\\n            object and array rest and rest parameters.\\n        \"]))),\n        options: {\n            type: \"object\",\n            properties: {\n                multiline: metadataOptionShape,\n                singleline: metadataOptionShape,\n                esSpecCompliant: { type: \"boolean\" },\n            },\n            additionalProperties: false,\n        },\n        optionExamples: [\n            [true, { multiline: \"always\", singleline: \"never\" }],\n            [\n                true,\n                {\n                    multiline: {\n                        objects: \"always\",\n                        arrays: \"always\",\n                        functions: \"never\",\n                        typeLiterals: \"ignore\",\n                    },\n                    esSpecCompliant: true,\n                },\n            ],\n        ],\n        type: \"maintainability\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING_NEVER = \"Unnecessary trailing comma\";\n    Rule.FAILURE_STRING_FORBIDDEN = \"Forbidden trailing comma\";\n    Rule.FAILURE_STRING_ALWAYS = \"Missing trailing comma\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar TrailingCommaWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(TrailingCommaWalker, _super);\n    function TrailingCommaWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TrailingCommaWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        var cb = function (node) {\n            switch (node.kind) {\n                case ts.SyntaxKind.ArrayLiteralExpression:\n                    _this.checkList(node.elements, node.end, \"arrays\", isArrayRest);\n                    break;\n                case ts.SyntaxKind.ArrayBindingPattern:\n                    _this.checkList(node.elements, node.end, \"arrays\", isDestructuringRest);\n                    break;\n                case ts.SyntaxKind.ObjectBindingPattern:\n                    _this.checkList(node.elements, node.end, \"objects\", isDestructuringRest);\n                    break;\n                case ts.SyntaxKind.NamedImports:\n                    _this.checkList(node.elements, node.end, \"imports\", noRest);\n                    break;\n                case ts.SyntaxKind.NamedExports:\n                    _this.checkList(node.elements, node.end, \"exports\", noRest);\n                    break;\n                case ts.SyntaxKind.ObjectLiteralExpression:\n                    _this.checkList(node.properties, node.end, \"objects\", isObjectRest);\n                    break;\n                case ts.SyntaxKind.EnumDeclaration:\n                    _this.checkList(node.members, node.end, \"objects\", noRest);\n                    break;\n                case ts.SyntaxKind.NewExpression:\n                    if (node.arguments === undefined) {\n                        break;\n                    }\n                // falls through\n                case ts.SyntaxKind.CallExpression:\n                    _this.checkList(node.arguments, node.end, \"functions\", noRest);\n                    break;\n                case ts.SyntaxKind.ArrowFunction:\n                    // don't check arrow functions without parens around the parameter\n                    if (tsutils_1.getChildOfKind(node, ts.SyntaxKind.OpenParenToken, _this.sourceFile) ===\n                        undefined) {\n                        break;\n                    }\n                // falls through\n                case ts.SyntaxKind.Constructor:\n                case ts.SyntaxKind.FunctionDeclaration:\n                case ts.SyntaxKind.FunctionExpression:\n                case ts.SyntaxKind.MethodDeclaration:\n                case ts.SyntaxKind.SetAccessor:\n                case ts.SyntaxKind.MethodSignature:\n                case ts.SyntaxKind.ConstructSignature:\n                case ts.SyntaxKind.ConstructorType:\n                case ts.SyntaxKind.FunctionType:\n                case ts.SyntaxKind.CallSignature:\n                    _this.checkList(node.parameters, tsutils_1.getChildOfKind(node, ts.SyntaxKind.CloseParenToken, _this.sourceFile).end, \"functions\", isRestParameter);\n                    break;\n                case ts.SyntaxKind.TypeLiteral:\n                    _this.checkTypeLiteral(node);\n                    break;\n                default:\n            }\n            return ts.forEachChild(node, cb);\n        };\n        return ts.forEachChild(sourceFile, cb);\n    };\n    TrailingCommaWalker.prototype.checkTypeLiteral = function (node) {\n        var members = node.members;\n        if (members.length === 0) {\n            return;\n        }\n        var sourceText = this.sourceFile.text;\n        for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {\n            var member = members_1[_i];\n            // PropertySignature in TypeLiteral can end with semicolon or comma. If one ends with a semicolon don't check for trailing comma\n            if (sourceText[member.end - 1] === \";\") {\n                return;\n            }\n        }\n        // The trailing comma is part of the last member and therefore not present as hasTrailingComma on the NodeArray\n        var hasTrailingComma = sourceText[members.end - 1] === \",\";\n        return this.checkComma(hasTrailingComma, members, node.end, \"typeLiterals\", noRest);\n    };\n    TrailingCommaWalker.prototype.checkList = function (list, closeElementPos, optionKey, isRest) {\n        if (list.length === 0) {\n            return;\n        }\n        return this.checkComma(list.hasTrailingComma, list, closeElementPos, optionKey, isRest);\n    };\n    /* Expects `list.length !== 0` */\n    TrailingCommaWalker.prototype.checkComma = function (hasTrailingComma, list, closeTokenPos, optionKey, isRest) {\n        var last = list[list.length - 1];\n        if (this.options.specCompliant && isRest(last)) {\n            if (hasTrailingComma) {\n                this.addFailureAt(list.end - 1, 1, Rule.FAILURE_STRING_FORBIDDEN, Lint.Replacement.deleteText(list.end - 1, 1));\n            }\n            return;\n        }\n        var options = tsutils_1.isSameLine(this.sourceFile, last.end, closeTokenPos)\n            ? this.options.singleline\n            : this.options.multiline;\n        var option = options[optionKey];\n        if (option === \"always\" && !hasTrailingComma) {\n            this.addFailureAt(list.end, 0, Rule.FAILURE_STRING_ALWAYS, Lint.Replacement.appendText(list.end, \",\"));\n        }\n        else if (option === \"never\" && hasTrailingComma) {\n            this.addFailureAt(list.end - 1, 1, Rule.FAILURE_STRING_NEVER, Lint.Replacement.deleteText(list.end - 1, 1));\n        }\n    };\n    return TrailingCommaWalker;\n}(Lint.AbstractWalker));\nfunction isRestParameter(node) {\n    return node.dotDotDotToken !== undefined;\n}\nfunction isDestructuringRest(node) {\n    return node.kind === ts.SyntaxKind.BindingElement && node.dotDotDotToken !== undefined;\n}\nfunction isObjectRest(node) {\n    return node.kind === ts.SyntaxKind.SpreadAssignment && tsutils_1.isReassignmentTarget(node.expression);\n}\nfunction isArrayRest(node) {\n    return node.kind === ts.SyntaxKind.SpreadElement && tsutils_1.isReassignmentTarget(node);\n}\nfunction noRest() {\n    return false;\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/trailingCommaRule.js\n// module id = 2146\n// module chunks = 40"],"sourceRoot":""}