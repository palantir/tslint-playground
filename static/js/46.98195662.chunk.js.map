{"version":3,"sources":["../node_modules/tslint/lib/rules/semicolonRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","utils","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","options","boundClassMethods","ruleArguments","indexOf","interfaces","Walker","SemicolonAlwaysWalker","SemicolonNeverWalker","applyWithWalker","ruleName","metadata","description","hasFix","optionsDescription","Utils","dedent","templateObject_1","__makeTemplateObject","type","items","enum","additionalItems","optionExamples","typescriptOnly","FAILURE_STRING_MISSING","FAILURE_STRING_COMMA","FAILURE_STRING_UNNECESSARY","Rules","AbstractRule","SemicolonWalker","walk","_this","cb","node","visitNode","forEachChild","kind","SyntaxKind","SemicolonClassElement","reportUnnecessary","end","EmptyStatement","checkEmptyStatement","PropertyDeclaration","visitPropertyDeclaration","pos","noFix","addFailure","undefined","Replacement","deleteText","checkSemicolonOrLineBreak","text","nextToken","getNextToken","EndOfFileToken","CloseBraceToken","isSameLine","checkUnnecessary","lastToken","getPreviousToken","getLastToken","YieldKeyword","parent","YieldExpression","Block","ArrowFunction","OpenParenToken","OpenBracketToken","PlusToken","MinusToken","RegularExpressionLiteral","LessThanToken","NoSubstitutionTemplateLiteral","TemplateHead","isIterationStatement","parentKind","IfStatement","LabeledStatement","WithStatement","initializer","getStart","checkPropertyDeclaration","AbstractWalker","VariableStatement","ExpressionStatement","ReturnStatement","BreakStatement","ContinueStatement","ThrowStatement","ImportEqualsDeclaration","DoStatement","ExportAssignment","TypeAliasDeclaration","ImportDeclaration","ExportDeclaration","DebuggerStatement","checkMissing","ModuleDeclaration","MethodDeclaration","FunctionDeclaration","body","InterfaceDeclaration","checkInterface","call","reportMissing","addFailureAt","appendText","_i","_a","members","length","member","checkVariableStatement","expression","checkShorthandModuleDeclaration","declarations","declarationList","nextStatement","getNextStatement"],"mappings":"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","file":"static/js/46.98195662.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_ALWAYS = \"always\";\nvar OPTION_NEVER = \"never\";\nvar OPTION_IGNORE_BOUND_CLASS_METHODS = \"ignore-bound-class-methods\";\nvar OPTION_STRICT_BOUND_CLASS_METHODS = \"strict-bound-class-methods\";\nvar OPTION_IGNORE_INTERFACES = \"ignore-interfaces\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        var options = {\n            boundClassMethods: this.ruleArguments.indexOf(OPTION_STRICT_BOUND_CLASS_METHODS) !== -1\n                ? 2 /* Strict */\n                : this.ruleArguments.indexOf(OPTION_IGNORE_BOUND_CLASS_METHODS) !== -1\n                    ? 1 /* Ignore */\n                    : 0 /* Default */,\n            interfaces: this.ruleArguments.indexOf(OPTION_IGNORE_INTERFACES) === -1,\n        };\n        var Walker = this.ruleArguments.indexOf(OPTION_NEVER) === -1\n            ? SemicolonAlwaysWalker\n            : SemicolonNeverWalker;\n        return this.applyWithWalker(new Walker(sourceFile, this.ruleName, options));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"semicolon\",\n        description: \"Enforces consistent semicolon usage at the end of every statement.\",\n        hasFix: true,\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            One of the following arguments must be provided:\\n\\n            * `\\\"\", \"\\\"` enforces semicolons at the end of every statement.\\n            * `\\\"\", \"\\\"` disallows semicolons at the end of every statement except for when they are necessary.\\n\\n            The following arguments may be optionally provided:\\n\\n            * `\\\"\", \"\\\"` skips checking semicolons at the end of interface members.\\n            * `\\\"\", \"\\\"` skips checking semicolons at the end of bound class methods.\\n            * `\\\"\", \"\\\"` disables any special handling of bound class methods and treats them as any\\n            other assignment. This option overrides `\\\"\", \"\\\"`.\\n        \"], [\"\\n            One of the following arguments must be provided:\\n\\n            * \\\\`\\\"\", \"\\\"\\\\` enforces semicolons at the end of every statement.\\n            * \\\\`\\\"\", \"\\\"\\\\` disallows semicolons at the end of every statement except for when they are necessary.\\n\\n            The following arguments may be optionally provided:\\n\\n            * \\\\`\\\"\", \"\\\"\\\\` skips checking semicolons at the end of interface members.\\n            * \\\\`\\\"\", \"\\\"\\\\` skips checking semicolons at the end of bound class methods.\\n            * \\\\`\\\"\", \"\\\"\\\\` disables any special handling of bound class methods and treats them as any\\n            other assignment. This option overrides \\\\`\\\"\", \"\\\"\\\\`.\\n        \"])), OPTION_ALWAYS, OPTION_NEVER, OPTION_IGNORE_INTERFACES, OPTION_IGNORE_BOUND_CLASS_METHODS, OPTION_STRICT_BOUND_CLASS_METHODS, OPTION_IGNORE_BOUND_CLASS_METHODS),\n        options: {\n            type: \"array\",\n            items: [\n                {\n                    type: \"string\",\n                    enum: [OPTION_ALWAYS, OPTION_NEVER],\n                },\n                {\n                    type: \"string\",\n                    enum: [OPTION_IGNORE_INTERFACES],\n                },\n            ],\n            additionalItems: false,\n        },\n        optionExamples: [\n            [true, OPTION_ALWAYS],\n            [true, OPTION_NEVER],\n            [true, OPTION_ALWAYS, OPTION_IGNORE_INTERFACES],\n            [true, OPTION_ALWAYS, OPTION_IGNORE_BOUND_CLASS_METHODS],\n        ],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING_MISSING = \"Missing semicolon\";\n    Rule.FAILURE_STRING_COMMA = \"Properties should be separated by semicolons\";\n    Rule.FAILURE_STRING_UNNECESSARY = \"Unnecessary semicolon\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar SemicolonWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(SemicolonWalker, _super);\n    function SemicolonWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SemicolonWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        var cb = function (node) {\n            _this.visitNode(node);\n            return ts.forEachChild(node, cb);\n        };\n        return ts.forEachChild(sourceFile, cb);\n    };\n    SemicolonWalker.prototype.visitNode = function (node) {\n        switch (node.kind) {\n            case ts.SyntaxKind.SemicolonClassElement:\n                return this.reportUnnecessary(node.end);\n            case ts.SyntaxKind.EmptyStatement:\n                return this.checkEmptyStatement(node);\n            case ts.SyntaxKind.PropertyDeclaration:\n                return this.visitPropertyDeclaration(node);\n        }\n    };\n    SemicolonWalker.prototype.reportUnnecessary = function (pos, noFix) {\n        this.addFailure(pos - 1, pos, Rule.FAILURE_STRING_UNNECESSARY, noFix ? undefined : Lint.Replacement.deleteText(pos - 1, 1));\n    };\n    SemicolonWalker.prototype.checkSemicolonOrLineBreak = function (node) {\n        if (this.sourceFile.text[node.end - 1] !== \";\") {\n            return;\n        }\n        var nextToken = utils.getNextToken(node, this.sourceFile);\n        switch (nextToken.kind) {\n            case ts.SyntaxKind.EndOfFileToken:\n            case ts.SyntaxKind.CloseBraceToken:\n                return this.reportUnnecessary(node.end);\n            default:\n                if (!utils.isSameLine(this.sourceFile, node.end, nextToken.end)) {\n                    this.reportUnnecessary(node.end);\n                }\n        }\n    };\n    SemicolonWalker.prototype.checkUnnecessary = function (node) {\n        if (this.sourceFile.text[node.end - 1] !== \";\") {\n            return;\n        }\n        var lastToken = utils.getPreviousToken(node.getLastToken(this.sourceFile), this.sourceFile);\n        // yield does not continue on the next line if there is no yielded expression\n        if ((lastToken.kind === ts.SyntaxKind.YieldKeyword &&\n            lastToken.parent.kind === ts.SyntaxKind.YieldExpression) ||\n            // arrow functions with block as body don't continue on the next line\n            (lastToken.kind === ts.SyntaxKind.CloseBraceToken &&\n                lastToken.parent.kind === ts.SyntaxKind.Block &&\n                lastToken.parent.parent.kind === ts.SyntaxKind.ArrowFunction)) {\n            return this.checkSemicolonOrLineBreak(node);\n        }\n        var nextToken = utils.getNextToken(node, this.sourceFile);\n        switch (nextToken.kind) {\n            case ts.SyntaxKind.OpenParenToken:\n            case ts.SyntaxKind.OpenBracketToken:\n            case ts.SyntaxKind.PlusToken:\n            case ts.SyntaxKind.MinusToken:\n            case ts.SyntaxKind.RegularExpressionLiteral:\n            case ts.SyntaxKind.LessThanToken:\n            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n            case ts.SyntaxKind.TemplateHead:\n                break;\n            case ts.SyntaxKind.CloseBraceToken:\n            case ts.SyntaxKind.EndOfFileToken:\n                return this.reportUnnecessary(node.end);\n            default:\n                if (!utils.isSameLine(this.sourceFile, node.end, nextToken.end)) {\n                    this.reportUnnecessary(node.end);\n                }\n        }\n    };\n    SemicolonWalker.prototype.checkEmptyStatement = function (node) {\n        // An empty statement is only ever useful when it is the only statement inside a loop\n        if (!utils.isIterationStatement(node.parent)) {\n            var parentKind = node.parent.kind;\n            // don't remove empty statement if it is a direct child of if, with or a LabeledStatement\n            // otherwise this would unintentionally change control flow\n            var noFix = parentKind === ts.SyntaxKind.IfStatement ||\n                parentKind === ts.SyntaxKind.LabeledStatement ||\n                parentKind === ts.SyntaxKind.WithStatement;\n            this.reportUnnecessary(node.end, noFix);\n        }\n    };\n    SemicolonWalker.prototype.visitPropertyDeclaration = function (node) {\n        // check if this is a multi-line arrow function\n        if (this.options.boundClassMethods !== 2 /* Strict */ &&\n            node.initializer !== undefined &&\n            node.initializer.kind === ts.SyntaxKind.ArrowFunction &&\n            !utils.isSameLine(this.sourceFile, node.getStart(this.sourceFile), node.end)) {\n            if (this.options.boundClassMethods === 0 /* Default */) {\n                this.checkUnnecessary(node);\n            }\n        }\n        else {\n            this.checkPropertyDeclaration(node);\n        }\n    };\n    return SemicolonWalker;\n}(Lint.AbstractWalker));\nvar SemicolonAlwaysWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(SemicolonAlwaysWalker, _super);\n    function SemicolonAlwaysWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SemicolonAlwaysWalker.prototype.visitNode = function (node) {\n        switch (node.kind) {\n            case ts.SyntaxKind.VariableStatement:\n            case ts.SyntaxKind.ExpressionStatement:\n            case ts.SyntaxKind.ReturnStatement:\n            case ts.SyntaxKind.BreakStatement:\n            case ts.SyntaxKind.ContinueStatement:\n            case ts.SyntaxKind.ThrowStatement:\n            case ts.SyntaxKind.ImportEqualsDeclaration:\n            case ts.SyntaxKind.DoStatement:\n            case ts.SyntaxKind.ExportAssignment:\n            case ts.SyntaxKind.TypeAliasDeclaration:\n            case ts.SyntaxKind.ImportDeclaration:\n            case ts.SyntaxKind.ExportDeclaration:\n            case ts.SyntaxKind.DebuggerStatement:\n                return this.checkMissing(node);\n            case ts.SyntaxKind.ModuleDeclaration:\n            case ts.SyntaxKind.MethodDeclaration:\n            case ts.SyntaxKind.FunctionDeclaration:\n                // check shorthand module declarations and method / function signatures\n                if (node.body === undefined) {\n                    this.checkMissing(node);\n                }\n                break;\n            case ts.SyntaxKind.InterfaceDeclaration:\n                if (this.options.interfaces) {\n                    this.checkInterface(node);\n                }\n                break;\n            default:\n                return _super.prototype.visitNode.call(this, node);\n        }\n    };\n    SemicolonAlwaysWalker.prototype.checkPropertyDeclaration = function (node) {\n        return this.checkMissing(node);\n    };\n    SemicolonAlwaysWalker.prototype.checkMissing = function (node) {\n        if (this.sourceFile.text[node.end - 1] !== \";\") {\n            this.reportMissing(node.end);\n        }\n    };\n    SemicolonAlwaysWalker.prototype.reportMissing = function (pos) {\n        this.addFailureAt(pos, 0, Rule.FAILURE_STRING_MISSING, Lint.Replacement.appendText(pos, \";\"));\n    };\n    SemicolonAlwaysWalker.prototype.checkInterface = function (node) {\n        for (var _i = 0, _a = node.members; _i < _a.length; _i++) {\n            var member = _a[_i];\n            switch (this.sourceFile.text[member.end - 1]) {\n                case \";\":\n                    break;\n                case \",\":\n                    this.addFailureAt(member.end - 1, 1, Rule.FAILURE_STRING_COMMA, new Lint.Replacement(member.end - 1, 1, \";\"));\n                    break;\n                default:\n                    this.reportMissing(member.end);\n            }\n        }\n    };\n    return SemicolonAlwaysWalker;\n}(SemicolonWalker));\nvar SemicolonNeverWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(SemicolonNeverWalker, _super);\n    function SemicolonNeverWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SemicolonNeverWalker.prototype.visitNode = function (node) {\n        switch (node.kind) {\n            case ts.SyntaxKind.ExpressionStatement:\n            case ts.SyntaxKind.ThrowStatement:\n            case ts.SyntaxKind.ExportAssignment:\n                return this.checkUnnecessary(node);\n            case ts.SyntaxKind.VariableStatement:\n                return this.checkVariableStatement(node);\n            case ts.SyntaxKind.ReturnStatement:\n                if (node.expression === undefined) {\n                    // return does not continue on the next line if the is no returned expression\n                    return this.checkSemicolonOrLineBreak(node);\n                }\n                return this.checkUnnecessary(node);\n            case ts.SyntaxKind.TypeAliasDeclaration:\n            case ts.SyntaxKind.ImportEqualsDeclaration:\n            case ts.SyntaxKind.ImportDeclaration:\n            case ts.SyntaxKind.ExportDeclaration:\n            case ts.SyntaxKind.DebuggerStatement:\n            case ts.SyntaxKind.BreakStatement:\n            case ts.SyntaxKind.ContinueStatement:\n            case ts.SyntaxKind.DoStatement:\n                return this.checkSemicolonOrLineBreak(node);\n            case ts.SyntaxKind.ModuleDeclaration:\n                // shorthand module declaration\n                if (node.body === undefined) {\n                    this.checkShorthandModuleDeclaration(node);\n                }\n                break;\n            case ts.SyntaxKind.MethodDeclaration:\n                // check method signature\n                if (node.body === undefined) {\n                    this.checkSemicolonOrLineBreak(node);\n                }\n                break;\n            case ts.SyntaxKind.FunctionDeclaration:\n                // check function signature\n                if (node.body === undefined) {\n                    this.checkSemicolonOrLineBreak(node);\n                }\n                break;\n            case ts.SyntaxKind.InterfaceDeclaration:\n                if (this.options.interfaces) {\n                    this.checkInterface(node);\n                }\n                break;\n            default:\n                return _super.prototype.visitNode.call(this, node);\n        }\n    };\n    SemicolonNeverWalker.prototype.checkPropertyDeclaration = function (node) {\n        if (node.initializer === undefined) {\n            return this.checkSemicolonOrLineBreak(node);\n        }\n        return this.checkUnnecessary(node);\n    };\n    SemicolonNeverWalker.prototype.checkVariableStatement = function (node) {\n        var declarations = node.declarationList.declarations;\n        if (declarations.length !== 0 &&\n            declarations[declarations.length - 1].initializer === undefined) {\n            // variable declaration does not continue on the next line if it has no initializer\n            return this.checkSemicolonOrLineBreak(node);\n        }\n        return this.checkUnnecessary(node);\n    };\n    SemicolonNeverWalker.prototype.checkShorthandModuleDeclaration = function (node) {\n        var nextStatement = utils.getNextStatement(node);\n        if (nextStatement === undefined || nextStatement.kind !== ts.SyntaxKind.Block) {\n            this.checkSemicolonOrLineBreak(node);\n        }\n    };\n    SemicolonNeverWalker.prototype.checkInterface = function (node) {\n        for (var _i = 0, _a = node.members; _i < _a.length; _i++) {\n            var member = _a[_i];\n            this.checkSemicolonOrLineBreak(member);\n        }\n    };\n    return SemicolonNeverWalker;\n}(SemicolonWalker));\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/semicolonRule.js\n// module id = 2139\n// module chunks = 46"],"sourceRoot":""}