{"version":3,"sources":["../node_modules/tslint/lib/rules/matchDefaultExportNameRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","importName","exportName","prototype","applyWithProgram","sourceFile","program","applyWithFunction","walk","undefined","getTypeChecker","metadata","ruleName","description","Utils","dedent","__makeTemplateObject","optionsDescription","options","optionExamples","type","typescriptOnly","requiresTypeInfo","Rules","TypedRule","ctx","tc","_i","_a","statements","length","statement","isImportDeclaration","importClause","name","defaultImport","symbol","getSymbolAtLocation","isSymbolFlagSet","SymbolFlags","Alias","declarations","getAliasedSymbol","kind","SyntaxKind","Identifier","text","addFailureAtNode"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAsDAC,EAtDAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAoBA,OAtBAR,EAAAU,UAAAL,EAAAC,GAKAD,EAAAM,eAAA,SAAAC,EAAAC,GACA,0BAAAD,EAAA,kCAAAC,EAAA,MAEAR,EAAAS,UAAAC,iBAAA,SAAAC,EAAAC,GACA,OAAAT,KAAAU,kBAAAF,EAAAG,OAAAC,EAAAH,EAAAI,mBAGAhB,EAAAiB,UACAC,SAAA,4BACAC,YAAApB,EAAAqB,MAAAC,OAAA3B,MAAAC,EAAA2B,sBAAA,0TACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,QACAC,gBAAA,EACAC,kBAAA,GAEA5B,EAvBA,CAwBCD,EAAA8B,MAAAC,WAED,SAAAhB,EAAAiB,EAAAC,GACA,QAAAC,EAAA,EAAAC,EAAAH,EAAApB,WAAAwB,WAAoDF,EAAAC,EAAAE,OAAgBH,IAAA,CACpE,IAAAI,EAAAH,EAAAD,GACA,GAAApC,EAAAyC,oBAAAD,SACAtB,IAAAsB,EAAAE,mBACAxB,IAAAsB,EAAAE,aAAAC,KAFA,CAKA,IAAAC,EAAAJ,EAAAE,aAAAC,KACAE,EAAAV,EAAAW,oBAAAF,GACA,QAAA1B,IAAA2B,GAAA7C,EAAA+C,gBAAAF,EAAA5C,EAAA+C,YAAAC,OAAA,CAGA,IAAAC,EAAAf,EAAAgB,iBAAAN,GAAAK,aACA,QAAAhC,IAAAgC,GAAA,IAAAA,EAAAX,OAAA,CACA,IAAAI,EAAAO,EAAA,GAAAP,UACAzB,IAAAyB,GACAA,EAAAS,OAAAnD,EAAAoD,WAAAC,YACAX,EAAAY,OAAAX,EAAAW,MACArB,EAAAsB,iBAAAZ,EAAAzC,EAAAM,eAAAmC,EAAAW,KAAAZ,EAAAY,WApBA5D,EAAAQ","file":"static/js/129.e49ce353.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (importName, exportName) {\n        return \"Expected import '\" + importName + \"' to match the default export '\" + exportName + \"'.\";\n    };\n    Rule.prototype.applyWithProgram = function (sourceFile, program) {\n        return this.applyWithFunction(sourceFile, walk, undefined, program.getTypeChecker());\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"match-default-export-name\",\n        description: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Requires that a default import have the same name as the declaration it imports.\\n            Does nothing for anonymous default exports.\"], [\"\\n            Requires that a default import have the same name as the declaration it imports.\\n            Does nothing for anonymous default exports.\"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"style\",\n        typescriptOnly: true,\n        requiresTypeInfo: true,\n    };\n    return Rule;\n}(Lint.Rules.TypedRule));\nexports.Rule = Rule;\nfunction walk(ctx, tc) {\n    for (var _i = 0, _a = ctx.sourceFile.statements; _i < _a.length; _i++) {\n        var statement = _a[_i];\n        if (!tsutils_1.isImportDeclaration(statement) ||\n            statement.importClause === undefined ||\n            statement.importClause.name === undefined) {\n            continue;\n        }\n        var defaultImport = statement.importClause.name;\n        var symbol = tc.getSymbolAtLocation(defaultImport);\n        if (symbol === undefined || !tsutils_1.isSymbolFlagSet(symbol, ts.SymbolFlags.Alias)) {\n            continue;\n        }\n        var declarations = tc.getAliasedSymbol(symbol).declarations;\n        if (declarations !== undefined && declarations.length !== 0) {\n            var name = declarations[0].name;\n            if (name !== undefined &&\n                name.kind === ts.SyntaxKind.Identifier &&\n                name.text !== defaultImport.text) {\n                ctx.addFailureAtNode(defaultImport, Rule.FAILURE_STRING(defaultImport.text, name.text));\n            }\n        }\n    }\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/matchDefaultExportNameRule.js\n// module id = 2042\n// module chunks = 129"],"sourceRoot":""}