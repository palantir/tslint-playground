{"version":3,"sources":["../node_modules/tslint/lib/rules/preferTemplateRule.js","../node_modules/tslint/lib/rules/code-examples/preferTemplate.examples.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","preferTemplate_examples_1","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","isDeclarationFile","allowSingleConcat","ruleArguments","indexOf","applyWithFunction","walk","metadata","ruleName","description","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","enum","optionExamples","typescriptOnly","codeExamples","FAILURE_STRING","FAILURE_STRING_MULTILINE","Rules","AbstractRule","ctx","forEachChild","cb","node","failure","isPlusExpression","left","right","l","isStringLike","r","containsNewline","undefined","containsAnyStringLiterals","containsOnlyStringLiterals","getError","addFailureAtNode","kind","SyntaxKind","TemplateExpression","templateSpans","some","_a","literal","text","includes","isBinaryExpression","operatorToken","PlusToken","StringLiteral","NoSubstitutionTemplateLiteral","templateObject_2","templateObject_3","templateObject_4","templateObject_5","templateObject_6","config","pass","fail"],"mappings":"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","file":"static/js/12.75145eaf.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar preferTemplate_examples_1 = require(\"./code-examples/preferTemplate.examples\");\nvar OPTION_SINGLE_CONCAT = \"allow-single-concat\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        if (sourceFile.isDeclarationFile) {\n            return []; // Not possible in a declaration file\n        }\n        var allowSingleConcat = this.ruleArguments.indexOf(OPTION_SINGLE_CONCAT) !== -1;\n        return this.applyWithFunction(sourceFile, walk, { allowSingleConcat: allowSingleConcat });\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"prefer-template\",\n        description: \"Prefer a template expression over string literal concatenation.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            If `\", \"` is specified, then a single concatenation (`x + y`) is allowed, but not more (`x + y + z`).\"], [\"\\n            If \\\\`\", \"\\\\` is specified, then a single concatenation (\\\\`x + y\\\\`) is allowed, but not more (\\\\`x + y + z\\\\`).\"])), OPTION_SINGLE_CONCAT),\n        options: {\n            type: \"string\",\n            enum: [OPTION_SINGLE_CONCAT],\n        },\n        optionExamples: [true, [true, OPTION_SINGLE_CONCAT]],\n        type: \"style\",\n        typescriptOnly: false,\n        codeExamples: preferTemplate_examples_1.codeExamples,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Use a template literal instead of concatenating with a string literal.\";\n    Rule.FAILURE_STRING_MULTILINE = \"Use a multiline template literal instead of concatenating string literals with newlines.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var allowSingleConcat = ctx.options.allowSingleConcat;\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        var failure = getError(node, allowSingleConcat);\n        if (failure !== undefined) {\n            ctx.addFailureAtNode(node, failure);\n        }\n        else {\n            return ts.forEachChild(node, cb);\n        }\n    });\n}\nfunction getError(node, allowSingleConcat) {\n    if (!isPlusExpression(node)) {\n        return undefined;\n    }\n    var left = node.left, right = node.right;\n    var l = isStringLike(left);\n    var r = isStringLike(right);\n    if (l && r) {\n        // They're both strings.\n        // If they're joined by a newline, recommend a template expression instead.\n        // Otherwise ignore. (\"a\" + \"b\", probably writing a long newline-less string on many lines.)\n        return containsNewline(left) || containsNewline(right)\n            ? Rule.FAILURE_STRING_MULTILINE\n            : undefined;\n    }\n    else if (!l && !r) {\n        // Watch out for `\"a\" + b + c`. Parsed as `(\"a\" + b) + c`.\n        return containsAnyStringLiterals(left) ? Rule.FAILURE_STRING : undefined;\n    }\n    else if (l) {\n        // `\"x\" + y`\n        return !allowSingleConcat ? Rule.FAILURE_STRING : undefined;\n    }\n    else {\n        // `? + \"b\"`\n        // If LHS consists of only string literals (as in `\"a\" + \"b\" + \"c\"`, allow it.)\n        return !containsOnlyStringLiterals(left) && (!allowSingleConcat || isPlusExpression(left))\n            ? Rule.FAILURE_STRING\n            : undefined;\n    }\n}\nfunction containsNewline(node) {\n    if (node.kind === ts.SyntaxKind.TemplateExpression) {\n        return node.templateSpans.some(function (_a) {\n            var text = _a.literal.text;\n            return text.includes(\"\\n\");\n        });\n    }\n    else {\n        return node.text.includes(\"\\n\");\n    }\n}\nfunction containsOnlyStringLiterals(node) {\n    return (isPlusExpression(node) &&\n        isStringLike(node.right) &&\n        (isStringLike(node.left) || containsAnyStringLiterals(node.left)));\n}\nfunction containsAnyStringLiterals(node) {\n    return (isPlusExpression(node) &&\n        (isStringLike(node.right) ||\n            isStringLike(node.left) ||\n            containsAnyStringLiterals(node.left)));\n}\nfunction isPlusExpression(node) {\n    return tsutils_1.isBinaryExpression(node) && node.operatorToken.kind === ts.SyntaxKind.PlusToken;\n}\nfunction isStringLike(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.StringLiteral:\n        case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n        case ts.SyntaxKind.TemplateExpression:\n            return true;\n        default:\n            return false;\n    }\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/preferTemplateRule.js\n// module id = 2132\n// module chunks = 12","\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Lint = require(\"../../index\");\n// tslint:disable: object-literal-sort-keys\nexports.codeExamples = [\n    {\n        description: \"Enforces the use of template strings whenever possible.\",\n        config: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"prefer-template\\\": true }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"prefer-template\\\": true }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            const x: number = 1;\\n            const y: number = 1;\\n            const myString: string = `${x} is equals ${y}`;\\n        \"], [\"\\n            const x: number = 1;\\n            const y: number = 1;\\n            const myString: string = \\\\`\\\\${x} is equals \\\\${y}\\\\`;\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject([\"\\n            const x: number = 1;\\n            const y: number = 1;\\n            const myString: string = x + ' is equals ' + y;\\n        \"], [\"\\n            const x: number = 1;\\n            const y: number = 1;\\n            const myString: string = x + ' is equals ' + y;\\n        \"]))),\n    },\n    {\n        description: \"Enforces the use of template strings, but allows up to one concatenation.\",\n        config: Lint.Utils.dedent(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"prefer-template\\\": [true, \\\"allow-single-concat\\\"] }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"prefer-template\\\": [true, \\\"allow-single-concat\\\"] }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject([\"\\n            const x: number = 1;\\n            const y: number = 1;\\n            const myString: string = x + ' is equals 1';\\n            const myString: string = `${x} is equals ${y}`;\\n        \"], [\"\\n            const x: number = 1;\\n            const y: number = 1;\\n            const myString: string = x + ' is equals 1';\\n            const myString: string = \\\\`\\\\${x} is equals \\\\${y}\\\\`;\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject([\"\\n            const x: number = 1;\\n            const y: number = 1;\\n            const myString: string = x + ' is equals ' + y;\\n        \"], [\"\\n            const x: number = 1;\\n            const y: number = 1;\\n            const myString: string = x + ' is equals ' + y;\\n        \"]))),\n    },\n];\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/code-examples/preferTemplate.examples.js\n// module id = 2197\n// module chunks = 12"],"sourceRoot":""}