{"version":3,"sources":["../node_modules/tslint/lib/rules/fileNameCasingRule.js"],"names":["Object","defineProperty","exports","value","Casing","tslib_1","__webpack_require__","path","error_1","Lint","utils_1","rules","CamelCase","PascalCase","KebabCase","SnakeCase","validCasingOptions","Set","isCorrectCasing","fileName","casing","isCamelCased","isPascalCased","isKebabCased","isSnakeCased","templateObject_1","getValidRegExp","regExpString","RegExp","_a","validate","sourceFile","casingConfig","undefined","has","parse","name","Rule","showWarning","validateWithSimpleConfig","fileBaseName","base","fileNameMatches","keys","length","_i","fileNameMatches_1","rawMatcher","regex","test","validateWithRegexConfig","_super","apply","this","arguments","__extends","message","showWarningOnce","metadata","ruleName","FAILURE_STRING","expectedCasing","stylizedNameForCasing","prototype","ruleArguments","validation","RuleFailure","description","rationale","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","items","anyOf","enum","additionalProperties","minProperties","optionExamples",".tsx",".ts",".style.ts",".*","hasFix","typescriptOnly","Rules","AbstractRule"],"mappings":"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","file":"static/js/140.0f0c28f8.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar path = require(\"path\");\nvar error_1 = require(\"../error\");\nvar Lint = require(\"../index\");\nvar utils_1 = require(\"../utils\");\nvar Casing;\n(function (Casing) {\n    Casing[\"CamelCase\"] = \"camel-case\";\n    Casing[\"PascalCase\"] = \"pascal-case\";\n    Casing[\"KebabCase\"] = \"kebab-case\";\n    Casing[\"SnakeCase\"] = \"snake-case\";\n})(Casing || (Casing = {}));\nvar rules = [Casing.CamelCase, Casing.PascalCase, Casing.KebabCase, Casing.SnakeCase];\nvar validCasingOptions = new Set(rules);\nfunction isCorrectCasing(fileName, casing) {\n    switch (casing) {\n        case Casing.CamelCase:\n            return utils_1.isCamelCased(fileName);\n        case Casing.PascalCase:\n            return utils_1.isPascalCased(fileName);\n        case Casing.KebabCase:\n            return utils_1.isKebabCased(fileName);\n        case Casing.SnakeCase:\n            return utils_1.isSnakeCased(fileName);\n    }\n}\nvar getValidRegExp = function (regExpString) {\n    try {\n        return RegExp(regExpString, \"i\");\n    }\n    catch (_a) {\n        return undefined;\n    }\n};\nvar validateWithRegexConfig = function (sourceFile, casingConfig) {\n    var fileBaseName = path.parse(sourceFile.fileName).base;\n    var fileNameMatches = Object.keys(casingConfig);\n    if (fileNameMatches.length === 0) {\n        Rule.showWarning(\"At least one file name match must be provided\");\n        return undefined;\n    }\n    for (var _i = 0, fileNameMatches_1 = fileNameMatches; _i < fileNameMatches_1.length; _i++) {\n        var rawMatcher = fileNameMatches_1[_i];\n        var regex = getValidRegExp(rawMatcher);\n        if (regex === undefined) {\n            Rule.showWarning(\"Invalid regular expression provided: \" + rawMatcher);\n            continue;\n        }\n        var casing = casingConfig[rawMatcher];\n        if (!validCasingOptions.has(casing)) {\n            Rule.showWarning(\"Unexpected casing option provided: \" + casing);\n            continue;\n        }\n        if (!regex.test(fileBaseName)) {\n            continue;\n        }\n        return isCorrectCasing(fileBaseName, casing) ? undefined : casing;\n    }\n    return undefined;\n};\nvar validateWithSimpleConfig = function (sourceFile, casingConfig) {\n    if (!validCasingOptions.has(casingConfig)) {\n        Rule.showWarning(\"Unexpected casing option provided: \" + casingConfig);\n        return undefined;\n    }\n    var fileName = path.parse(sourceFile.fileName).name;\n    var isValid = isCorrectCasing(fileName, casingConfig);\n    return isValid ? undefined : casingConfig;\n};\nvar validate = function (sourceFile, casingConfig) {\n    if (casingConfig === undefined) {\n        Rule.showWarning(\"Provide a rule option as string or object\");\n        return undefined;\n    }\n    if (typeof casingConfig === \"string\") {\n        return validateWithSimpleConfig(sourceFile, casingConfig);\n    }\n    if (typeof casingConfig === \"object\") {\n        return validateWithRegexConfig(sourceFile, casingConfig);\n    }\n    Rule.showWarning(\"Received unexpected rule option\");\n    return undefined;\n};\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.showWarning = function (message) {\n        error_1.showWarningOnce(\"Warning: \" + Rule.metadata.ruleName + \" - \" + message);\n    };\n    Rule.FAILURE_STRING = function (expectedCasing) {\n        return \"File name must be \" + Rule.stylizedNameForCasing(expectedCasing);\n    };\n    Rule.stylizedNameForCasing = function (casing) {\n        switch (casing) {\n            case Casing.CamelCase:\n                return \"camelCase\";\n            case Casing.PascalCase:\n                return \"PascalCase\";\n            case Casing.KebabCase:\n                return \"kebab-case\";\n            case Casing.SnakeCase:\n                return \"snake_case\";\n        }\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        if (this.ruleArguments.length !== 1) {\n            return [];\n        }\n        var casingConfig = this.ruleArguments[0];\n        var validation = validate(sourceFile, casingConfig);\n        return validation === undefined\n            ? []\n            : [\n                new Lint.RuleFailure(sourceFile, 0, 0, Rule.FAILURE_STRING(validation), this.ruleName),\n            ];\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"file-name-casing\",\n        description: \"Enforces a consistent file naming convention\",\n        rationale: \"Helps maintain a consistent style across a file hierarchy\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            One of the following arguments must be provided:\\n\\n            * `\", \"`: File names must be camel-cased: `fileName.ts`.\\n            * `\", \"`: File names must be Pascal-cased: `FileName.ts`.\\n            * `\", \"`: File names must be kebab-cased: `file-name.ts`.\\n            * `\", \"`: File names must be snake-cased: `file_name.ts`.\\n\\n            Or an object, where the key represents a regular expression that\\n            matches the file name, and the value is the file name rule from\\n            the previous list.\\n\\n            * { \\\".tsx\\\": \\\"\", \"\\\", \\\".ts\\\": \\\"\", \"\\\" }\\n        \"], [\"\\n            One of the following arguments must be provided:\\n\\n            * \\\\`\", \"\\\\`: File names must be camel-cased: \\\\`fileName.ts\\\\`.\\n            * \\\\`\", \"\\\\`: File names must be Pascal-cased: \\\\`FileName.ts\\\\`.\\n            * \\\\`\", \"\\\\`: File names must be kebab-cased: \\\\`file-name.ts\\\\`.\\n            * \\\\`\", \"\\\\`: File names must be snake-cased: \\\\`file_name.ts\\\\`.\\n\\n            Or an object, where the key represents a regular expression that\\n            matches the file name, and the value is the file name rule from\\n            the previous list.\\n\\n            * \\\\{ \\\\\\\".tsx\\\\\\\": \\\\\\\"\", \"\\\\\\\", \\\\\\\".ts\\\\\\\": \\\\\\\"\", \"\\\\\\\" \\\\}\\n        \"])), Casing.CamelCase, Casing.PascalCase, Casing.KebabCase, Casing.SnakeCase, Casing.PascalCase, Casing.CamelCase),\n        options: {\n            type: \"array\",\n            items: {\n                anyOf: [\n                    {\n                        type: \"array\",\n                        items: [\n                            {\n                                type: \"string\",\n                                enum: rules,\n                            },\n                        ],\n                    },\n                    {\n                        type: \"object\",\n                        additionalProperties: {\n                            type: \"string\",\n                            enum: rules,\n                        },\n                        minProperties: 1,\n                    },\n                ],\n            },\n        },\n        optionExamples: [\n            [true, Casing.CamelCase],\n            [true, Casing.PascalCase],\n            [true, Casing.KebabCase],\n            [true, Casing.SnakeCase],\n            [\n                true,\n                {\n                    \".tsx\": Casing.PascalCase,\n                    \".ts\": Casing.CamelCase,\n                },\n            ],\n            [\n                true,\n                {\n                    \".style.ts\": Casing.KebabCase,\n                    \".tsx\": Casing.PascalCase,\n                    \".*\": Casing.CamelCase,\n                },\n            ],\n        ],\n        hasFix: false,\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/fileNameCasingRule.js\n// module id = 2030\n// module chunks = 140"],"sourceRoot":""}