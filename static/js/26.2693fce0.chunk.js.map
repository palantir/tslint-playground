{"version":3,"sources":["../node_modules/tslint/lib/rules/arrowReturnShorthandRule.js","../node_modules/tslint/lib/rules/code-examples/arrowReturnShorthand.examples.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","utils","ts","Lint","utils_1","arrowReturnShorthand_examples_1","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","isObjectLiteral","prototype","sourceFile","applyWithFunction","walk","multiline","ruleArguments","indexOf","metadata","ruleName","description","hasFix","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","enum","optionExamples","rationale","typescriptOnly","codeExamples","Rules","AbstractRule","ctx","forEachChild","cb","node","isArrowFunction","isBlock","body","expr","block","statements","length","kind","SyntaxKind","ReturnStatement","expression","undefined","isSameLine","getStart","end","ObjectLiteralExpression","addFailureAtNode","arrowFunction","text","statement","parent","returnKeyword","getChildOfKind","ReturnKeyword","arrow","EqualsGreaterThanToken","openBrace","OpenBraceToken","closeBrace","CloseBraceToken","semicolon","SemicolonToken","hasComments","Replacement","appendText","getEnd","concat","deleteFromTo","hasCommentAfterPosition","createFix","templateObject_3","templateObject_4","templateObject_5","templateObject_6","config","pass","fail"],"mappings":"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","file":"static/js/26.2693fce0.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar utils_1 = require(\"../language/utils\");\nvar arrowReturnShorthand_examples_1 = require(\"./code-examples/arrowReturnShorthand.examples\");\nvar OPTION_MULTILINE = \"multiline\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (isObjectLiteral) {\n        var start = \"This arrow function body can be simplified by omitting the curly braces and the keyword 'return'\";\n        return (start + (isObjectLiteral ? \", and wrapping the object literal in parentheses.\" : \".\"));\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, {\n            multiline: this.ruleArguments.indexOf(OPTION_MULTILINE) !== -1,\n        });\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"arrow-return-shorthand\",\n        description: \"Suggests to convert `() => { return x; }` to `() => x`.\",\n        hasFix: true,\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            If `\", \"` is specified, then this will warn even if the function spans multiple lines.\"], [\"\\n            If \\\\`\", \"\\\\` is specified, then this will warn even if the function spans multiple lines.\"])), OPTION_MULTILINE),\n        options: {\n            type: \"string\",\n            enum: [OPTION_MULTILINE],\n        },\n        optionExamples: [true, [true, OPTION_MULTILINE]],\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            It's unnecessary to include `return` and `{}` brackets in arrow lambdas.\\n            Leaving them out results in simpler and easier to read code.\\n        \"], [\"\\n            It's unnecessary to include \\\\`return\\\\` and \\\\`{}\\\\` brackets in arrow lambdas.\\n            Leaving them out results in simpler and easier to read code.\\n        \"]))),\n        type: \"style\",\n        typescriptOnly: false,\n        codeExamples: arrowReturnShorthand_examples_1.codeExamples,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var sourceFile = ctx.sourceFile, multiline = ctx.options.multiline;\n    return ts.forEachChild(sourceFile, function cb(node) {\n        if (utils.isArrowFunction(node) && utils.isBlock(node.body)) {\n            var expr = getSimpleReturnExpression(node.body);\n            if (expr !== undefined &&\n                (multiline ||\n                    utils.isSameLine(sourceFile, node.body.getStart(sourceFile), node.body.end))) {\n                var isObjectLiteral = expr.kind === ts.SyntaxKind.ObjectLiteralExpression;\n                ctx.addFailureAtNode(node.body, Rule.FAILURE_STRING(isObjectLiteral), createFix(node, node.body, expr, sourceFile.text));\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction createFix(arrowFunction, body, expr, text) {\n    var statement = expr.parent;\n    var returnKeyword = utils.getChildOfKind(statement, ts.SyntaxKind.ReturnKeyword);\n    var arrow = utils.getChildOfKind(arrowFunction, ts.SyntaxKind.EqualsGreaterThanToken);\n    var openBrace = utils.getChildOfKind(body, ts.SyntaxKind.OpenBraceToken);\n    var closeBrace = utils.getChildOfKind(body, ts.SyntaxKind.CloseBraceToken);\n    var semicolon = utils.getChildOfKind(statement, ts.SyntaxKind.SemicolonToken);\n    var anyComments = hasComments(arrow) ||\n        hasComments(openBrace) ||\n        hasComments(statement) ||\n        hasComments(returnKeyword) ||\n        hasComments(expr) ||\n        (semicolon !== undefined && hasComments(semicolon)) ||\n        hasComments(closeBrace);\n    return anyComments\n        ? undefined\n        : (expr.kind === ts.SyntaxKind.ObjectLiteralExpression\n            ? [\n                Lint.Replacement.appendText(expr.getStart(), \"(\"),\n                Lint.Replacement.appendText(expr.getEnd(), \")\"),\n            ]\n            : []).concat([\n            // \" {\"\n            Lint.Replacement.deleteFromTo(arrow.end, openBrace.end),\n            // \"return \"\n            Lint.Replacement.deleteFromTo(statement.getStart(), expr.getStart()),\n            // \" }\" (may include semicolon)\n            Lint.Replacement.deleteFromTo(expr.end, closeBrace.end),\n        ]);\n    function hasComments(node) {\n        return utils_1.hasCommentAfterPosition(text, node.getEnd());\n    }\n}\n/** Given `{ return x; }`, return `x`. */\nfunction getSimpleReturnExpression(block) {\n    return block.statements.length === 1 &&\n        block.statements[0].kind === ts.SyntaxKind.ReturnStatement\n        ? block.statements[0].expression\n        : undefined;\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/arrowReturnShorthandRule.js\n// module id = 2013\n// module chunks = 26","\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Lint = require(\"../../index\");\n// tslint:disable: object-literal-sort-keys\nexports.codeExamples = [\n    {\n        description: \"Enforces usage of the shorthand return syntax when an arrow function's body does not span multiple lines.\",\n        config: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"arrow-return-shorthand\\\": true }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"arrow-return-shorthand\\\": true }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            const calc = (x: number, y: number) => ({ add: x + y, sub: x - y, mul: x * y });\\n            const calc2 = (x: number, y: number) => {\\n                return { add: x + y, sub: x - y, mul: x * y }\\n            };\\n        \"], [\"\\n            const calc = (x: number, y: number) => ({ add: x + y, sub: x - y, mul: x * y });\\n            const calc2 = (x: number, y: number) => {\\n                return { add: x + y, sub: x - y, mul: x * y }\\n            };\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject([\"\\n            const calc = (x: number, y: number) => { return { add: x + y, sub: x - y, mul: x * y } };\\n            const calc2 = (x: number, y: number) => {\\n                return { add: x + y, sub: x - y, mul: x * y }\\n            };\\n       \"], [\"\\n            const calc = (x: number, y: number) => { return { add: x + y, sub: x - y, mul: x * y } };\\n            const calc2 = (x: number, y: number) => {\\n                return { add: x + y, sub: x - y, mul: x * y }\\n            };\\n       \"]))),\n    },\n    {\n        description: \"Enforces usage of the shorthand return syntax even when an arrow function's body spans multiple lines.\",\n        config: Lint.Utils.dedent(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"arrow-return-shorthand\\\": [true, \\\"multiline\\\"] }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"arrow-return-shorthand\\\": [true, \\\"multiline\\\"] }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject([\"\\n            const calc = (x: number, y: number) => ({ add: x + y, sub: x - y, mul: x * y });\\n            const calc2 = (x: number, y: number) =>\\n                ({ add: x + y, sub: x - y, mul: x * y });\\n        \"], [\"\\n            const calc = (x: number, y: number) => ({ add: x + y, sub: x - y, mul: x * y });\\n            const calc2 = (x: number, y: number) =>\\n                ({ add: x + y, sub: x - y, mul: x * y });\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject([\"\\n            const calc = (x: number, y: number) => { return { add: x + y, sub: x - y, mul: x * y } };\\n            const calc2 = (x: number, y: number) => {\\n                return { add: x + y, sub: x - y, mul: x * y }\\n            };\\n       \"], [\"\\n            const calc = (x: number, y: number) => { return { add: x + y, sub: x - y, mul: x * y } };\\n            const calc2 = (x: number, y: number) => {\\n                return { add: x + y, sub: x - y, mul: x * y }\\n            };\\n       \"]))),\n    },\n];\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/code-examples/arrowReturnShorthand.examples.js\n// module id = 2177\n// module chunks = 26"],"sourceRoot":""}