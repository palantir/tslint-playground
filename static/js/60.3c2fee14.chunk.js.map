{"version":3,"sources":["../node_modules/tslint/lib/rules/objectLiteralShorthandRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","ruleArguments","indexOf","enforceShorthandWalker","disallowShorthandWalker","metadata","ruleName","description","hasFix","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","enum","optionExamples","typescriptOnly","LONGHAND_PROPERTY","LONGHAND_METHOD","SHORTHAND_ASSIGNMENT","Rules","AbstractRule","ctx","forEachChild","cb","node","isShorthandPropertyAssignment","addFailureAtNode","name","Replacement","appendText","getStart","text","isMethodDeclaration","parent","kind","SyntaxKind","ObjectLiteralExpression","isGenerator","undefined","asteriskToken","isAsync","hasModifier","modifiers","AsyncKeyword","replaceFromTo","end","getText","fixShorthandMethodDeclaration","isPropertyAssignment","Identifier","isIdentifier","initializer","deleteFromTo","isFunctionExpression","_a","nameStart","fix","getChildOfKind","OpenParenToken","pos","prefix","substring","handleLonghandMethod","addFailure"],"mappings":"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","file":"static/js/60.3c2fee14.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"..\");\nvar OPTION_NEVER = \"never\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, this.ruleArguments.indexOf(OPTION_NEVER) === -1\n            ? enforceShorthandWalker\n            : disallowShorthandWalker);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"object-literal-shorthand\",\n        description: \"Enforces/disallows use of ES6 object literal shorthand.\",\n        hasFix: true,\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n        If the 'never' option is provided, any shorthand object literal syntax will cause a failure.\"], [\"\\n        If the \\\\'never\\\\' option is provided, any shorthand object literal syntax will cause a failure.\"]))),\n        options: {\n            type: \"string\",\n            enum: [OPTION_NEVER],\n        },\n        optionExamples: [true, [true, OPTION_NEVER]],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.LONGHAND_PROPERTY = \"Expected property shorthand in object literal \";\n    Rule.LONGHAND_METHOD = \"Expected method shorthand in object literal \";\n    Rule.SHORTHAND_ASSIGNMENT = \"Shorthand property assignments have been disallowed.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction disallowShorthandWalker(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isShorthandPropertyAssignment(node)) {\n            ctx.addFailureAtNode(node.name, Rule.SHORTHAND_ASSIGNMENT, Lint.Replacement.appendText(node.getStart(ctx.sourceFile), node.name.text + \": \"));\n        }\n        else if (tsutils_1.isMethodDeclaration(node) &&\n            node.parent.kind === ts.SyntaxKind.ObjectLiteralExpression) {\n            ctx.addFailureAtNode(node.name, Rule.SHORTHAND_ASSIGNMENT, fixShorthandMethodDeclaration(node, ctx.sourceFile));\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction enforceShorthandWalker(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isPropertyAssignment(node)) {\n            if (node.name.kind === ts.SyntaxKind.Identifier &&\n                tsutils_1.isIdentifier(node.initializer) &&\n                node.name.text === node.initializer.text) {\n                ctx.addFailureAtNode(node, Rule.LONGHAND_PROPERTY + \"('{\" + node.name.text + \"}').\", Lint.Replacement.deleteFromTo(node.name.end, node.end));\n            }\n            else if (tsutils_1.isFunctionExpression(node.initializer) &&\n                // allow named function expressions\n                node.initializer.name === undefined) {\n                var _a = handleLonghandMethod(node.name, node.initializer, ctx.sourceFile), name = _a[0], fix = _a[1];\n                ctx.addFailure(node.getStart(ctx.sourceFile), tsutils_1.getChildOfKind(node.initializer, ts.SyntaxKind.OpenParenToken, ctx.sourceFile)\n                    .pos, Rule.LONGHAND_METHOD + \"('{\" + name + \"() {...}}').\", fix);\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction fixShorthandMethodDeclaration(node, sourceFile) {\n    var isGenerator = node.asteriskToken !== undefined;\n    var isAsync = tsutils_1.hasModifier(node.modifiers, ts.SyntaxKind.AsyncKeyword);\n    return Lint.Replacement.replaceFromTo(node.getStart(sourceFile), node.name.end, node.name.getText(sourceFile) + \":\" + (isAsync ? \" async\" : \"\") + \" function\" + (isGenerator ? \"*\" : \"\"));\n}\nfunction handleLonghandMethod(name, initializer, sourceFile) {\n    var nameStart = name.getStart(sourceFile);\n    var fix = Lint.Replacement.deleteFromTo(name.end, tsutils_1.getChildOfKind(initializer, ts.SyntaxKind.OpenParenToken).pos);\n    var prefix = \"\";\n    if (initializer.asteriskToken !== undefined) {\n        prefix = \"*\";\n    }\n    if (tsutils_1.hasModifier(initializer.modifiers, ts.SyntaxKind.AsyncKeyword)) {\n        prefix = \"async \" + prefix;\n    }\n    if (prefix !== \"\") {\n        fix = [fix, Lint.Replacement.appendText(nameStart, prefix)];\n    }\n    return [prefix + sourceFile.text.substring(nameStart, name.end), fix];\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/objectLiteralShorthandRule.js\n// module id = 2118\n// module chunks = 60"],"sourceRoot":""}