webpackJsonp([7],{2156:function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t,i=a(1),s=a(843),o=a(54),r=a(1116),c=a(2202),l=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return i.__extends(n,e),n.prototype.apply=function(e){return this.applyWithFunction(e,u)},n.metadata={ruleName:"use-isnan",description:"Enforces use of the `isNaN()` function to check for NaN references instead of a comparison to the `NaN` constant.",rationale:r.Utils.dedent(t||(t=i.__makeTemplateObject(["\n            Since `NaN !== NaN`, comparisons with regular operators will produce unexpected results.\n            So, instead of `if (myVar === NaN)`, do `if (isNaN(myVar))`."],["\n            Since \\`NaN !== NaN\\`, comparisons with regular operators will produce unexpected results.\n            So, instead of \\`if (myVar === NaN)\\`, do \\`if (isNaN(myVar))\\`."]))),optionsDescription:"Not configurable.",options:null,optionExamples:[!0],type:"functionality",typescriptOnly:!1,codeExamples:c.codeExamples},n.FAILURE_STRING="Found an invalid comparison for NaN: ",n}(r.Rules.AbstractRule);function u(e){return o.forEachChild(e.sourceFile,function n(a){if(s.isBinaryExpression(a))switch(a.operatorToken.kind){case o.SyntaxKind.LessThanToken:case o.SyntaxKind.GreaterThanToken:case o.SyntaxKind.LessThanEqualsToken:case o.SyntaxKind.GreaterThanEqualsToken:case o.SyntaxKind.EqualsEqualsToken:case o.SyntaxKind.ExclamationEqualsToken:case o.SyntaxKind.EqualsEqualsEqualsToken:case o.SyntaxKind.ExclamationEqualsEqualsToken:(d(a.right)||d(a.left))&&e.addFailureAtNode(a,l.FAILURE_STRING+a.getText(e.sourceFile))}return o.forEachChild(a,n)})}function d(e){return e.kind===o.SyntaxKind.Identifier&&"NaN"===e.text}n.Rule=l},2202:function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t,i,s,o=a(1),r=a(1116);n.codeExamples=[{description:"Enforces usage of `isNan()`.",config:r.Utils.dedent(t||(t=o.__makeTemplateObject(['\n            "rules": { "use-isnan": true }\n        '],['\n            "rules": { "use-isnan": true }\n        ']))),pass:r.Utils.dedent(i||(i=o.__makeTemplateObject(["\n            if (isNaN(parseInt('_4711'))) {\n                doSomething();\n            }\n        "],["\n            if (isNaN(parseInt('_4711'))) {\n                doSomething();\n            }\n        "]))),fail:r.Utils.dedent(s||(s=o.__makeTemplateObject(["\n            if (parseInt('_4711') === NaN) {\n                doSomething();\n            }\n       "],["\n            if (parseInt('_4711') === NaN) {\n                doSomething();\n            }\n       "])))}]}});
//# sourceMappingURL=7.d45551c6.chunk.js.map