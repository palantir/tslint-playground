webpackJsonp([151],{2016:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(1),o=t(843),s=t(54),i=t(1116),r=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return a.__extends(n,e),n.FAILURE_STRING_FACTORY=function(e,n){return"Calls to '"+e+"' are not allowed."+(void 0!==n?" "+n:"")},n.prototype.apply=function(e){return this.applyWithWalker(new c(e,this.ruleName,function(e){for(var n=[],t=[],a=0,o=e;a<o.length;a++){var s=o[a];if("string"===typeof s)n.push({name:s});else if(Array.isArray(s))switch(s.length){case 0:break;case 1:n.push({name:s[0]});break;default:t.push({object:[s[0]],name:s[1],message:s[2]})}else if(Array.isArray(s.name))switch(s.name.length){case 0:break;case 1:n.push({name:s.name[0],message:s.message});break;default:t.push({message:s.message,name:s.name[s.name.length-1],object:s.name.slice(0,-1)})}else n.push(s)}return{functions:n,methods:t}}(this.ruleArguments)))},n.metadata={ruleName:"ban",description:"Bans the use of specific functions or global methods.",optionsDescription:i.Utils.dedent(m||(m=a.__makeTemplateObject(['\n            A list of banned functions or methods in the following format:\n\n            * banning functions:\n              * just the name of the function: `"functionName"`\n              * the name of the function in an array with one element: `["functionName"]`\n              * an object in the following format: `{"name": "functionName", "message": "optional explanation message"}`\n            * banning methods:\n              * an array with the object name, method name and optional message: `["objectName", "methodName", "optional message"]`\n              * an object in the following format: `{"name": ["objectName", "methodName"], "message": "optional message"}`\n                * you can also ban deeply nested methods: `{"name": ["foo", "bar", "baz"]}` bans `foo.bar.baz()`\n                * the first element can contain a wildcard (`*`) that matches everything. `{"name": ["*", "forEach"]}` bans                  `[].forEach(...)`, `$(...).forEach(...)`, `arr.forEach(...)`, etc.\n            '],['\n            A list of banned functions or methods in the following format:\n\n            * banning functions:\n              * just the name of the function: \\`"functionName"\\`\n              * the name of the function in an array with one element: \\`["functionName"]\\`\n              * an object in the following format: \\`{"name": "functionName", "message": "optional explanation message"}\\`\n            * banning methods:\n              * an array with the object name, method name and optional message: \\`["objectName", "methodName", "optional message"]\\`\n              * an object in the following format: \\`{"name": ["objectName", "methodName"], "message": "optional message"}\\`\n                * you can also ban deeply nested methods: \\`{"name": ["foo", "bar", "baz"]}\\` bans \\`foo.bar.baz()\\`\n                * the first element can contain a wildcard (\\`*\\`) that matches everything. \\`{"name": ["*", "forEach"]}\\` bans\\\n                  \\`[].forEach(...)\\`, \\`$(...).forEach(...)\\`, \\`arr.forEach(...)\\`, etc.\n            ']))),options:{type:"list",listType:{anyOf:[{type:"string"},{type:"array",items:{type:"string"},minLength:1,maxLength:3},{type:"object",properties:{name:{anyOf:[{type:"string"},{type:"array",items:{type:"string"},minLength:1}]},message:{type:"string"}},required:["name"]}]}},optionExamples:[[!0,"eval",{name:"$",message:"please don't"},["describe","only"],{name:["it","only"],message:"don't focus tests"},{name:["chai","assert","equal"],message:"Use 'strictEqual' instead."},{name:["*","forEach"],message:"Use a regular for loop instead."}]],type:"functionality",typescriptOnly:!1},n}(i.Rules.AbstractRule);n.Rule=r;var m,c=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return a.__extends(n,e),n.prototype.walk=function(e){var n=this,t=function(e){return o.isCallExpression(e)&&(o.isIdentifier(e.expression)?n.checkFunctionBan(e.expression):o.isPropertyAccessExpression(e.expression)&&n.checkForObjectMethodBan(e.expression)),s.forEachChild(e,t)};return s.forEachChild(e,t)},n.prototype.checkForObjectMethodBan=function(e){for(var n=0,t=this.options.methods;n<t.length;n++){var a=t[n];if(e.name.text===a.name){for(var s=e.expression,i=a.object.length-1;i>0;--i)o.isPropertyAccessExpression(s)&&s.name.text===a.object[i]&&(s=s.expression);if("*"===a.object[0]||o.isIdentifier(s)&&s.text===a.object[0]){this.addFailureAtNode(e,r.FAILURE_STRING_FACTORY(a.object.join(".")+"."+a.name,a.message));break}}}},n.prototype.checkFunctionBan=function(e){for(var n=e.text,t=0,a=this.options.functions;t<a.length;t++){var o=a[t];if(o.name===n){this.addFailureAtNode(e,r.FAILURE_STRING_FACTORY(n,o.message));break}}},n}(i.AbstractWalker)}});
//# sourceMappingURL=151.3777505e.chunk.js.map