{"version":3,"sources":["../node_modules/tslint/lib/rules/noBitwiseRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","descriptionDetails","Utils","dedent","__makeTemplateObject","rationale","optionsDescription","options","optionExamples","type","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","kind","SyntaxKind","BinaryExpression","operatorToken","AmpersandToken","AmpersandEqualsToken","BarToken","BarEqualsToken","CaretToken","CaretEqualsToken","LessThanLessThanToken","LessThanLessThanEqualsToken","GreaterThanGreaterThanToken","GreaterThanGreaterThanEqualsToken","GreaterThanGreaterThanGreaterThanToken","GreaterThanGreaterThanGreaterThanEqualsToken","addFailureAtNode","PrefixUnaryExpression","operator","TildeToken"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAsDAC,EAAAC,EAtDAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,IACAE,EAAAF,EAAA,MACAG,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAP,EAAAS,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,aACAC,YAAA,+BACAC,mBAAAd,EAAAe,MAAAC,OAAArB,MAAAE,EAAAoB,sBAAA,ooBACAC,UAAAlB,EAAAe,MAAAC,OAAApB,MAAAC,EAAAoB,sBAAA,4aACAE,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,gBACAC,gBAAA,GAGAtB,EAAAuB,eAAA,8BACAvB,EAtBA,CAuBCD,EAAAyB,MAAAC,cAED,SAAAhB,EAAAiB,GACA,OAAA5B,EAAA6B,aAAAD,EAAAnB,WAAA,SAAAqB,EAAAC,GACA,GAAAA,EAAAC,OAAAhC,EAAAiC,WAAAC,iBACA,OAAAH,EAAAI,cAAAH,MACA,KAAAhC,EAAAiC,WAAAG,eACA,KAAApC,EAAAiC,WAAAI,qBACA,KAAArC,EAAAiC,WAAAK,SACA,KAAAtC,EAAAiC,WAAAM,eACA,KAAAvC,EAAAiC,WAAAO,WACA,KAAAxC,EAAAiC,WAAAQ,iBACA,KAAAzC,EAAAiC,WAAAS,sBACA,KAAA1C,EAAAiC,WAAAU,4BACA,KAAA3C,EAAAiC,WAAAW,4BACA,KAAA5C,EAAAiC,WAAAY,kCACA,KAAA7C,EAAAiC,WAAAa,uCACA,KAAA9C,EAAAiC,WAAAc,6CACAnB,EAAAoB,iBAAAjB,EAAA7B,EAAAuB,qBAGAM,EAAAC,OAAAhC,EAAAiC,WAAAgB,uBACAlB,EAAAmB,WAAAlD,EAAAiC,WAAAkB,YACAvB,EAAAoB,iBAAAjB,EAAA7B,EAAAuB,gBAEA,OAAAzB,EAAA6B,aAAAE,EAAAD,KAxBApC,EAAAQ","file":"static/js/118.47616eab.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-bitwise\",\n        description: \"Disallows bitwise operators.\",\n        descriptionDetails: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Specifically, the following bitwise operators are banned:\\n            `&`, `&=`, `|`, `|=`,\\n            `^`, `^=`, `<<`, `<<=`,\\n            `>>`, `>>=`, `>>>`, `>>>=`, and `~`.\\n            This rule does not ban the use of `&` and `|` for intersection and union types.\"], [\"\\n            Specifically, the following bitwise operators are banned:\\n            \\\\`&\\\\`, \\\\`&=\\\\`, \\\\`|\\\\`, \\\\`|=\\\\`,\\n            \\\\`^\\\\`, \\\\`^=\\\\`, \\\\`<<\\\\`, \\\\`<<=\\\\`,\\n            \\\\`>>\\\\`, \\\\`>>=\\\\`, \\\\`>>>\\\\`, \\\\`>>>=\\\\`, and \\\\`~\\\\`.\\n            This rule does not ban the use of \\\\`&\\\\` and \\\\`|\\\\` for intersection and union types.\"]))),\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            Bitwise operators are often typos - for example `bool1 & bool2` instead of `bool1 && bool2`.\\n            They also can be an indicator of overly clever code which decreases maintainability.\"], [\"\\n            Bitwise operators are often typos - for example \\\\`bool1 & bool2\\\\` instead of \\\\`bool1 && bool2\\\\`.\\n            They also can be an indicator of overly clever code which decreases maintainability.\"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Forbidden bitwise operation\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (node.kind === ts.SyntaxKind.BinaryExpression) {\n            switch (node.operatorToken.kind) {\n                case ts.SyntaxKind.AmpersandToken:\n                case ts.SyntaxKind.AmpersandEqualsToken:\n                case ts.SyntaxKind.BarToken:\n                case ts.SyntaxKind.BarEqualsToken:\n                case ts.SyntaxKind.CaretToken:\n                case ts.SyntaxKind.CaretEqualsToken:\n                case ts.SyntaxKind.LessThanLessThanToken:\n                case ts.SyntaxKind.LessThanLessThanEqualsToken:\n                case ts.SyntaxKind.GreaterThanGreaterThanToken:\n                case ts.SyntaxKind.GreaterThanGreaterThanEqualsToken:\n                case ts.SyntaxKind.GreaterThanGreaterThanGreaterThanToken:\n                case ts.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:\n                    ctx.addFailureAtNode(node, Rule.FAILURE_STRING);\n            }\n        }\n        else if (node.kind === ts.SyntaxKind.PrefixUnaryExpression &&\n            node.operator === ts.SyntaxKind.TildeToken) {\n            ctx.addFailureAtNode(node, Rule.FAILURE_STRING);\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noBitwiseRule.js\n// module id = 2054\n// module chunks = 118"],"sourceRoot":""}