{"version":3,"sources":["../node_modules/tslint/lib/rules/curlyRule.js","../node_modules/tslint/lib/rules/code-examples/curly.examples.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","curly_examples_1","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING_FACTORY","kind","prototype","sourceFile","ruleArguments","indexOf","applyWithFunction","walkAsNeeded","applyWithWalker","CurlyWalker","ruleName","ignoreSameLine","metadata","description","rationale","Utils","dedent","templateObject_1","__makeTemplateObject","optionsDescription","templateObject_2","options","type","items","enum","optionExamples","typescriptOnly","hasFix","codeExamples","FAILURE_STRING_AS_NEEDED","Rules","AbstractRule","ctx","forEachChild","cb","node","isBlock","parent","statements","length","statement","isIterationStatement","isIfStatement","undefined","elseStatement","thenStatement","isBlockUnnecessary","addFailureAt","pos","walk","_this","checkStatement","end","SyntaxKind","IfStatement","childIndex","sameLine","isSameLine","Block","token","getChildAt","tokenText","tokenToString","addFailure","createMissingBraceFix","Replacement","appendText","match","exec","getFullText","indentation","repeat","getLineAndCharacterOfPosition","getStart","character","maybeCarriageReturn","text","getLineEndOfPosition","AbstractWalker","templateObject_3","templateObject_4","templateObject_5","templateObject_6","templateObject_7","templateObject_8","templateObject_9","config","pass","fail"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,MAGAK,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAkCA,OApCAT,EAAAW,UAAAL,EAAAC,GAIAD,EAAAM,uBAAA,SAAAC,GACA,OAAAA,EAAA,8BAEAP,EAAAQ,UAAAN,MAAA,SAAAO,GACA,WAAAN,KAAAO,cAAAC,QAXA,aAYAR,KAAAS,kBAAAH,EAAAI,GAEAV,KAAAW,gBAAA,IAAAC,EAAAN,EAAAN,KAAAa,UACAC,gBAAA,IAAAd,KAAAO,cAAAC,QAdA,wBAkBAX,EAAAkB,UACAF,SAAA,QACAG,YAAA,0DACAC,UAAAtB,EAAAuB,MAAAC,OAAAC,MAAA7B,EAAA8B,sBAAA,yYAA6M,uaAC7MC,mBAAA3B,EAAAuB,MAAAC,OAAAI,MAAAhC,EAAA8B,sBAAA,mmBAvBA,YACA,oBAuBAG,SACAC,KAAA,QACAC,OACAD,KAAA,SACAE,MA5BA,YACA,sBA8BAC,iBAAA,MA9BA,sBA8BA,EA/BA,cAgCAH,KAAA,gBACAI,gBAAA,EACAC,QAAA,EACAC,aAAAnC,EAAAmC,cAGAlC,EAAAmC,yBAAA,8DACAnC,EArCA,CAsCCF,EAAAsC,MAAAC,cAED,SAAAxB,EAAAyB,GACAzC,EAAA0C,aAAAD,EAAA7B,WAAA,SAAA+B,EAAAC,GACA7C,EAAA8C,QAAAD,IAMA,SAAAA,GACA,IAAAE,EAAAF,EAAAE,OACA,OAAAF,EAAAG,WAAAC,OACA,SAEA,IAAAC,EAAAL,EAAAG,WAAA,GACA,GAAAhD,EAAAmD,qBAAAJ,GACA,SAUA,OAAA/C,EAAAoD,cAAAL,MACA/C,EAAAoD,cAAAF,SACAG,IAAAH,EAAAI,eACAP,EAAAQ,gBAAAV,QACAQ,IAAAN,EAAAO,eA3BAE,CAAAX,IACAH,EAAAe,aAAAZ,EAAAG,WAAAU,IAAA,IAAAtD,EAAAmC,0BAEAtC,EAAA0C,aAAAE,EAAAD,KANAhD,EAAAQ,OAgCA,IAwDAuB,EAAAG,EAxDAX,EAAA,SAAAd,GAEA,SAAAc,IACA,cAAAd,KAAAC,MAAAC,KAAAC,YAAAD,KAmDA,OArDAT,EAAAW,UAAAU,EAAAd,GAIAc,EAAAP,UAAA+C,KAAA,SAAA9C,GACA,IAAA+C,EAAArD,KACAqC,EAAA,SAAAC,GAWA,OAVA7C,EAAAmD,qBAAAN,GACAe,EAAAC,eAAAhB,EAAAK,UAAAL,EAAA,EAAAA,EAAAiB,KAEA9D,EAAAoD,cAAAP,KACAe,EAAAC,eAAAhB,EAAAU,cAAAV,EAAA,QACAQ,IAAAR,EAAAS,eACAT,EAAAS,cAAA3C,OAAAV,EAAA8D,WAAAC,aACAJ,EAAAC,eAAAhB,EAAAS,cAAAT,EAAA,IAGA5C,EAAA0C,aAAAE,EAAAD,IAEA,OAAA3C,EAAA0C,aAAA9B,EAAA+B,IAEAzB,EAAAP,UAAAiD,eAAA,SAAAX,EAAAL,EAAAoB,EAAAH,QACA,IAAAA,IAA6BA,EAAAZ,EAAAY,KAC7B,IAAAI,EAAAlE,EAAAmE,WAAA5D,KAAAM,WAAAqC,EAAAQ,IAAAR,EAAAY,KACA,GAAAZ,EAAAvC,OAAAV,EAAA8D,WAAAK,SAAA7D,KAAAwB,QAAAV,iBAAA6C,GAAA,CACA,IAAAG,EAAAxB,EAAAyB,WAAAL,EAAA1D,KAAAM,YACA0D,EAAAtE,EAAAuE,cAAAH,EAAA1D,MACAJ,KAAAkE,WAAAJ,EAAAP,IAAAS,EAAAtB,OAAAa,EAAA1D,EAAAM,uBAAA6D,GAAAhE,KAAAmE,sBAAAxB,EAAAL,EAAAqB,MAIA/C,EAAAP,UAAA8D,sBAAA,SAAAxB,EAAAL,EAAAqB,GACA,GAAAA,EACA,OACAhE,EAAAyE,YAAAC,WAAA1B,EAAAQ,IAAA,MACAxD,EAAAyE,YAAAC,WAAA1B,EAAAY,IAAA,OAIA,IAAAe,EAAA,YAAAC,KAAAjC,EAAAkC,YAAAxE,KAAAM,aACAmE,EAAA,OAAAH,EACA,GAEAA,EAAA,GAAAI,OAAAhF,EAAAiF,8BAAA3E,KAAAM,WAAAgC,EAAAsC,SAAA5E,KAAAM,aAAAuE,WACAC,EAAA,OAAA9E,KAAAM,WAAAyE,KAAA/E,KAAAM,WAAA0E,qBAAA1C,EAAAa,KAAA,GACA,KACA,GACA,OACAxD,EAAAyE,YAAAC,WAAA1B,EAAAQ,IAAA,MACAxD,EAAAyE,YAAAC,WAAA1B,EAAAY,IAAAuB,EAAA,KAAAL,EAAA,OAIA7D,EAtDA,CAuDCjB,EAAAsF,mDCtID9F,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAuBA8B,EAAAG,EAAA2D,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAvBAjG,EAAAC,EAAA,GACAG,EAAAH,EAAA,MAEAH,EAAA0C,eAEAf,YAAA,mDACAyE,OAAA9F,EAAAuB,MAAAC,OAAAC,MAAA7B,EAAA8B,sBAAA,uDAAqJ,yDACrJqE,KAAA/F,EAAAuB,MAAAC,OAAAI,MAAAhC,EAAA8B,sBAAA,oFAA4K,sFAC5KsE,KAAAhG,EAAAuB,MAAAC,OAAA+D,MAAA3F,EAAA8B,sBAAA,wGAAgM,4GAGhML,YAAA,8CACAyE,OAAA9F,EAAAuB,MAAAC,OAAAgE,MAAA5F,EAAA8B,sBAAA,6EAA6K,+EAC7KqE,KAAA/F,EAAAuB,MAAAC,OAAAiE,MAAA7F,EAAA8B,sBAAA,kDAA0I,oDAC1IsE,KAAAhG,EAAAuB,MAAAC,OAAAkE,MAAA9F,EAAA8B,sBAAA,wIAGAL,YAAA,oCACAyE,OAAA9F,EAAAuB,MAAAC,OAAAmE,MAAA/F,EAAA8B,sBAAA,sEAAsK,wEACtKqE,KAAA/F,EAAAuB,MAAAC,OAAAoE,MAAAhG,EAAA8B,sBAAA,mNAA2S,qNAC3SsE,KAAAhG,EAAAuB,MAAAC,OAAAqE,MAAAjG,EAAA8B,sBAAA,oFAA4K","file":"static/js/23.ea342706.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar curly_examples_1 = require(\"./code-examples/curly.examples\");\nvar OPTION_AS_NEEDED = \"as-needed\";\nvar OPTION_IGNORE_SAME_LINE = \"ignore-same-line\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.FAILURE_STRING_FACTORY = function (kind) {\n        return kind + \" statements must be braced\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        if (this.ruleArguments.indexOf(OPTION_AS_NEEDED) !== -1) {\n            return this.applyWithFunction(sourceFile, walkAsNeeded);\n        }\n        return this.applyWithWalker(new CurlyWalker(sourceFile, this.ruleName, {\n            ignoreSameLine: this.ruleArguments.indexOf(OPTION_IGNORE_SAME_LINE) !== -1,\n        }));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"curly\",\n        description: \"Enforces braces for `if`/`for`/`do`/`while` statements.\",\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            ```ts\\n            if (foo === bar)\\n                foo++;\\n                bar++;\\n            ```\\n\\n            In the code above, the author almost certainly meant for both `foo++` and `bar++`\\n            to be executed only if `foo === bar`. However, they forgot braces and `bar++` will be executed\\n            no matter what. This rule could prevent such a mistake.\"], [\"\\n            \\\\`\\\\`\\\\`ts\\n            if (foo === bar)\\n                foo++;\\n                bar++;\\n            \\\\`\\\\`\\\\`\\n\\n            In the code above, the author almost certainly meant for both \\\\`foo++\\\\` and \\\\`bar++\\\\`\\n            to be executed only if \\\\`foo === bar\\\\`. However, they forgot braces and \\\\`bar++\\\\` will be executed\\n            no matter what. This rule could prevent such a mistake.\"]))),\n        optionsDescription: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            One of the following options may be provided:\\n\\n            * `\\\"\", \"\\\"` forbids any unnecessary curly braces.\\n            * `\\\"\", \"\\\"` skips checking braces for control-flow statements\\n            that are on one line and start on the same line as their control-flow keyword\\n        \"], [\"\\n            One of the following options may be provided:\\n\\n            * \\\\`\\\"\", \"\\\"\\\\` forbids any unnecessary curly braces.\\n            * \\\\`\\\"\", \"\\\"\\\\` skips checking braces for control-flow statements\\n            that are on one line and start on the same line as their control-flow keyword\\n        \"])), OPTION_AS_NEEDED, OPTION_IGNORE_SAME_LINE),\n        options: {\n            type: \"array\",\n            items: {\n                type: \"string\",\n                enum: [OPTION_AS_NEEDED, OPTION_IGNORE_SAME_LINE],\n            },\n        },\n        optionExamples: [true, [true, OPTION_IGNORE_SAME_LINE], [true, OPTION_AS_NEEDED]],\n        type: \"functionality\",\n        typescriptOnly: false,\n        hasFix: true,\n        codeExamples: curly_examples_1.codeExamples,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING_AS_NEEDED = \"Block contains only one statement; remove the curly braces.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walkAsNeeded(ctx) {\n    ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isBlock(node) && isBlockUnnecessary(node)) {\n            ctx.addFailureAt(node.statements.pos - 1, 1, Rule.FAILURE_STRING_AS_NEEDED);\n        }\n        ts.forEachChild(node, cb);\n    });\n}\nfunction isBlockUnnecessary(node) {\n    var parent = node.parent;\n    if (node.statements.length !== 1) {\n        return false;\n    }\n    var statement = node.statements[0];\n    if (tsutils_1.isIterationStatement(parent)) {\n        return true;\n    }\n    /*\n    Watch out for this case:\n    if (so) {\n        if (also)\n            foo();\n    } else\n        bar();\n    */\n    return (tsutils_1.isIfStatement(parent) &&\n        !(tsutils_1.isIfStatement(statement) &&\n            statement.elseStatement === undefined &&\n            parent.thenStatement === node &&\n            parent.elseStatement !== undefined));\n}\nvar CurlyWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(CurlyWalker, _super);\n    function CurlyWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CurlyWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        var cb = function (node) {\n            if (tsutils_1.isIterationStatement(node)) {\n                _this.checkStatement(node.statement, node, 0, node.end);\n            }\n            else if (tsutils_1.isIfStatement(node)) {\n                _this.checkStatement(node.thenStatement, node, 0);\n                if (node.elseStatement !== undefined &&\n                    node.elseStatement.kind !== ts.SyntaxKind.IfStatement) {\n                    _this.checkStatement(node.elseStatement, node, 5);\n                }\n            }\n            return ts.forEachChild(node, cb);\n        };\n        return ts.forEachChild(sourceFile, cb);\n    };\n    CurlyWalker.prototype.checkStatement = function (statement, node, childIndex, end) {\n        if (end === void 0) { end = statement.end; }\n        var sameLine = tsutils_1.isSameLine(this.sourceFile, statement.pos, statement.end);\n        if (statement.kind !== ts.SyntaxKind.Block && !(this.options.ignoreSameLine && sameLine)) {\n            var token = node.getChildAt(childIndex, this.sourceFile);\n            var tokenText = ts.tokenToString(token.kind);\n            this.addFailure(token.end - tokenText.length, end, Rule.FAILURE_STRING_FACTORY(tokenText), this.createMissingBraceFix(statement, node, sameLine));\n        }\n    };\n    /** Generate the necessary replacement to add braces to a statement that needs them. */\n    CurlyWalker.prototype.createMissingBraceFix = function (statement, node, sameLine) {\n        if (sameLine) {\n            return [\n                Lint.Replacement.appendText(statement.pos, \" {\"),\n                Lint.Replacement.appendText(statement.end, \" }\"),\n            ];\n        }\n        else {\n            var match = /\\n([\\t ])/.exec(node.getFullText(this.sourceFile)); // determine which character to use (tab or space)\n            var indentation = match === null\n                ? \"\"\n                : // indentation should match start of statement\n                    match[1].repeat(ts.getLineAndCharacterOfPosition(this.sourceFile, node.getStart(this.sourceFile)).character);\n            var maybeCarriageReturn = this.sourceFile.text[this.sourceFile.getLineEndOfPosition(node.pos) - 1] === \"\\r\"\n                ? \"\\r\"\n                : \"\";\n            return [\n                Lint.Replacement.appendText(statement.pos, \" {\"),\n                Lint.Replacement.appendText(statement.end, maybeCarriageReturn + \"\\n\" + indentation + \"}\"),\n            ];\n        }\n    };\n    return CurlyWalker;\n}(Lint.AbstractWalker));\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/curlyRule.js\n// module id = 2024\n// module chunks = 23","\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Lint = require(\"../../index\");\n// tslint:disable: object-literal-sort-keys\nexports.codeExamples = [\n    {\n        description: \"Require curly braces whenever possible (default)\",\n        config: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"curly\\\": true }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"curly\\\": true }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            if (x > 0) {\\n                doStuff();\\n            }\\n        \"], [\"\\n            if (x > 0) {\\n                doStuff();\\n            }\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject([\"\\n            if (x > 0)\\n                doStuff();\\n\\n            if (x > 0) doStuff();\\n        \"], [\"\\n            if (x > 0)\\n                doStuff();\\n\\n            if (x > 0) doStuff();\\n        \"]))),\n    },\n    {\n        description: \"Make an exception for single-line instances\",\n        config: Lint.Utils.dedent(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"curly\\\": [true, \\\"ignore-same-line\\\"] }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"curly\\\": [true, \\\"ignore-same-line\\\"] }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject([\"\\n            if (x > 0) doStuff();\\n        \"], [\"\\n            if (x > 0) doStuff();\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject([\"\\n            if (x > 0)\\n                doStuff()\\n        \"], [\"\\n            if (x > 0)\\n                doStuff()\\n        \"]))),\n    },\n    {\n        description: \"Error on unnecessary curly braces\",\n        config: Lint.Utils.dedent(templateObject_7 || (templateObject_7 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"curly\\\": [true, \\\"as-needed\\\"] }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"curly\\\": [true, \\\"as-needed\\\"] }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_8 || (templateObject_8 = tslib_1.__makeTemplateObject([\"\\n            if (x > 0)\\n                doStuff();\\n\\n            if (x > 0) {\\n                customerUpdates.push(getInfo(customerId));\\n                return customerUpdates;\\n            }\\n        \"], [\"\\n            if (x > 0)\\n                doStuff();\\n\\n            if (x > 0) {\\n                customerUpdates.push(getInfo(customerId));\\n                return customerUpdates;\\n            }\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_9 || (templateObject_9 = tslib_1.__makeTemplateObject([\"\\n            if (x > 0) {\\n                doStuff();\\n            }\\n        \"], [\"\\n            if (x > 0) {\\n                doStuff();\\n            }\\n        \"]))),\n    },\n];\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/code-examples/curly.examples.js\n// module id = 2184\n// module chunks = 23"],"sourceRoot":""}