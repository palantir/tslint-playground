{"version":3,"sources":["../node_modules/tslint/lib/rules/maxClassesPerFileRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","templateObject_3","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","maxCount","prototype","sourceFile","argument","ruleArguments","maxClasses","isNaN","applyWithFunction","walk","excludeClassExpressions","indexOf","metadata","ruleName","description","Utils","dedent","__makeTemplateObject","rationale","optionsDescription","options","type","items","minimum","enum","additionalItems","minLength","maxLength","optionExamples","typescriptOnly","Rules","AbstractRule","ctx","_a","classes","forEachChild","cb","node","isClassDeclaration","isClassExpression","addFailureAtNode"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAiEAC,EAAAC,EAAAC,EAjEAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MAEAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAyCA,OA3CAR,EAAAU,UAAAL,EAAAC,GAKAD,EAAAM,eAAA,SAAAC,GAEA,sBAAAA,EAAA,KADA,IAAAA,EAAA,4CACA,aAEAP,EAAAQ,UAAAN,MAAA,SAAAO,GACA,IAAAC,EAAAP,KAAAQ,cAAA,GACAC,EAAAC,MAAAH,MAAA,EAAAA,EAAA,EACA,OAAAP,KAAAW,kBAAAL,EAAAM,GACAC,yBAAA,IAAAb,KAAAQ,cAAAM,QAfA,6BAgBAL,gBAIAZ,EAAAkB,UACAC,SAAA,uBACAC,YAAArB,EAAAsB,MAAAC,OAAA9B,MAAAG,EAAA4B,sBAAA,wKACAC,UAAAzB,EAAAsB,MAAAC,OAAA7B,MAAAE,EAAA4B,sBAAA,4OACAE,mBAAA1B,EAAAsB,MAAAC,OAAA5B,MAAAC,EAAA4B,sBAAA,kjBACAG,SACAC,KAAA,QACAC,QAEAD,KAAA,SACAE,QAAA,IAGAF,KAAA,SACAG,MAlCA,+BAqCAC,iBAAA,EACAC,UAAA,EACAC,UAAA,GAEAC,kBAAA,WAzCA,8BA0CAP,KAAA,kBACAQ,gBAAA,GAEAnC,EA5CA,CA6CCD,EAAAqC,MAAAC,cAED,SAAAtB,EAAAuB,GACA,IAAA7B,EAAA6B,EAAA7B,WAAA8B,EAAAD,EAAAZ,QAAAd,EAAA2B,EAAA3B,WAAAI,EAAAuB,EAAAvB,wBACAwB,EAAA,EACA,OAAA1C,EAAA2C,aAAAhC,EAAA,SAAAiC,EAAAC,GAOA,OANA9C,EAAA+C,mBAAAD,KAAA3B,GAAAnB,EAAAgD,kBAAAF,OACAH,EACA5B,GACA0B,EAAAQ,iBAAAH,EAAA3C,EAAAM,eAAAM,IAGAd,EAAA2C,aAAAE,EAAAD,KAXApD,EAAAU","file":"static/js/128.6e49489f.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_EXCLUDE_CLASS_EXPRESSIONS = \"exclude-class-expressions\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (maxCount) {\n        var maxClassWord = maxCount === 1 ? \"class per file is\" : \"classes per file are\";\n        return \"A maximum of \" + maxCount + \" \" + maxClassWord + \" allowed.\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        var argument = this.ruleArguments[0];\n        var maxClasses = isNaN(argument) || argument > 0 ? argument : 1;\n        return this.applyWithFunction(sourceFile, walk, {\n            excludeClassExpressions: this.ruleArguments.indexOf(OPTION_EXCLUDE_CLASS_EXPRESSIONS) !== -1,\n            maxClasses: maxClasses,\n        });\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"max-classes-per-file\",\n        description: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            A file may not contain more than the specified number of classes\"], [\"\\n            A file may not contain more than the specified number of classes\"]))),\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            Ensures that files have a single responsibility so that that classes each exist in their own files\"], [\"\\n            Ensures that files have a single responsibility so that that classes each exist in their own files\"]))),\n        optionsDescription: Lint.Utils.dedent(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject([\"\\n            The one required argument is an integer indicating the maximum number of classes that can appear in a\\n            file. An optional argument `\\\"exclude-class-expressions\\\"` can be provided to exclude class expressions\\n            from the overall class count.\"], [\"\\n            The one required argument is an integer indicating the maximum number of classes that can appear in a\\n            file. An optional argument \\\\`\\\"exclude-class-expressions\\\"\\\\` can be provided to exclude class expressions\\n            from the overall class count.\"]))),\n        options: {\n            type: \"array\",\n            items: [\n                {\n                    type: \"number\",\n                    minimum: 1,\n                },\n                {\n                    type: \"string\",\n                    enum: [OPTION_EXCLUDE_CLASS_EXPRESSIONS],\n                },\n            ],\n            additionalItems: false,\n            minLength: 1,\n            maxLength: 2,\n        },\n        optionExamples: [[true, 1], [true, 5, OPTION_EXCLUDE_CLASS_EXPRESSIONS]],\n        type: \"maintainability\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var sourceFile = ctx.sourceFile, _a = ctx.options, maxClasses = _a.maxClasses, excludeClassExpressions = _a.excludeClassExpressions;\n    var classes = 0;\n    return ts.forEachChild(sourceFile, function cb(node) {\n        if (tsutils_1.isClassDeclaration(node) || (!excludeClassExpressions && tsutils_1.isClassExpression(node))) {\n            classes++;\n            if (classes > maxClasses) {\n                ctx.addFailureAtNode(node, Rule.FAILURE_STRING(maxClasses));\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nvar templateObject_1, templateObject_2, templateObject_3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/maxClassesPerFileRule.js\n// module id = 2043\n// module chunks = 128"],"sourceRoot":""}