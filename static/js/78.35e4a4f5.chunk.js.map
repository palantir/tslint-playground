{"version":3,"sources":["../node_modules/tslint/lib/rules/noStringLiteralRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","id","input","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","Utils","dedent","__makeTemplateObject","rationale","optionsDescription","options","optionExamples","type","typescriptOnly","hasFix","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","isElementAccessExpression","argument","argumentExpression","undefined","isStringLiteral","isValidPropertyAccess","text","propertyName","unescapeIdentifier","addFailureAtNode","Replacement","replaceFromTo","expression","end"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAsDAC,EAAAC,EAtDAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAsBA,OAxBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,GAAA,SAAAC,GACA,OAAAA,GAEAP,EAAAQ,UAAAN,MAAA,SAAAO,GACA,OAAAN,KAAAO,kBAAAD,EAAAE,IAGAX,EAAAY,UACAC,SAAA,oBACAC,YAAAf,EAAAgB,MAAAC,OAAAvB,MAAAE,EAAAsB,sBAAA,gcACAC,UAAAnB,EAAAgB,MAAAC,OAAAtB,MAAAC,EAAAsB,sBAAA,kTACAE,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,gBACAC,gBAAA,EACAC,QAAA,GAGAxB,EAAAyB,eAAA,kDACAzB,EAzBA,CA0BCD,EAAA2B,MAAAC,cAED,SAAAhB,EAAAiB,GACA,OAAA9B,EAAA+B,aAAAD,EAAAnB,WAAA,SAAAqB,EAAAC,GACA,GAAAlC,EAAAmC,0BAAAD,GAAA,CACA,IAAAE,EAAAF,EAAAG,mBACA,QAAAC,IAAAF,GACApC,EAAAuC,gBAAAH,IACApC,EAAAwC,sBAAAJ,EAAAK,MAAA,CACA,IAMAC,GADAzC,EAAA0C,oBAAAxC,EAAAM,IACA2B,EAAAK,MACAV,EAAAa,iBAAAR,EAAAjC,EAAAyB,eAEA1B,EAAA2C,YAAAC,cAAAZ,EAAAa,WAAAC,IAAAd,EAAAc,IAAA,IAAAN,KAGA,OAAAzC,EAAA+B,aAAAE,EAAAD,KApBAvC,EAAAS","file":"static/js/78.35e4a4f5.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.id = function (input) {\n        return input;\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-string-literal\",\n        description: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Forbids unnecessary string literal property access.\\n            Allows `obj[\\\"prop-erty\\\"]` (can't be a regular property access).\\n            Disallows `obj[\\\"property\\\"]` (should be `obj.property`).\"], [\"\\n            Forbids unnecessary string literal property access.\\n            Allows \\\\`obj[\\\"prop-erty\\\"]\\\\` (can't be a regular property access).\\n            Disallows \\\\`obj[\\\"property\\\"]\\\\` (should be \\\\`obj.property\\\\`).\"]))),\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            If `--noImplicitAny` is turned off,\\n            property access via a string literal will be 'any' if the property does not exist.\"], [\"\\n            If \\\\`--noImplicitAny\\\\` is turned off,\\n            property access via a string literal will be 'any' if the property does not exist.\"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"functionality\",\n        typescriptOnly: false,\n        hasFix: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"object access via string literals is disallowed\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isElementAccessExpression(node)) {\n            var argument = node.argumentExpression;\n            if (argument !== undefined &&\n                tsutils_1.isStringLiteral(argument) &&\n                tsutils_1.isValidPropertyAccess(argument.text)) {\n                var unescapeIdentifier = \n                // typescript@<2.5.0 has an extra underscore in escaped identifier text content,\n                // to avoid fixing issue `expr['__foo'] â†’ expr.___foo`, unescapeIdentifier() is to be used\n                // As of typescript@3, unescapeIdentifier() removed, thus check in runtime, if the method exists\n                // tslint:disable-next-line no-unsafe-any strict-boolean-expressions\n                ts.unescapeIdentifier || Rule.id;\n                var propertyName = unescapeIdentifier(argument.text);\n                ctx.addFailureAtNode(argument, Rule.FAILURE_STRING, \n                // expr['foo'] -> expr.foo\n                Lint.Replacement.replaceFromTo(node.expression.end, node.end, \".\" + propertyName));\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noStringLiteralRule.js\n// module id = 2096\n// module chunks = 78"],"sourceRoot":""}