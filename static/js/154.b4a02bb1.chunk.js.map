{"version":3,"sources":["../node_modules/tslint/lib/rules/arrowParensRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","banSingleArgParens","ruleArguments","indexOf","metadata","ruleName","description","hasFix","rationale","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","enum","optionExamples","typescriptOnly","FAILURE_STRING_MISSING","FAILURE_STRING_EXISTS","Rules","AbstractRule","ctx","forEachChild","cb","node","isArrowFunction","parameters","length","undefined","typeParameters","parameter","name","kind","SyntaxKind","Identifier","dotDotDotToken","initializer","questionToken","parensAreOptional","openParen","getChildOfKind","OpenParenToken","start","getStart","end","addFailure","Replacement","appendText","closeParen","CloseParenToken","replaceValue","text","substring","pos","match","addFailureAtNode","replaceFromTo","deleteFromTo"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IA8EAC,EA9EAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MAEAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAyBA,OA3BAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,GACAC,oBAAA,IAAAP,KAAAQ,cAAAC,QARA,4BAYAZ,EAAAa,UACAC,SAAA,eACAC,YAAA,4EACAC,QAAA,EACAC,UAAA,yEACAC,mBAAAnB,EAAAoB,MAAAC,OAAA1B,MAAAC,EAAA0B,sBAAA,2UAjBA,yBAkBAC,SACAC,KAAA,SACAC,MApBA,0BAsBAC,iBAAA,MAtBA,0BAuBAF,KAAA,QACAG,gBAAA,GAGA1B,EAAA2B,uBAAA,iFACA3B,EAAA4B,sBAAA,0FACA5B,EA5BA,CA6BCD,EAAA8B,MAAAC,cAED,SAAArB,EAAAsB,GA2BA,OAAAjC,EAAAkC,aAAAD,EAAAxB,WA1BA,SAAA0B,EAAAC,GACA,GAAArC,EAAAsC,gBAAAD,IA2BA,SAAAA,GACA,WAAAA,EAAAE,WAAAC,aACAC,IAAAJ,EAAAK,qBACAD,IAAAJ,EAAAX,QAGAiB,EAFAN,EAAAE,WAAA,IAGAK,KAAAC,OAAA5C,EAAA6C,WAAAC,iBACAN,IAAAE,EAAAK,qBACAP,IAAAE,EAAAM,kBACAR,IAAAE,EAAAO,oBACAT,IAAAE,EAAAjB,MALA,IAAAiB,EAjCAQ,CAAAd,GAAA,CACA,IAAAe,EAAApD,EAAAqD,eAAAhB,EAAApC,EAAA6C,WAAAQ,gBACA,QAAAb,IAAAW,GACA,IAAAlB,EAAAT,QAAAZ,mBAAA,CACA,IAAA8B,EAAAN,EAAAE,WAAA,GACAgB,EAAAZ,EAAAa,SAAAtB,EAAAxB,YACA+C,EAAAd,EAAAc,IACAvB,EAAAwB,WAAAH,EAAAE,EAAAtD,EAAA2B,wBACA5B,EAAAyD,YAAAC,WAAAL,EAAA,KACArD,EAAAyD,YAAAC,WAAAH,EAAA,aAIA,GAAAvB,EAAAT,QAAAZ,mBAAA,CACA,IAAAgD,EAAA7D,EAAAqD,eAAAhB,EAAApC,EAAA6C,WAAAgB,iBAEAC,EAAA,OADA7B,EAAAxB,WAAAsD,KAAAC,UAAAb,EAAAc,IAAA,EAAAd,EAAAc,KACAC,MAAA,iBACAjC,EAAAkC,iBAAA/B,EAAAE,WAAA,GAAApC,EAAA4B,uBACA7B,EAAAyD,YAAAU,cAAAjB,EAAAc,IAAA7B,EAAAE,WAAA,GAAAiB,SAAAtB,EAAAxB,YAAAqD,GACA7D,EAAAyD,YAAAW,aAAAjC,EAAAE,WAAA,GAAAkB,IAAAI,EAAAJ,QAIA,OAAAxD,EAAAkC,aAAAE,EAAAD,KA1BAzC,EAAAQ","file":"static/js/154.b4a02bb1.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar BAN_SINGLE_ARG_PARENS = \"ban-single-arg-parens\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, {\n            banSingleArgParens: this.ruleArguments.indexOf(BAN_SINGLE_ARG_PARENS) !== -1,\n        });\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"arrow-parens\",\n        description: \"Requires parentheses around the parameters of arrow function definitions.\",\n        hasFix: true,\n        rationale: \"Maintains stylistic consistency with other arrow function definitions.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            If `\", \"` is specified, then arrow functions with one parameter\\n            must not have parentheses if removing them is allowed by TypeScript.\"], [\"\\n            If \\\\`\", \"\\\\` is specified, then arrow functions with one parameter\\n            must not have parentheses if removing them is allowed by TypeScript.\"])), BAN_SINGLE_ARG_PARENS),\n        options: {\n            type: \"string\",\n            enum: [BAN_SINGLE_ARG_PARENS],\n        },\n        optionExamples: [true, [true, BAN_SINGLE_ARG_PARENS]],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING_MISSING = \"Parentheses are required around the parameters of an arrow function definition\";\n    Rule.FAILURE_STRING_EXISTS = \"Parentheses are prohibited around the parameter in this single parameter arrow function\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    function cb(node) {\n        if (tsutils_1.isArrowFunction(node) && parensAreOptional(node)) {\n            var openParen = tsutils_1.getChildOfKind(node, ts.SyntaxKind.OpenParenToken);\n            if (openParen === undefined) {\n                if (!ctx.options.banSingleArgParens) {\n                    var parameter = node.parameters[0];\n                    var start = parameter.getStart(ctx.sourceFile);\n                    var end = parameter.end;\n                    ctx.addFailure(start, end, Rule.FAILURE_STRING_MISSING, [\n                        Lint.Replacement.appendText(start, \"(\"),\n                        Lint.Replacement.appendText(end, \")\"),\n                    ]);\n                }\n            }\n            else if (ctx.options.banSingleArgParens) {\n                var closeParen = tsutils_1.getChildOfKind(node, ts.SyntaxKind.CloseParenToken);\n                var charBeforeOpenParen = ctx.sourceFile.text.substring(openParen.pos - 1, openParen.pos);\n                var replaceValue = charBeforeOpenParen.match(/[a-z]/i) !== null ? \" \" : \"\";\n                ctx.addFailureAtNode(node.parameters[0], Rule.FAILURE_STRING_EXISTS, [\n                    Lint.Replacement.replaceFromTo(openParen.pos, node.parameters[0].getStart(ctx.sourceFile), replaceValue),\n                    Lint.Replacement.deleteFromTo(node.parameters[0].end, closeParen.end),\n                ]);\n            }\n        }\n        return ts.forEachChild(node, cb);\n    }\n    return ts.forEachChild(ctx.sourceFile, cb);\n}\nfunction parensAreOptional(node) {\n    return (node.parameters.length === 1 &&\n        node.typeParameters === undefined &&\n        node.type === undefined &&\n        isSimpleParameter(node.parameters[0]));\n}\nfunction isSimpleParameter(parameter) {\n    return (parameter.name.kind === ts.SyntaxKind.Identifier &&\n        parameter.dotDotDotToken === undefined &&\n        parameter.initializer === undefined &&\n        parameter.questionToken === undefined &&\n        parameter.type === undefined);\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/arrowParensRule.js\n// module id = 2012\n// module chunks = 154"],"sourceRoot":""}