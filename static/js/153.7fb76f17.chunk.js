webpackJsonp([153],{2014:function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,a,r=i(1),s=i(843),o=i(54),l=i(1116),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.__extends(t,e),t.prototype.applyWithProgram=function(e,t){var i=new Set(["Promise"].concat(this.ruleArguments));return this.applyWithFunction(e,c,i,t.getTypeChecker())},t.metadata={ruleName:"await-promise",description:"Warns for an awaited value that is not a Promise.",optionsDescription:l.Utils.dedent(n||(n=r.__makeTemplateObject(["\n            A list of 'string' names of any additional classes that should also be treated as Promises.\n            For example, if you are using a class called 'Future' that implements the Thenable interface,\n            you might tell the rule to consider type references with the name 'Future' as valid Promise-like\n            types. Note that this rule doesn't check for type assignability or compatibility; it just checks\n            type reference names.\n        "],["\n            A list of 'string' names of any additional classes that should also be treated as Promises.\n            For example, if you are using a class called 'Future' that implements the Thenable interface,\n            you might tell the rule to consider type references with the name 'Future' as valid Promise-like\n            types. Note that this rule doesn't check for type assignability or compatibility; it just checks\n            type reference names.\n        "]))),options:{type:"list",listType:{type:"array",items:{type:"string"}}},optionExamples:[!0,[!0,"Thenable"]],rationale:l.Utils.dedent(a||(a=r.__makeTemplateObject(["\n            While it is valid JavaScript to await a non-Promise-like value (it will resolve immediately),\n            this pattern is often a programmer error and the resulting semantics can be unintuitive.\n\n            Awaiting non-Promise-like values often is an indication of programmer error, such as\n            forgetting to add parenthesis to call a function that returns a Promise.\n        "],["\n            While it is valid JavaScript to await a non-Promise-like value (it will resolve immediately),\n            this pattern is often a programmer error and the resulting semantics can be unintuitive.\n\n            Awaiting non-Promise-like values often is an indication of programmer error, such as\n            forgetting to add parenthesis to call a function that returns a Promise.\n        "]))),type:"functionality",typescriptOnly:!0,requiresTypeInfo:!0},t.FAILURE_STRING="Invalid 'await' of a non-Promise value.",t.FAILURE_FOR_AWAIT_OF="Invalid 'for-await-of' of a non-AsyncIterable value.",t}(l.Rules.TypedRule);function c(e,t){var i=e.options;return o.forEachChild(e.sourceFile,function i(a){s.isAwaitExpression(a)&&!p(t.getTypeAtLocation(a.expression),n)?e.addFailureAtNode(a,u.FAILURE_STRING):s.isForOfStatement(a)&&void 0!==a.awaitModifier&&!p(t.getTypeAtLocation(a.expression),m)&&e.addFailureAtNode(a.expression,u.FAILURE_FOR_AWAIT_OF);return o.forEachChild(a,i)});function n(e){return i.has(e)}}function p(e,t){if(s.isTypeFlagSet(e,o.TypeFlags.Any))return!0;if(s.isTypeReference(e)&&(e=e.target),void 0!==e.symbol&&t(e.symbol.name))return!0;if(s.isUnionOrIntersectionType(e))return e.types.some(function(e){return p(e,t)});var i=e.getBaseTypes();return void 0!==i&&i.some(function(e){return p(e,t)})}function m(e){return"AsyncIterable"===e||"AsyncIterableIterator"===e}t.Rule=u}});
//# sourceMappingURL=153.7fb76f17.chunk.js.map