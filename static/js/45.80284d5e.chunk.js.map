{"version":3,"sources":["../node_modules/tslint/lib/rules/spaceBeforeFunctionParenRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","ALWAYS_OR_NEVER","enum","type","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","json","options","constructor","undefined","_i","optionNames_1","optionNames","length","optionName","parseOptions","ruleArguments","metadata","description","hasFix","optionExamples","anonymous","named","asyncArrow","properties","method","optionsDescription","Utils","dedent","templateObject_1","__makeTemplateObject","ruleName","typescriptOnly","INVALID_WHITESPACE_ERROR","MISSING_WHITESPACE_ERROR","Rules","AbstractRule","ctx","forEachChild","cb","node","option","kind","SyntaxKind","ArrowFunction","hasTypeParameters","hasModifier","modifiers","AsyncKeyword","Constructor","FunctionDeclaration","FunctionExpression","functionName","name","hasName","text","MethodDeclaration","MethodSignature","GetAccessor","SetAccessor","getOption","openParen","getChildOfKind","OpenParenToken","hasSpace","isWhiteSpace","charCodeAt","end","pos","getStart","addFailureAt","Replacement","deleteText","appendText","check","typeParameters"],"mappings":"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","file":"static/js/45.80284d5e.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar ALWAYS_OR_NEVER = {\n    enum: [\"always\", \"never\"],\n    type: \"string\",\n};\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, parseOptions(this.ruleArguments[0]));\n    };\n    Rule.metadata = {\n        description: \"Require or disallow a space before function parenthesis\",\n        hasFix: true,\n        optionExamples: [\n            true,\n            [true, \"always\"],\n            [true, \"never\"],\n            [true, { anonymous: \"always\", named: \"never\", asyncArrow: \"always\" }],\n        ],\n        options: {\n            properties: {\n                anonymous: ALWAYS_OR_NEVER,\n                asyncArrow: ALWAYS_OR_NEVER,\n                constructor: ALWAYS_OR_NEVER,\n                method: ALWAYS_OR_NEVER,\n                named: ALWAYS_OR_NEVER,\n            },\n            type: \"object\",\n        },\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            One argument which is an object which may contain the keys `anonymous`, `named`, and `asyncArrow`\\n            These should be set to either `\\\"always\\\"` or `\\\"never\\\"`.\\n\\n            * `\\\"anonymous\\\"` checks before the opening paren in anonymous functions\\n            * `\\\"named\\\"` checks before the opening paren in named functions\\n            * `\\\"asyncArrow\\\"` checks before the opening paren in async arrow functions\\n            * `\\\"method\\\"` checks before the opening paren in class methods\\n            * `\\\"constructor\\\"` checks before the opening paren in class constructors\\n        \"], [\"\\n            One argument which is an object which may contain the keys \\\\`anonymous\\\\`, \\\\`named\\\\`, and \\\\`asyncArrow\\\\`\\n            These should be set to either \\\\`\\\"always\\\"\\\\` or \\\\`\\\"never\\\"\\\\`.\\n\\n            * \\\\`\\\"anonymous\\\"\\\\` checks before the opening paren in anonymous functions\\n            * \\\\`\\\"named\\\"\\\\` checks before the opening paren in named functions\\n            * \\\\`\\\"asyncArrow\\\"\\\\` checks before the opening paren in async arrow functions\\n            * \\\\`\\\"method\\\"\\\\` checks before the opening paren in class methods\\n            * \\\\`\\\"constructor\\\"\\\\` checks before the opening paren in class constructors\\n        \"]))),\n        ruleName: \"space-before-function-paren\",\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    Rule.INVALID_WHITESPACE_ERROR = \"Spaces before function parens are disallowed\";\n    Rule.MISSING_WHITESPACE_ERROR = \"Missing whitespace before function parens\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar optionNames = [\"anonymous\", \"asyncArrow\", \"constructor\", \"method\", \"named\"];\nfunction parseOptions(json) {\n    // Need to specify constructor or it will be Object\n    var options = { constructor: undefined };\n    for (var _i = 0, optionNames_1 = optionNames; _i < optionNames_1.length; _i++) {\n        var optionName = optionNames_1[_i];\n        options[optionName] =\n            typeof json === \"object\" ? json[optionName] : json === undefined ? \"always\" : json;\n    }\n    return options;\n}\nfunction walk(ctx) {\n    var options = ctx.options, sourceFile = ctx.sourceFile;\n    ts.forEachChild(sourceFile, function cb(node) {\n        var option = getOption(node, options);\n        if (option !== undefined) {\n            check(node, option);\n        }\n        ts.forEachChild(node, cb);\n    });\n    function check(node, option) {\n        var openParen = tsutils_1.getChildOfKind(node, ts.SyntaxKind.OpenParenToken, sourceFile);\n        // openParen may be missing for an async arrow function `async x => ...`.\n        if (openParen === undefined) {\n            return;\n        }\n        var hasSpace = Lint.isWhiteSpace(sourceFile.text.charCodeAt(openParen.end - 2));\n        if (hasSpace && option === \"never\") {\n            var pos = openParen.getStart() - 1;\n            ctx.addFailureAt(pos, 1, Rule.INVALID_WHITESPACE_ERROR, Lint.Replacement.deleteText(pos, 1));\n        }\n        else if (!hasSpace && option === \"always\") {\n            var pos = openParen.getStart();\n            ctx.addFailureAt(pos, 1, Rule.MISSING_WHITESPACE_ERROR, Lint.Replacement.appendText(pos, \" \"));\n        }\n    }\n}\nfunction getOption(node, options) {\n    switch (node.kind) {\n        case ts.SyntaxKind.ArrowFunction:\n            return !hasTypeParameters(node) &&\n                tsutils_1.hasModifier(node.modifiers, ts.SyntaxKind.AsyncKeyword)\n                ? options.asyncArrow\n                : undefined;\n        case ts.SyntaxKind.Constructor:\n            return options.constructor;\n        case ts.SyntaxKind.FunctionDeclaration:\n        // name is optional for function declaration which is default export (TS will emit error in other cases).\n        // Can be handled in the same way as function expression.\n        case ts.SyntaxKind.FunctionExpression: {\n            var functionName = node.name;\n            var hasName = functionName !== undefined && functionName.text !== \"\";\n            return hasName\n                ? options.named\n                : !hasTypeParameters(node)\n                    ? options.anonymous\n                    : undefined;\n        }\n        case ts.SyntaxKind.MethodDeclaration:\n        case ts.SyntaxKind.MethodSignature:\n        case ts.SyntaxKind.GetAccessor:\n        case ts.SyntaxKind.SetAccessor:\n            return options.method;\n        default:\n            return undefined;\n    }\n}\nfunction hasTypeParameters(node) {\n    return node.typeParameters !== undefined;\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/spaceBeforeFunctionParenRule.js\n// module id = 2140\n// module chunks = 45"],"sourceRoot":""}