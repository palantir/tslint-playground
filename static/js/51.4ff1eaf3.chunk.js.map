{"version":3,"sources":["../node_modules/tslint/lib/rules/preferSwitchRule.js"],"names":["Object","defineProperty","exports","value","_a","_b","templateObject_1","tslib_1","__webpack_require__","utils","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","minCases","ruleArguments","length","applyWithFunction","walk","metadata","ruleName","description","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","properties","optionExamples","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","isIfStatement","switchVariable","casesSeen","everyCase","test","expression","elseStatement","everyCondition","isBinaryExpression","operatorToken","left","right","kind","SyntaxKind","BarBarToken","EqualsEqualsEqualsToken","isSimple","undefined","expr","a","b","getText","nodeEquals","check","thenStatement","addFailureAtNode","PropertyAccessExpression","PrefixUnaryExpression","operator","PlusPlusToken","MinusMinusToken","operand","Identifier","NumericLiteral","StringLiteral","ThisKeyword","NoSubstitutionTemplateLiteral","TrueKeyword","FalseKeyword","NullKeyword"],"mappings":"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","file":"static/js/51.4ff1eaf3.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar _a, _b;\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_MIN_CASES = \"min-cases\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        var minCases = 3;\n        if (this.ruleArguments.length !== 0) {\n            var obj = this.ruleArguments[0];\n            minCases = obj[OPTION_MIN_CASES];\n        }\n        return this.applyWithFunction(sourceFile, walk, minCases);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"prefer-switch\",\n        description: \"Prefer a `switch` statement to an `if` statement with simple `===` comparisons.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            An optional object with the property '\", \"'.\\n            This is the number cases needed before a switch statement is recommended.\\n            Defaults to 3.\"], [\"\\n            An optional object with the property '\", \"'.\\n            This is the number cases needed before a switch statement is recommended.\\n            Defaults to 3.\"])), OPTION_MIN_CASES),\n        options: {\n            type: \"object\",\n            properties: (_a = {},\n                _a[OPTION_MIN_CASES] = { type: \"number\" },\n                _a),\n        },\n        optionExamples: [true, [true, (_b = {}, _b[OPTION_MIN_CASES] = 2, _b)]],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Use a switch statement instead of using multiple '===' checks.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var minCases = ctx.options, sourceFile = ctx.sourceFile;\n    return ts.forEachChild(sourceFile, function cb(node) {\n        if (utils.isIfStatement(node) && check(node, sourceFile, minCases)) {\n            var expression = node.expression, thenStatement = node.thenStatement, elseStatement = node.elseStatement;\n            ctx.addFailureAtNode(expression, Rule.FAILURE_STRING);\n            // Be careful not to fail again for the \"else if\"\n            ts.forEachChild(expression, cb);\n            ts.forEachChild(thenStatement, cb);\n            if (elseStatement !== undefined) {\n                ts.forEachChild(elseStatement, cb);\n            }\n        }\n        else {\n            return ts.forEachChild(node, cb);\n        }\n    });\n}\nfunction check(node, sourceFile, minCases) {\n    var switchVariable;\n    var casesSeen = 0;\n    var couldBeSwitch = everyCase(node, function (expr) {\n        casesSeen++;\n        if (switchVariable !== undefined) {\n            return nodeEquals(expr, switchVariable, sourceFile);\n        }\n        else {\n            switchVariable = expr;\n            return true;\n        }\n    });\n    return couldBeSwitch && casesSeen >= minCases;\n}\nfunction everyCase(_a, test) {\n    var expression = _a.expression, elseStatement = _a.elseStatement;\n    if (!everyCondition(expression, test)) {\n        return false;\n    }\n    return (elseStatement === undefined ||\n        !utils.isIfStatement(elseStatement) ||\n        everyCase(elseStatement, test));\n}\nfunction everyCondition(node, test) {\n    if (!utils.isBinaryExpression(node)) {\n        return false;\n    }\n    var operatorToken = node.operatorToken, left = node.left, right = node.right;\n    switch (operatorToken.kind) {\n        case ts.SyntaxKind.BarBarToken:\n            return everyCondition(left, test) && everyCondition(right, test);\n        case ts.SyntaxKind.EqualsEqualsEqualsToken:\n            return isSimple(left) && isSimple(right) && test(left);\n        default:\n            return false;\n    }\n}\nfunction nodeEquals(a, b, sourceFile) {\n    return a.getText(sourceFile) === b.getText(sourceFile);\n}\nfunction isSimple(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.PropertyAccessExpression:\n            return isSimple(node.expression);\n        case ts.SyntaxKind.PrefixUnaryExpression:\n            switch (node.operator) {\n                case ts.SyntaxKind.PlusPlusToken:\n                case ts.SyntaxKind.MinusMinusToken:\n                    return false;\n                default:\n                    return isSimple(node.operand);\n            }\n        case ts.SyntaxKind.Identifier:\n        case ts.SyntaxKind.NumericLiteral:\n        case ts.SyntaxKind.StringLiteral:\n        case ts.SyntaxKind.ThisKeyword:\n        case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n        case ts.SyntaxKind.TrueKeyword:\n        case ts.SyntaxKind.FalseKeyword:\n        case ts.SyntaxKind.NullKeyword:\n            return true;\n        default:\n            return false;\n    }\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/preferSwitchRule.js\n// module id = 2131\n// module chunks = 51"],"sourceRoot":""}