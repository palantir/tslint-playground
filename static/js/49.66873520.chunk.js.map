{"version":3,"sources":["../node_modules/tslint/lib/rules/quotemarkRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","OPTION_SINGLE","OPTION_DOUBLE","OPTION_BACKTICK","OPTION_JSX_SINGLE","OPTION_JSX_DOUBLE","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","actual","expected","prototype","sourceFile","args","ruleArguments","quoteMark","getQuotemarkPreference","jsxQuoteMark","_a","jsxQuoteFromOption","_i","args_2","length","arg","regularQuotemark","getJSXQuotemarkPreference","applyWithFunction","walk","avoidEscape","hasArg","avoidTemplate","name","indexOf","metadata","ruleName","description","hasFix","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","items","enum","minLength","maxLength","optionExamples","typescriptOnly","Rules","AbstractRule","ctx","forEachChild","cb","node","isStringLiteral","isNoSubstitutionTemplateLiteral","parent","kind","SyntaxKind","TaggedTemplateExpression","isSameLine","getStart","end","expectedQuoteMark","JsxAttribute","actualQuoteMark","text","fixQuoteMark","needsQuoteEscapes","includes","StringLiteral","start","substring","replace","RegExp","addFailure","Replacement","quoteFromOption","args_1"],"mappings":"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","file":"static/js/49.66873520.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_SINGLE = \"single\";\nvar OPTION_DOUBLE = \"double\";\nvar OPTION_BACKTICK = \"backtick\";\nvar OPTION_JSX_SINGLE = \"jsx-single\";\nvar OPTION_JSX_DOUBLE = \"jsx-double\";\nvar OPTION_AVOID_TEMPLATE = \"avoid-template\";\nvar OPTION_AVOID_ESCAPE = \"avoid-escape\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (actual, expected) {\n        return actual + \" should be \" + expected;\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        var args = this.ruleArguments;\n        var quoteMark = getQuotemarkPreference(args);\n        var jsxQuoteMark = getJSXQuotemarkPreference(args);\n        return this.applyWithFunction(sourceFile, walk, {\n            avoidEscape: hasArg(OPTION_AVOID_ESCAPE),\n            avoidTemplate: hasArg(OPTION_AVOID_TEMPLATE),\n            jsxQuoteMark: jsxQuoteMark,\n            quoteMark: quoteMark,\n        });\n        function hasArg(name) {\n            return args.indexOf(name) !== -1;\n        }\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"quotemark\",\n        description: \"Enforces quote character for string literals.\",\n        hasFix: true,\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Five arguments may be optionally provided:\\n\\n            * `\\\"\", \"\\\"` enforces single quotes.\\n            * `\\\"\", \"\\\"` enforces double quotes.\\n            * `\\\"\", \"\\\"` enforces backticks.\\n            * `\\\"\", \"\\\"` enforces single quotes for JSX attributes.\\n            * `\\\"\", \"\\\"` enforces double quotes for JSX attributes.\\n            * `\\\"\", \"\\\"` forbids single-line untagged template strings that do not contain string interpolations.\\n            * `\\\"\", \"\\\"` allows you to use the \\\"other\\\" quotemark in cases where escaping would normally be required.\\n            For example, `[true, \\\"\", \"\\\", \\\"\", \"\\\"]` would not report a failure on the string literal\\n            `'Hello \\\"World\\\"'`.\"], [\"\\n            Five arguments may be optionally provided:\\n\\n            * \\\\`\\\"\", \"\\\"\\\\` enforces single quotes.\\n            * \\\\`\\\"\", \"\\\"\\\\` enforces double quotes.\\n            * \\\\`\\\"\", \"\\\"\\\\` enforces backticks.\\n            * \\\\`\\\"\", \"\\\"\\\\` enforces single quotes for JSX attributes.\\n            * \\\\`\\\"\", \"\\\"\\\\` enforces double quotes for JSX attributes.\\n            * \\\\`\\\"\", \"\\\"\\\\` forbids single-line untagged template strings that do not contain string interpolations.\\n            * \\\\`\\\"\", \"\\\"\\\\` allows you to use the \\\"other\\\" quotemark in cases where escaping would normally be required.\\n            For example, \\\\`[true, \\\"\", \"\\\", \\\"\", \"\\\"]\\\\` would not report a failure on the string literal\\n            \\\\`'Hello \\\"World\\\"'\\\\`.\"])), OPTION_SINGLE, OPTION_DOUBLE, OPTION_BACKTICK, OPTION_JSX_SINGLE, OPTION_JSX_DOUBLE, OPTION_AVOID_TEMPLATE, OPTION_AVOID_ESCAPE, OPTION_DOUBLE, OPTION_AVOID_ESCAPE),\n        options: {\n            type: \"array\",\n            items: {\n                type: \"string\",\n                enum: [\n                    OPTION_SINGLE,\n                    OPTION_DOUBLE,\n                    OPTION_BACKTICK,\n                    OPTION_JSX_SINGLE,\n                    OPTION_JSX_DOUBLE,\n                    OPTION_AVOID_ESCAPE,\n                    OPTION_AVOID_TEMPLATE,\n                ],\n            },\n            minLength: 0,\n            maxLength: 5,\n        },\n        optionExamples: [\n            [true, OPTION_SINGLE, OPTION_AVOID_ESCAPE, OPTION_AVOID_TEMPLATE],\n            [true, OPTION_SINGLE, OPTION_JSX_DOUBLE],\n        ],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var sourceFile = ctx.sourceFile, options = ctx.options;\n    ts.forEachChild(sourceFile, function cb(node) {\n        if (tsutils_1.isStringLiteral(node) ||\n            (options.avoidTemplate &&\n                tsutils_1.isNoSubstitutionTemplateLiteral(node) &&\n                node.parent.kind !== ts.SyntaxKind.TaggedTemplateExpression &&\n                tsutils_1.isSameLine(sourceFile, node.getStart(sourceFile), node.end))) {\n            var expectedQuoteMark = node.parent.kind === ts.SyntaxKind.JsxAttribute\n                ? options.jsxQuoteMark\n                : options.quoteMark;\n            var actualQuoteMark = sourceFile.text[node.end - 1];\n            if (actualQuoteMark === expectedQuoteMark) {\n                return;\n            }\n            var fixQuoteMark = expectedQuoteMark;\n            var needsQuoteEscapes = node.text.includes(expectedQuoteMark);\n            // This string requires escapes to use the expected quote mark, but `avoid-escape` was passed\n            if (needsQuoteEscapes && options.avoidEscape) {\n                if (node.kind === ts.SyntaxKind.StringLiteral) {\n                    return;\n                }\n                // If we are expecting double quotes, use single quotes to avoid\n                //   escaping. Otherwise, just use double quotes.\n                fixQuoteMark = expectedQuoteMark === '\"' ? \"'\" : '\"';\n                // It also includes the fixQuoteMark. Let's try to use single\n                //   quotes instead, unless we originally expected single\n                //   quotes, in which case we will try to use backticks. This\n                //   means that we may use backtick even with avoid-template\n                //   in trying to avoid escaping. What is the desired priority\n                //   here?\n                if (node.text.includes(fixQuoteMark)) {\n                    fixQuoteMark = expectedQuoteMark === \"'\" ? \"`\" : \"'\";\n                    // It contains all of the other kinds of quotes. Escaping is\n                    //   unavoidable, sadly.\n                    if (node.text.includes(fixQuoteMark)) {\n                        return;\n                    }\n                }\n            }\n            var start = node.getStart(sourceFile);\n            var text = sourceFile.text.substring(start + 1, node.end - 1);\n            if (needsQuoteEscapes) {\n                text = text.replace(new RegExp(fixQuoteMark, \"g\"), \"\\\\\" + fixQuoteMark);\n            }\n            text = text.replace(new RegExp(\"\\\\\\\\\" + actualQuoteMark, \"g\"), actualQuoteMark);\n            return ctx.addFailure(start, node.end, Rule.FAILURE_STRING(actualQuoteMark, fixQuoteMark), new Lint.Replacement(start, node.end - start, fixQuoteMark + text + fixQuoteMark));\n        }\n        ts.forEachChild(node, cb);\n    });\n}\nfunction getQuotemarkPreference(args) {\n    var _a;\n    var quoteFromOption = (_a = {},\n        _a[OPTION_SINGLE] = \"'\",\n        _a[OPTION_DOUBLE] = '\"',\n        _a[OPTION_BACKTICK] = \"`\",\n        _a);\n    for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {\n        var arg = args_1[_i];\n        switch (arg) {\n            case OPTION_SINGLE:\n            case OPTION_DOUBLE:\n            case OPTION_BACKTICK:\n                return quoteFromOption[arg];\n        }\n    }\n    // Default to double quotes if no pref is found.\n    return '\"';\n}\nfunction getJSXQuotemarkPreference(args) {\n    var _a;\n    var jsxQuoteFromOption = (_a = {},\n        _a[OPTION_JSX_SINGLE] = \"'\",\n        _a[OPTION_JSX_DOUBLE] = '\"',\n        _a);\n    for (var _i = 0, args_2 = args; _i < args_2.length; _i++) {\n        var arg = args_2[_i];\n        switch (arg) {\n            case OPTION_JSX_SINGLE:\n            case OPTION_JSX_DOUBLE:\n                return jsxQuoteFromOption[arg];\n        }\n    }\n    // The JSX preference was not found, so try to use the regular preference.\n    //   If the regular pref is backtick, use double quotes instead.\n    var regularQuotemark = getQuotemarkPreference(args);\n    return regularQuotemark !== \"`\" ? regularQuotemark : '\"';\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/quotemarkRule.js\n// module id = 2135\n// module chunks = 49"],"sourceRoot":""}