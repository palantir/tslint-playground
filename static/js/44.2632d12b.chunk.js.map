{"version":3,"sources":["../node_modules/tslint/lib/rules/spaceWithinParensRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","FAILURE_NEEDS_SPACE","count","FAILURE_NO_EXTRA_SPACE","prototype","sourceFile","applyWithWalker","SpaceWithinParensWalker","ruleName","whitespaceSize","size","parsedSize","parseInt","Number","isNaN","parseOptions","ruleArguments","metadata","description","hasFix","optionsDescription","Utils","dedent","templateObject_1","__makeTemplateObject","options","type","min","typescriptOnly","FAILURE_NO_SPACE","Rules","AbstractRule","walk","_this","forEachToken","token","kind","SyntaxKind","OpenParenToken","text","charAt","end","checkOpenParenToken","CloseParenToken","checkCloseParenToken","tokenNode","currentPos","currentChar","charCodeAt","allowedSpaceCount","isWhiteSpaceSingleLine","isLineBreak","whitespaceCount","length","pos","addFailureAtWithFix","position","lintMsg","lintFix","Replacement","deleteText","whitespace","repeat","appendText","addFailureAt","AbstractWalker"],"mappings":"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","file":"static/js/44.2632d12b.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.FAILURE_NEEDS_SPACE = function (count) {\n        return \"Needs \" + count + \" whitespace\" + (count > 1 ? \"s\" : \"\") + \" within parentheses\";\n    };\n    Rule.FAILURE_NO_EXTRA_SPACE = function (count) {\n        return \"No more than \" + count + \" whitespace\" + (count > 1 ? \"s\" : \"\") + \" within parentheses allowed\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithWalker(new SpaceWithinParensWalker(sourceFile, this.ruleName, parseOptions(this.ruleArguments[0])));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"space-within-parens\",\n        description: \"Enforces spaces within parentheses or disallow them.  Empty parentheses () are always allowed.\",\n        hasFix: true,\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            You may enforce the amount of whitespace within parentheses.\\n        \"], [\"\\n            You may enforce the amount of whitespace within parentheses.\\n        \"]))),\n        options: { type: \"number\", min: 0 },\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_NO_SPACE = \"Whitespace within parentheses is not allowed\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction parseOptions(whitespaceSize) {\n    var size = 0;\n    if (typeof whitespaceSize === \"number\") {\n        if (whitespaceSize >= 0) {\n            size = whitespaceSize;\n        }\n    }\n    else if (typeof whitespaceSize === \"string\") {\n        var parsedSize = parseInt(whitespaceSize, 10);\n        if (!Number.isNaN(parsedSize) && parsedSize >= 0) {\n            size = parsedSize;\n        }\n    }\n    return {\n        size: size,\n    };\n}\nvar SpaceWithinParensWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(SpaceWithinParensWalker, _super);\n    function SpaceWithinParensWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SpaceWithinParensWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        tsutils_1.forEachToken(sourceFile, function (token) {\n            if (token.kind === ts.SyntaxKind.OpenParenToken) {\n                if (sourceFile.text.charAt(token.end) !== \")\") {\n                    _this.checkOpenParenToken(token);\n                }\n            }\n            else if (token.kind === ts.SyntaxKind.CloseParenToken) {\n                if (sourceFile.text.charAt(token.end - 2) !== \"(\") {\n                    _this.checkCloseParenToken(token);\n                }\n            }\n        });\n    };\n    SpaceWithinParensWalker.prototype.checkOpenParenToken = function (tokenNode) {\n        var currentPos = tokenNode.end;\n        var currentChar = this.sourceFile.text.charCodeAt(currentPos);\n        var allowedSpaceCount = this.options.size;\n        while (ts.isWhiteSpaceSingleLine(currentChar)) {\n            ++currentPos;\n            currentChar = this.sourceFile.text.charCodeAt(currentPos);\n        }\n        if (!ts.isLineBreak(currentChar)) {\n            var whitespaceCount = currentPos - tokenNode.end;\n            if (whitespaceCount !== allowedSpaceCount) {\n                var length = 0;\n                var pos = tokenNode.end;\n                if (whitespaceCount > allowedSpaceCount) {\n                    pos += allowedSpaceCount;\n                    length = whitespaceCount - allowedSpaceCount;\n                }\n                else if (whitespaceCount > 0 && whitespaceCount < allowedSpaceCount) {\n                    pos += allowedSpaceCount - whitespaceCount;\n                }\n                this.addFailureAtWithFix(pos, length, whitespaceCount);\n            }\n        }\n    };\n    SpaceWithinParensWalker.prototype.checkCloseParenToken = function (tokenNode) {\n        var currentPos = tokenNode.end - 2;\n        var currentChar = this.sourceFile.text.charCodeAt(currentPos);\n        var allowedSpaceCount = this.options.size;\n        while (ts.isWhiteSpaceSingleLine(currentChar)) {\n            --currentPos;\n            currentChar = this.sourceFile.text.charCodeAt(currentPos);\n        }\n        /**\n         * Number 40 is open parenthese char code, we skip this cause\n         * it's already been caught by `checkOpenParenToken`\n         */\n        if (!ts.isLineBreak(currentChar) && currentChar !== 40) {\n            var whitespaceCount = tokenNode.end - currentPos - 2;\n            if (whitespaceCount !== allowedSpaceCount) {\n                var length = 0;\n                var pos = currentPos + 1;\n                if (whitespaceCount > allowedSpaceCount) {\n                    length = whitespaceCount - allowedSpaceCount;\n                }\n                this.addFailureAtWithFix(pos, length, whitespaceCount);\n            }\n        }\n    };\n    SpaceWithinParensWalker.prototype.addFailureAtWithFix = function (position, length, whitespaceCount) {\n        var lintMsg;\n        var lintFix;\n        var allowedSpaceCount = this.options.size;\n        if (allowedSpaceCount === 0) {\n            lintMsg = Rule.FAILURE_NO_SPACE;\n            lintFix = Lint.Replacement.deleteText(position, length);\n        }\n        else if (allowedSpaceCount > whitespaceCount) {\n            lintMsg = Rule.FAILURE_NEEDS_SPACE(allowedSpaceCount - whitespaceCount);\n            var whitespace = \" \".repeat(allowedSpaceCount - whitespaceCount);\n            lintFix = Lint.Replacement.appendText(position, whitespace);\n        }\n        else {\n            lintMsg = Rule.FAILURE_NO_EXTRA_SPACE(allowedSpaceCount);\n            lintFix = Lint.Replacement.deleteText(position, whitespaceCount - allowedSpaceCount);\n        }\n        this.addFailureAt(position, length, lintMsg, lintFix);\n    };\n    return SpaceWithinParensWalker;\n}(Lint.AbstractWalker));\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/spaceWithinParensRule.js\n// module id = 2141\n// module chunks = 44"],"sourceRoot":""}