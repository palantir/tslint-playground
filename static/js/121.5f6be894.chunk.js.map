{"version":3,"sources":["../node_modules/tslint/lib/rules/newlinePerChainedCallRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithWalker","NewlinePerChainedCallWalker","ruleName","undefined","metadata","description","Utils","dedent","templateObject_1","__makeTemplateObject","rationale","templateObject_2","optionsDescription","options","type","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","walk","_this","checkForSameLine","node","isCallExpression","isPropertyAccessExpression","expression","isSameLine","end","name","pos","isElementAccessExpression","kind","SyntaxKind","CallExpression","hasChildCall","addFailure","forEachChild","AbstractWalker"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAiBA,OAnBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,gBAAA,IAAAC,EAAAF,EAAAJ,KAAAO,cAAAC,KAGAX,EAAAY,UACAF,SAAA,2BACAG,YAAAd,EAAAe,MAAAC,OAAAC,MAAArB,EAAAsB,sBAAA,sLACAC,UAAAnB,EAAAe,MAAAC,OAAAI,MAAAxB,EAAAsB,sBAAA,sPACAG,mBAAA,mBACAC,QAAA,KACAC,KAAA,QACAC,gBAAA,GAGAvB,EAAAwB,eAAA,sDACAxB,EApBA,CAqBCD,EAAA0B,MAAAC,cACDjC,EAAAO,OACA,IA4BAgB,EAAAG,EA5BAV,EAAA,SAAAR,GAEA,SAAAQ,IACA,cAAAR,KAAAC,MAAAC,KAAAC,YAAAD,KAeA,OAjBAR,EAAAU,UAAAI,EAAAR,GAIAQ,EAAAH,UAAAqB,KAAA,SAAApB,GACA,IAAAqB,EAAAzB,KACA0B,EAAA,SAAAC,GAOA,OANAjC,EAAAkC,iBAAAD,IACAjC,EAAAmC,2BAAAF,EAAAG,aACApC,EAAAqC,WAAA3B,EAAAuB,EAAAG,sBAAAE,IAAAL,EAAAG,WAAAG,KAAAC,MAUA,SAAAP,GACA,IACAG,EAAAH,EAAAG,WACA,KAAApC,EAAAmC,2BAAAC,IAAApC,EAAAyC,0BAAAL,IACAA,eAEA,OAAAA,EAAAM,OAAAzC,EAAA0C,WAAAC,eAfAC,CAAAZ,EAAAG,aACAL,EAAAe,WAAAb,EAAAG,WAAAG,KAAAC,IAAA,EAAAP,EAAAG,WAAAG,KAAAD,IAAAnC,EAAAwB,gBAEA1B,EAAA8C,aAAAd,EAAAD,IAEA,OAAA/B,EAAA8C,aAAArC,EAAAsB,IAEApB,EAlBA,CAmBCV,EAAA8C","file":"static/js/121.5f6be894.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"..\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithWalker(new NewlinePerChainedCallWalker(sourceFile, this.ruleName, undefined));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"newline-per-chained-call\",\n        description: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Requires that chained method calls be broken apart onto separate lines.\"], [\"\\n            Requires that chained method calls be broken apart onto separate lines.\"]))),\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            This style helps to keep code 'vertical', avoiding the need for side-scrolling in IDEs or text editors.\"], [\"\\n            This style helps to keep code 'vertical', avoiding the need for side-scrolling in IDEs or text editors.\"]))),\n        optionsDescription: \"Not configurable\",\n        options: null,\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"When chaining calls, put method calls on new lines.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar NewlinePerChainedCallWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(NewlinePerChainedCallWalker, _super);\n    function NewlinePerChainedCallWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NewlinePerChainedCallWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        var checkForSameLine = function (node) {\n            if (tsutils_1.isCallExpression(node) &&\n                tsutils_1.isPropertyAccessExpression(node.expression) &&\n                tsutils_1.isSameLine(sourceFile, node.expression.expression.end, node.expression.name.pos) &&\n                hasChildCall(node.expression)) {\n                _this.addFailure(node.expression.name.pos - 1, node.expression.name.end, Rule.FAILURE_STRING);\n            }\n            return ts.forEachChild(node, checkForSameLine);\n        };\n        return ts.forEachChild(sourceFile, checkForSameLine);\n    };\n    return NewlinePerChainedCallWalker;\n}(Lint.AbstractWalker));\nfunction hasChildCall(node) {\n    var _a;\n    var expression = node.expression;\n    while (tsutils_1.isPropertyAccessExpression(expression) || tsutils_1.isElementAccessExpression(expression)) {\n        (_a = expression, expression = _a.expression);\n    }\n    return expression.kind === ts.SyntaxKind.CallExpression;\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/newlinePerChainedCallRule.js\n// module id = 2050\n// module chunks = 121"],"sourceRoot":""}