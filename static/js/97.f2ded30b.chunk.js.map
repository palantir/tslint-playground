{"version":3,"sources":["../node_modules/tslint/lib/rules/noInternalModuleRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithWalker","NoInternalModuleWalker","ruleName","undefined","metadata","description","rationale","optionsDescription","options","optionExamples","type","typescriptOnly","hasFix","FAILURE_STRING","Rules","AbstractRule","walk","checkStatements","statements","_i","statements_1","length","statement","kind","SyntaxKind","ModuleDeclaration","checkModuleDeclaration","node","nested","name","Identifier","isNodeFlagSet","NodeFlags","Namespace","GlobalAugmentation","end","pos","start","addFailure","Replacement","replaceFromTo","body","ModuleBlock","AbstractWalker"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,gBAAA,IAAAC,EAAAF,EAAAJ,KAAAO,cAAAC,KAGAX,EAAAY,UACAF,SAAA,qBACAG,YAAA,8BACAC,UAAA,oHACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,aACAC,gBAAA,EACAC,QAAA,GAGApB,EAAAqB,eAAA,mFACArB,EAtBA,CAuBCD,EAAAuB,MAAAC,cACD9B,EAAAO,OACA,IAAAS,EAAA,SAAAR,GAEA,SAAAQ,IACA,cAAAR,KAAAC,MAAAC,KAAAC,YAAAD,KAiCA,OAnCAR,EAAAU,UAAAI,EAAAR,GAIAQ,EAAAH,UAAAkB,KAAA,SAAAjB,GACA,OAAAJ,KAAAsB,gBAAAlB,EAAAmB,aAEAjB,EAAAH,UAAAmB,gBAAA,SAAAC,GACA,QAAAC,EAAA,EAAAC,EAAAF,EAAmDC,EAAAC,EAAAC,OAA0BF,IAAA,CAC7E,IAAAG,EAAAF,EAAAD,GACAG,EAAAC,OAAAjC,EAAAkC,WAAAC,mBACA9B,KAAA+B,uBAAAJ,KAIArB,EAAAH,UAAA4B,uBAAA,SAAAC,EAAAC,GACA,IAAAA,GACAD,EAAAE,KAAAN,OAAAjC,EAAAkC,WAAAM,aACAzC,EAAA0C,cAAAJ,EAAArC,EAAA0C,UAAAC,aAGA5C,EAAA0C,cAAAJ,EAAArC,EAAA0C,UAAAE,oBAAA,CACA,IAAAC,EAAAR,EAAAE,KAAAO,IACAC,EAAAF,EAAA,SAAAd,OACA1B,KAAA2C,WAAAD,EAAAF,EAAA3C,EAAAqB,eAAAtB,EAAAgD,YAAAC,cAAAH,EAAAF,EAAA,cAEA,QAAAhC,IAAAwB,EAAAc,KACA,OAAAd,EAAAc,KAAAlB,MACA,KAAAjC,EAAAkC,WAAAkB,YACA,OAAA/C,KAAAsB,gBAAAU,EAAAc,KAAAvB,YACA,KAAA5B,EAAAkC,WAAAC,kBACA,OAAA9B,KAAA+B,uBAAAC,EAAAc,MAAA,KAIAxC,EApCA,CAqCCV,EAAAoD","file":"static/js/97.f2ded30b.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithWalker(new NoInternalModuleWalker(sourceFile, this.ruleName, undefined));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-internal-module\",\n        description: \"Disallows internal `module`\",\n        rationale: \"Using `module` leads to a confusion of concepts with external modules. Use the newer `namespace` keyword instead.\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"typescript\",\n        typescriptOnly: true,\n        hasFix: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"The internal 'module' syntax is deprecated, use the 'namespace' keyword instead.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar NoInternalModuleWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(NoInternalModuleWalker, _super);\n    function NoInternalModuleWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoInternalModuleWalker.prototype.walk = function (sourceFile) {\n        return this.checkStatements(sourceFile.statements);\n    };\n    NoInternalModuleWalker.prototype.checkStatements = function (statements) {\n        for (var _i = 0, statements_1 = statements; _i < statements_1.length; _i++) {\n            var statement = statements_1[_i];\n            if (statement.kind === ts.SyntaxKind.ModuleDeclaration) {\n                this.checkModuleDeclaration(statement);\n            }\n        }\n    };\n    NoInternalModuleWalker.prototype.checkModuleDeclaration = function (node, nested) {\n        if (!nested &&\n            node.name.kind === ts.SyntaxKind.Identifier &&\n            !tsutils_1.isNodeFlagSet(node, ts.NodeFlags.Namespace) &&\n            // augmenting global uses a special syntax that is allowed\n            // see https://github.com/Microsoft/TypeScript/pull/6213\n            !tsutils_1.isNodeFlagSet(node, ts.NodeFlags.GlobalAugmentation)) {\n            var end = node.name.pos;\n            var start = end - \"module\".length;\n            this.addFailure(start, end, Rule.FAILURE_STRING, Lint.Replacement.replaceFromTo(start, end, \"namespace\"));\n        }\n        if (node.body !== undefined) {\n            switch (node.body.kind) {\n                case ts.SyntaxKind.ModuleBlock:\n                    return this.checkStatements(node.body.statements);\n                case ts.SyntaxKind.ModuleDeclaration:\n                    return this.checkModuleDeclaration(node.body, true);\n            }\n        }\n    };\n    return NoInternalModuleWalker;\n}(Lint.AbstractWalker));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noInternalModuleRule.js\n// module id = 2076\n// module chunks = 97"],"sourceRoot":""}