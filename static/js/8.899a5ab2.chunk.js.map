{"version":3,"sources":["../node_modules/tslint/lib/rules/typedefRule.js","../node_modules/tslint/lib/rules/code-examples/typedef.examples.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","utils","ts","Lint","typedef_examples_1","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithWalker","TypedefWalker","ruleName","ruleArguments","options","_i","ruleArguments_1","length","parseOptions","metadata","description","optionsDescription","Utils","dedent","templateObject_1","__makeTemplateObject","type","items","enum","minLength","maxLength","optionExamples","typescriptOnly","codeExamples","Rules","AbstractRule","walk","_this","cb","node","kind","SyntaxKind","FunctionDeclaration","FunctionExpression","GetAccessor","MethodDeclaration","MethodSignature","_a","name","parameters","checkTypeAnnotation","undefined","ArrowFunction","checkArrowFunction","Parameter","checkParameter","PropertyDeclaration","checkPropertyDeclaration","PropertySignature","_b","VariableDeclaration","checkVariableDeclaration","forEachChild","parent","CallExpression","isTypedPropertyDeclaration","option","isPropertyDeclaration","initializer","CatchClause","ForInStatement","ForOfStatement","ObjectBindingPattern","ArrayBindingPattern","location","typeAnnotation","failure","getText","isNodeArray","addFailure","pos","end","addFailureAtNode","AbstractWalker","nodeOrArray","Array","isArray","templateObject_2","templateObject_3","templateObject_4","templateObject_5","templateObject_6","templateObject_7","templateObject_8","templateObject_9","templateObject_10","templateObject_11","templateObject_12","templateObject_13","templateObject_14","templateObject_15","templateObject_16","templateObject_17","templateObject_18","templateObject_19","templateObject_20","templateObject_21","templateObject_22","templateObject_23","templateObject_24","templateObject_25","templateObject_26","templateObject_27","config","pass","fail"],"mappings":"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","file":"static/js/8.899a5ab2.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar typedef_examples_1 = require(\"./code-examples/typedef.examples\");\nvar OPTION_CALL_SIGNATURE = \"call-signature\";\nvar OPTION_ARROW_CALL_SIGNATURE = \"arrow-call-signature\";\nvar OPTION_PARAMETER = \"parameter\";\nvar OPTION_ARROW_PARAMETER = \"arrow-parameter\";\nvar OPTION_PROPERTY_DECLARATION = \"property-declaration\";\nvar OPTION_VARIABLE_DECLARATION = \"variable-declaration\";\nvar OPTION_MEMBER_VARIABLE_DECLARATION = \"member-variable-declaration\";\nvar OPTION_OBJECT_DESTRUCTURING = \"object-destructuring\";\nvar OPTION_ARRAY_DESTRUCTURING = \"array-destructuring\";\nfunction parseOptions(ruleArguments) {\n    var options = {};\n    for (var _i = 0, ruleArguments_1 = ruleArguments; _i < ruleArguments_1.length; _i++) {\n        var arg = ruleArguments_1[_i];\n        options[arg] = true;\n    }\n    return options;\n}\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithWalker(new TypedefWalker(sourceFile, this.ruleName, parseOptions(this.ruleArguments)));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"typedef\",\n        description: \"Requires type definitions to exist.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Several arguments may be optionally provided:\\n\\n            * `\\\"\", \"\\\"` checks return type of functions.\\n            * `\\\"\", \"\\\"` checks return type of arrow functions.\\n            * `\\\"\", \"\\\"` checks type specifier of function parameters for non-arrow functions.\\n            * `\\\"\", \"\\\"` checks type specifier of function parameters for arrow functions.\\n            * `\\\"\", \"\\\"` checks return types of interface properties.\\n            * `\\\"\", \"\\\"` checks non-binding variable declarations.\\n            * `\\\"\", \"\\\"` checks member variable declarations.\\n            * `\\\"\", \"\\\"` checks object destructuring declarations.\\n            * `\\\"\", \"\\\"` checks array destructuring declarations.\"], [\"\\n            Several arguments may be optionally provided:\\n\\n            * \\\\`\\\"\", \"\\\"\\\\` checks return type of functions.\\n            * \\\\`\\\"\", \"\\\"\\\\` checks return type of arrow functions.\\n            * \\\\`\\\"\", \"\\\"\\\\` checks type specifier of function parameters for non-arrow functions.\\n            * \\\\`\\\"\", \"\\\"\\\\` checks type specifier of function parameters for arrow functions.\\n            * \\\\`\\\"\", \"\\\"\\\\` checks return types of interface properties.\\n            * \\\\`\\\"\", \"\\\"\\\\` checks non-binding variable declarations.\\n            * \\\\`\\\"\", \"\\\"\\\\` checks member variable declarations.\\n            * \\\\`\\\"\", \"\\\"\\\\` checks object destructuring declarations.\\n            * \\\\`\\\"\", \"\\\"\\\\` checks array destructuring declarations.\"])), OPTION_CALL_SIGNATURE, OPTION_ARROW_CALL_SIGNATURE, OPTION_PARAMETER, OPTION_ARROW_PARAMETER, OPTION_PROPERTY_DECLARATION, OPTION_VARIABLE_DECLARATION, OPTION_MEMBER_VARIABLE_DECLARATION, OPTION_OBJECT_DESTRUCTURING, OPTION_ARRAY_DESTRUCTURING),\n        options: {\n            type: \"array\",\n            items: {\n                type: \"string\",\n                enum: [\n                    OPTION_CALL_SIGNATURE,\n                    OPTION_ARROW_CALL_SIGNATURE,\n                    OPTION_PARAMETER,\n                    OPTION_ARROW_PARAMETER,\n                    OPTION_PROPERTY_DECLARATION,\n                    OPTION_VARIABLE_DECLARATION,\n                    OPTION_MEMBER_VARIABLE_DECLARATION,\n                    OPTION_OBJECT_DESTRUCTURING,\n                    OPTION_ARRAY_DESTRUCTURING,\n                ],\n            },\n            minLength: 0,\n            maxLength: 7,\n        },\n        optionExamples: [\n            [true, OPTION_CALL_SIGNATURE, OPTION_PARAMETER, OPTION_MEMBER_VARIABLE_DECLARATION],\n        ],\n        type: \"typescript\",\n        typescriptOnly: true,\n        codeExamples: typedef_examples_1.codeExamples,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar TypedefWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(TypedefWalker, _super);\n    function TypedefWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TypedefWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        var cb = function (node) {\n            switch (node.kind) {\n                case ts.SyntaxKind.FunctionDeclaration:\n                case ts.SyntaxKind.FunctionExpression:\n                case ts.SyntaxKind.GetAccessor:\n                case ts.SyntaxKind.MethodDeclaration:\n                case ts.SyntaxKind.MethodSignature: {\n                    var _a = node, name = _a.name, parameters = _a.parameters, type = _a.type;\n                    _this.checkTypeAnnotation(\"call-signature\", name !== undefined ? name : parameters, type, name);\n                    break;\n                }\n                case ts.SyntaxKind.ArrowFunction:\n                    _this.checkArrowFunction(node);\n                    break;\n                case ts.SyntaxKind.Parameter:\n                    _this.checkParameter(node);\n                    break;\n                case ts.SyntaxKind.PropertyDeclaration:\n                    _this.checkPropertyDeclaration(node);\n                    break;\n                case ts.SyntaxKind.PropertySignature: {\n                    var _b = node, name = _b.name, type = _b.type;\n                    _this.checkTypeAnnotation(\"property-declaration\", name, type, name);\n                    break;\n                }\n                case ts.SyntaxKind.VariableDeclaration:\n                    _this.checkVariableDeclaration(node);\n            }\n            return ts.forEachChild(node, cb);\n        };\n        return ts.forEachChild(sourceFile, cb);\n    };\n    TypedefWalker.prototype.checkArrowFunction = function (_a) {\n        var parent = _a.parent, parameters = _a.parameters, type = _a.type;\n        if (parent.kind !== ts.SyntaxKind.CallExpression && !isTypedPropertyDeclaration(parent)) {\n            this.checkTypeAnnotation(\"arrow-call-signature\", parameters, type);\n        }\n    };\n    TypedefWalker.prototype.checkParameter = function (_a) {\n        var parent = _a.parent, name = _a.name, type = _a.type;\n        var isArrowFunction = parent.kind === ts.SyntaxKind.ArrowFunction;\n        var option = (function () {\n            if (!isArrowFunction) {\n                return \"parameter\";\n            }\n            else if (isTypedPropertyDeclaration(parent.parent)) {\n                return undefined;\n            }\n            else if (utils.isPropertyDeclaration(parent.parent)) {\n                return \"member-variable-declaration\";\n            }\n            else {\n                return \"arrow-parameter\";\n            }\n        })();\n        if (option !== undefined) {\n            this.checkTypeAnnotation(option, name, type, name);\n        }\n    };\n    TypedefWalker.prototype.checkPropertyDeclaration = function (_a) {\n        var initializer = _a.initializer, name = _a.name, type = _a.type;\n        // If this is an arrow function, it doesn't need to have a typedef on the property declaration\n        // as the typedefs can be on the function's parameters instead\n        if (initializer === undefined || initializer.kind !== ts.SyntaxKind.ArrowFunction) {\n            this.checkTypeAnnotation(\"member-variable-declaration\", name, type, name);\n        }\n    };\n    TypedefWalker.prototype.checkVariableDeclaration = function (_a) {\n        var parent = _a.parent, name = _a.name, type = _a.type;\n        // variable declarations should always have a grandparent, but check that to be on the safe side.\n        // catch statements will be the parent of the variable declaration\n        // for-in/for-of loops will be the gradparent of the variable declaration\n        if (parent.kind === ts.SyntaxKind.CatchClause ||\n            parent.parent.kind === ts.SyntaxKind.ForInStatement ||\n            parent.parent.kind === ts.SyntaxKind.ForOfStatement) {\n            return;\n        }\n        var option = (function () {\n            switch (name.kind) {\n                case ts.SyntaxKind.ObjectBindingPattern:\n                    return \"object-destructuring\";\n                case ts.SyntaxKind.ArrayBindingPattern:\n                    return \"array-destructuring\";\n                default:\n                    return \"variable-declaration\";\n            }\n        })();\n        this.checkTypeAnnotation(option, name, type, name);\n    };\n    TypedefWalker.prototype.checkTypeAnnotation = function (option, location, typeAnnotation, name) {\n        if (this.options[option] === true && typeAnnotation === undefined) {\n            var failure = \"expected \" + option + (name === undefined ? \"\" : \": '\" + name.getText() + \"'\") + \" to have a typedef\";\n            if (isNodeArray(location)) {\n                this.addFailure(location.pos - 1, location.end + 1, failure);\n            }\n            else {\n                this.addFailureAtNode(location, failure);\n            }\n        }\n    };\n    return TypedefWalker;\n}(Lint.AbstractWalker));\nfunction isTypedPropertyDeclaration(node) {\n    return utils.isPropertyDeclaration(node) && node.type !== undefined;\n}\nfunction isNodeArray(nodeOrArray) {\n    return Array.isArray(nodeOrArray);\n}\nexports.isNodeArray = isNodeArray;\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/typedefRule.js\n// module id = 2149\n// module chunks = 8","\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Lint = require(\"../../index\");\n// tslint:disable: object-literal-sort-keys\nexports.codeExamples = [\n    {\n        description: \"Requires type definitions for call signatures\",\n        config: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"call-signature\\\"] }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"call-signature\\\"] }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            function add(x, y): number {\\n                return x + y;\\n            }\\n        \"], [\"\\n            function add(x, y): number {\\n                return x + y;\\n            }\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject([\"\\n            function add(x, y) {\\n                return x + y;\\n            }\\n        \"], [\"\\n            function add(x, y) {\\n                return x + y;\\n            }\\n        \"]))),\n    },\n    {\n        description: \"Requires type definitions for arrow call signatures\",\n        config: Lint.Utils.dedent(templateObject_4 || (templateObject_4 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"arrow-call-signature\\\"] }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"arrow-call-signature\\\"] }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_5 || (templateObject_5 = tslib_1.__makeTemplateObject([\"\\n            const add = (x, y): number => x + y;\\n        \"], [\"\\n            const add = (x, y): number => x + y;\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_6 || (templateObject_6 = tslib_1.__makeTemplateObject([\"\\n            const add = (x, y) => x + y;\\n        \"], [\"\\n            const add = (x, y) => x + y;\\n        \"]))),\n    },\n    {\n        description: \"Requires type definitions for parameters\",\n        config: Lint.Utils.dedent(templateObject_7 || (templateObject_7 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"parameter\\\"] }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"parameter\\\"] }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_8 || (templateObject_8 = tslib_1.__makeTemplateObject([\"\\n            function add(x: number, y: number) {\\n                return x + y;\\n            }\\n        \"], [\"\\n            function add(x: number, y: number) {\\n                return x + y;\\n            }\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_9 || (templateObject_9 = tslib_1.__makeTemplateObject([\"\\n            function add(x, y) {\\n                return x + y;\\n            }\\n        \"], [\"\\n            function add(x, y) {\\n                return x + y;\\n            }\\n        \"]))),\n    },\n    {\n        description: \"Requires type definitions for arrow function parameters\",\n        config: Lint.Utils.dedent(templateObject_10 || (templateObject_10 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"arrow-parameter\\\"] }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"arrow-parameter\\\"] }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_11 || (templateObject_11 = tslib_1.__makeTemplateObject([\"\\n            const add = (x: number, y: number) => x + y;\\n        \"], [\"\\n            const add = (x: number, y: number) => x + y;\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_12 || (templateObject_12 = tslib_1.__makeTemplateObject([\"\\n            const add = (x, y) => x + y;\\n        \"], [\"\\n            const add = (x, y) => x + y;\\n        \"]))),\n    },\n    {\n        description: \"Requires type definitions for property declarations\",\n        config: Lint.Utils.dedent(templateObject_13 || (templateObject_13 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"property-declaration\\\"] }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"property-declaration\\\"] }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_14 || (templateObject_14 = tslib_1.__makeTemplateObject([\"\\n            interface I {\\n                foo: number;\\n                bar: string;\\n            }\\n    \"], [\"\\n            interface I {\\n                foo: number;\\n                bar: string;\\n            }\\n    \"]))),\n        fail: Lint.Utils.dedent(templateObject_15 || (templateObject_15 = tslib_1.__makeTemplateObject([\"\\n            interface I {\\n                foo;\\n                bar;\\n            }\\n        \"], [\"\\n            interface I {\\n                foo;\\n                bar;\\n            }\\n        \"]))),\n    },\n    {\n        description: \"Requires type definitions for variable declarations\",\n        config: Lint.Utils.dedent(templateObject_16 || (templateObject_16 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"variable-declaration\\\"] }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"variable-declaration\\\"] }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_17 || (templateObject_17 = tslib_1.__makeTemplateObject([\"\\n            let x: number;\\n        \"], [\"\\n            let x: number;\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_18 || (templateObject_18 = tslib_1.__makeTemplateObject([\"\\n            let x;\\n        \"], [\"\\n            let x;\\n        \"]))),\n    },\n    {\n        description: \"Requires type definitions for member variable declarations\",\n        config: Lint.Utils.dedent(templateObject_19 || (templateObject_19 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"member-variable-declaration\\\"] }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"member-variable-declaration\\\"] }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_20 || (templateObject_20 = tslib_1.__makeTemplateObject([\"\\n            class MyClass {\\n                x: number;\\n            }\\n        \"], [\"\\n            class MyClass {\\n                x: number;\\n            }\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_21 || (templateObject_21 = tslib_1.__makeTemplateObject([\"\\n            class MyClass {\\n                x;\\n            }\\n        \"], [\"\\n            class MyClass {\\n                x;\\n            }\\n        \"]))),\n    },\n    {\n        description: \"Requires type definitions when destructuring objects.\",\n        config: Lint.Utils.dedent(templateObject_22 || (templateObject_22 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"object-destructuring\\\"] }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"object-destructuring\\\"] }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_23 || (templateObject_23 = tslib_1.__makeTemplateObject([\"\\n            interface FooBar {\\n                foo: number;\\n                bar: string;\\n            }\\n            const foobar = { foo: 1, bar: '2' };\\n            const { foo, bar }: FooBar = foobar;\\n        \"], [\"\\n            interface FooBar {\\n                foo: number;\\n                bar: string;\\n            }\\n            const foobar = { foo: 1, bar: '2' };\\n            const { foo, bar }: FooBar = foobar;\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_24 || (templateObject_24 = tslib_1.__makeTemplateObject([\"\\n            interface FooBar {\\n                foo: number;\\n                bar: string;\\n            }\\n            const foobar = { foo: 1, bar: '2' };\\n            const { foo, bar } = foobar;\\n        \"], [\"\\n            interface FooBar {\\n                foo: number;\\n                bar: string;\\n            }\\n            const foobar = { foo: 1, bar: '2' };\\n            const { foo, bar } = foobar;\\n        \"]))),\n    },\n    {\n        description: \"Requires type definitions when destructuring arrays.\",\n        config: Lint.Utils.dedent(templateObject_25 || (templateObject_25 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"array-destructuring\\\"] }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"typedef\\\": [true, \\\"array-destructuring\\\"] }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_26 || (templateObject_26 = tslib_1.__makeTemplateObject([\"\\n            const foobar = [1, '2'];\\n            const [foo, bar]: Array<number | string> = foobar;\\n        \"], [\"\\n            const foobar = [1, '2'];\\n            const [foo, bar]: Array<number | string> = foobar;\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_27 || (templateObject_27 = tslib_1.__makeTemplateObject([\"\\n            const foobar = [1, '2'];\\n            const [foo, bar] = foobar;\\n        \"], [\"\\n            const foobar = [1, '2'];\\n            const [foo, bar] = foobar;\\n        \"]))),\n    },\n];\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22, templateObject_23, templateObject_24, templateObject_25, templateObject_26, templateObject_27;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/code-examples/typedef.examples.js\n// module id = 2201\n// module chunks = 8"],"sourceRoot":""}