{"version":3,"sources":["../node_modules/tslint/lib/rules/noEmptyInterfaceRule.js","../node_modules/tslint/lib/rules/code-examples/noEmptyInterface.examples.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","noEmptyInterface_examples_1","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","rationale","optionsDescription","options","type","typescriptOnly","codeExamples","FAILURE_STRING","FAILURE_STRING_FOR_EXTENDS","Rules","AbstractRule","ctx","forEachChild","cb","node","isInterfaceDeclaration","members","length","undefined","heritageClauses","_a","types","typeArguments","extendsOneTypeWithoutTypeArguments","addFailureAtNode","name","templateObject_1","templateObject_2","templateObject_3","config","Utils","dedent","__makeTemplateObject","pass","fail"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,MACAK,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAT,EAAAW,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,qBACAC,YAAA,4BACAC,UAAA,+DACAC,mBAAA,oBACAC,QAAA,KACAC,KAAA,aACAC,gBAAA,EACAC,aAAAnB,EAAAmB,cAGAlB,EAAAmB,eAAA,4CACAnB,EAAAoB,2BAAA,oEACApB,EAtBA,CAuBCF,EAAAuB,MAAAC,cAED,SAAAb,EAAAc,GACA,OAAA1B,EAAA2B,aAAAD,EAAAhB,WAAA,SAAAkB,EAAAC,GACA,OAAA9B,EAAA+B,uBAAAD,IACA,IAAAA,EAAAE,QAAAC,cACAC,IAAAJ,EAAAK,iBASA,SAAAC,GACA,IAAAC,EAAAD,EAAAC,MACA,OAAAA,EAAAJ,QACA,OACA,SACA,OACA,YAAAC,IAAAG,EAAA,GAAAC,cACA,QACA,UAhBAC,CAAAT,EAAAK,gBAAA,KACAR,EAAAa,iBAAAV,EAAAW,UAAAP,IAAAJ,EAAAK,gBACA/B,EAAAoB,2BACApB,EAAAmB,gBAEAtB,EAAA2B,aAAAE,EAAAD,KAXAjC,EAAAQ,0CC9BAV,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAWA6C,EAAAC,EAAAC,EAXA9C,EAAAC,EAAA,GACAG,EAAAH,EAAA,MAEAH,EAAA0B,eAEAN,YAAA,8BACA6B,OAAA3C,EAAA4C,MAAAC,OAAAL,MAAA5C,EAAAkD,sBAAA,oEAAkK,sEAClKC,KAAA/C,EAAA4C,MAAAC,OAAAJ,MAAA7C,EAAAkD,sBAAA,uFAA+K,yFAC/KE,KAAAhD,EAAA4C,MAAAC,OAAAH,MAAA9C,EAAAkD,sBAAA,4CAAoI","file":"static/js/20.52aac14f.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar noEmptyInterface_examples_1 = require(\"./code-examples/noEmptyInterface.examples\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-empty-interface\",\n        description: \"Forbids empty interfaces.\",\n        rationale: \"An empty interface is equivalent to its supertype (or `{}`).\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        type: \"typescript\",\n        typescriptOnly: true,\n        codeExamples: noEmptyInterface_examples_1.codeExamples,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"An empty interface is equivalent to `{}`.\";\n    Rule.FAILURE_STRING_FOR_EXTENDS = \"An interface declaring no members is equivalent to its supertype.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isInterfaceDeclaration(node) &&\n            node.members.length === 0 &&\n            (node.heritageClauses === undefined ||\n                extendsOneTypeWithoutTypeArguments(node.heritageClauses[0]))) {\n            return ctx.addFailureAtNode(node.name, node.heritageClauses !== undefined\n                ? Rule.FAILURE_STRING_FOR_EXTENDS\n                : Rule.FAILURE_STRING);\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction extendsOneTypeWithoutTypeArguments(_a) {\n    var types = _a.types;\n    switch (types.length) {\n        case 0:\n            return true; // don't crash on empty extends list\n        case 1:\n            return types[0].typeArguments === undefined; // allow interfaces that provide type arguments for the extended type\n        default:\n            return false; // allow interfaces extending more than one types\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noEmptyInterfaceRule.js\n// module id = 2067\n// module chunks = 20","\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Lint = require(\"../../index\");\n// tslint:disable: object-literal-sort-keys\nexports.codeExamples = [\n    {\n        description: \"Disallows empty interfaces.\",\n        config: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            \\\"rules\\\": { \\\"no-empty-interface\\\": true }\\n        \"], [\"\\n            \\\"rules\\\": { \\\"no-empty-interface\\\": true }\\n        \"]))),\n        pass: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            interface I {\\n                foo: string;\\n            }\\n        \"], [\"\\n            interface I {\\n                foo: string;\\n            }\\n        \"]))),\n        fail: Lint.Utils.dedent(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject([\"\\n            interface I { }\\n        \"], [\"\\n            interface I { }\\n        \"]))),\n    },\n];\nvar templateObject_1, templateObject_2, templateObject_3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/code-examples/noEmptyInterface.examples.js\n// module id = 2187\n// module chunks = 20"],"sourceRoot":""}