webpackJsonp([76],{2099:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),s=n(843),i=n(54),a=n(1116),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o.__extends(t,e),t.FAILURE_STRING=function(e){return"expected a 'break' before '"+i.tokenToString(e)+"'"},t.prototype.apply=function(e){return this.applyWithWalker(new c(e,this.ruleName,void 0))},t.metadata={ruleName:"no-switch-case-fall-through",description:"Disallows falling through case statements.",descriptionDetails:a.Utils.dedent(r||(r=o.__makeTemplateObject(["\n            For example, the following is not allowed:\n\n            ```ts\n            switch(foo) {\n                case 1:\n                    someFunc(foo);\n                case 2:\n                    someOtherFunc(foo);\n            }\n            ```\n\n            However, fall through is allowed when case statements are consecutive or\n            a magic `/* falls through */` comment is present. The following is valid:\n\n            ```ts\n            switch(foo) {\n                case 1:\n                    someFunc(foo);\n                    /* falls through */\n                case 2:\n                case 3:\n                    someOtherFunc(foo);\n            }\n            ```"],["\n            For example, the following is not allowed:\n\n            \\`\\`\\`ts\n            switch(foo) {\n                case 1:\n                    someFunc(foo);\n                case 2:\n                    someOtherFunc(foo);\n            }\n            \\`\\`\\`\n\n            However, fall through is allowed when case statements are consecutive or\n            a magic \\`/* falls through */\\` comment is present. The following is valid:\n\n            \\`\\`\\`ts\n            switch(foo) {\n                case 1:\n                    someFunc(foo);\n                    /* falls through */\n                case 2:\n                case 3:\n                    someOtherFunc(foo);\n            }\n            \\`\\`\\`"]))),rationale:"Fall though in switch statements is often unintentional and a bug.",optionsDescription:"Not configurable.",options:null,optionExamples:[!0],type:"functionality",typescriptOnly:!1},t}(a.Rules.AbstractRule);t.Rule=l;var r,c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o.__extends(t,e),t.prototype.walk=function(e){var t=this,n=function(e){return s.isSwitchStatement(e)&&t.visitSwitchStatement(e),i.forEachChild(e,n)};return i.forEachChild(e,n)},t.prototype.visitSwitchStatement=function(e){var t=this,n=e.caseBlock.clauses;n.forEach(function(e,o){if(o!==n.length-1&&0!==e.statements.length&&!s.endsControlFlow(e)&&!t.isFallThroughAllowed(e)){var i=n[o+1].getChildAt(0);t.addFailureAtNode(i,l.FAILURE_STRING(i.kind))}})},t.prototype.isFallThroughAllowed=function(e){var t=this,n=i.getLeadingCommentRanges(this.sourceFile.text,e.end);return void 0!==n&&n.some(function(e){return/^\s*falls through\b/i.test(t.sourceFile.text.slice(e.pos+2,e.end))})},t}(a.AbstractWalker);t.NoSwitchCaseFallThroughWalker=c}});
//# sourceMappingURL=76.b35e9a0d.chunk.js.map