{"version":3,"sources":["../node_modules/tslint/lib/rules/preferConditionalExpressionRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","assigned","prototype","sourceFile","applyWithFunction","walk","checkElseIf","ruleArguments","indexOf","metadata","ruleName","description","Utils","dedent","__makeTemplateObject","rationale","optionsDescription","options","type","enum","optionExamples","typescriptOnly","Rules","AbstractRule","ctx","forEachChild","cb","node","isIfStatement","detectAssignment","statement","inElse","undefined","elseStatement","then","thenStatement","elze","a","b","getText","nodeEquals","isBlock","statements","length","isExpressionStatement","isBinaryExpression","expression","_a","kind","operatorToken","left","right","SyntaxKind","EqualsToken","isSameLine","getStart","end","addFailureAtNode","getChildAt"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAgGAC,EAAAC,EAhGAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MAEAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAyBA,OA3BAR,EAAAU,UAAAL,EAAAC,GAKAD,EAAAM,eAAA,SAAAC,GACA,+DAAAA,EAAA,yBAEAP,EAAAQ,UAAAN,MAAA,SAAAO,GACA,OAAAN,KAAAO,kBAAAD,EAAAE,GACAC,aAAA,IAAAT,KAAAU,cAAAC,QAZA,oBAgBAd,EAAAe,UACAC,SAAA,gCACAC,YAAAlB,EAAAmB,MAAAC,OAAA1B,MAAAE,EAAAyB,sBAAA,gRACAC,UAAAtB,EAAAmB,MAAAC,OAAAzB,MAAAC,EAAAyB,sBAAA,sMACAE,mBAAA,sFACAC,SACAC,KAAA,SACAC,MAvBA,kBAyBAC,iBAAA,MAzBA,kBA0BAF,KAAA,gBACAG,gBAAA,GAEA3B,EA5BA,CA6BCD,EAAA6B,MAAAC,cAED,SAAAlB,EAAAmB,GACA,IAAArB,EAAAqB,EAAArB,WAAAG,EAAAkB,EAAAP,QAAAX,YACA,OAAAd,EAAAiC,aAAAtB,EAAA,SAAAuB,EAAAC,GACA,GAAApC,EAAAqC,cAAAD,GAAA,CACA,IAAA1B,EAyBA,SAAA4B,EAAAC,EAAA3B,EAAAG,EAAAyB,GACA,GAAAxC,EAAAqC,cAAAE,GAAA,CACA,QAAAC,IAAAzB,GAAAyB,QAAAC,IAAAF,EAAAG,cACA,OAEA,IAAAC,EAAAL,EAAAC,EAAAK,cAAAhC,EAAAG,GAAA,GACA,QAAA0B,IAAAE,EACA,OAEA,IAAAE,EAAAP,EAAAC,EAAAG,cAAA9B,EAAAG,GAAA,GACA,YAAA0B,IAAAI,GAkBA,SAAAC,EAAAC,EAAAnC,GACA,OAAAkC,EAAAE,QAAApC,KAAAmC,EAAAC,QAAApC,GAnBAqC,CAAAN,EAAAE,EAAAjC,GAAA+B,OAAAF,EAEA,GAAAzC,EAAAkD,QAAAX,GACA,WAAAA,EAAAY,WAAAC,OACAd,EAAAC,EAAAY,WAAA,GAAAvC,EAAAG,EAAAyB,QACAC,EAEA,GAAAzC,EAAAqD,sBAAAd,IAAAvC,EAAAsD,mBAAAf,EAAAgB,YAAA,CACA,IAAAC,EAAAjB,EAAAgB,WAAAE,EAAAD,EAAAE,cAAAD,KAAAE,EAAAH,EAAAG,KAAAC,EAAAJ,EAAAI,MACA,OAAAH,IAAAxD,EAAA4D,WAAAC,aACA9D,EAAA+D,WAAAnD,EAAAgD,EAAAI,SAAApD,GAAAgD,EAAAK,KACAN,OACAlB,EAGA,OAlDAH,CAAAF,EAAAxB,EAAAG,GAIA,QAHA0B,IAAA/B,GACAuB,EAAAiC,iBAAA9B,EAAA+B,WAAA,EAAAvD,GAAAT,EAAAM,eAAAC,EAAAsC,QAAApC,UAEA6B,IAAA/B,IAAAK,EAEA,GAGA,GAFAd,EAAAiC,aAAAE,EAAAmB,WAAApB,GACAlC,EAAAiC,aAAAE,EAAAQ,cAAAT,QACAM,IAAAL,EAAAM,cACA,OAGA,IADAN,IAAAM,cACA1C,EAAAkD,QAAAd,IAAA,IAAAA,EAAAe,WAAAC,QACAhB,IAAAe,WAAA,SAEiBnD,EAAAqC,cAAAD,IAGjB,OAAAnC,EAAAiC,aAAAE,EAAAD,KAxBAzC,EAAAS","file":"static/js/57.ba504aec.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_CHECK_ELSE_IF = \"check-else-if\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (assigned) {\n        return \"Use a conditional expression instead of assigning to '\" + assigned + \"' in multiple places.\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, {\n            checkElseIf: this.ruleArguments.indexOf(OPTION_CHECK_ELSE_IF) !== -1,\n        });\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"prefer-conditional-expression\",\n        description: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Recommends to use a conditional expression instead of assigning to the same thing in each branch of an if statement.\"], [\"\\n            Recommends to use a conditional expression instead of assigning to the same thing in each branch of an if statement.\"]))),\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            This reduces duplication and can eliminate an unnecessary variable declaration.\"], [\"\\n            This reduces duplication and can eliminate an unnecessary variable declaration.\"]))),\n        optionsDescription: \"If `\" + OPTION_CHECK_ELSE_IF + \"` is specified, the rule also checks nested if-else-if statements.\",\n        options: {\n            type: \"string\",\n            enum: [OPTION_CHECK_ELSE_IF],\n        },\n        optionExamples: [true, [true, OPTION_CHECK_ELSE_IF]],\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var sourceFile = ctx.sourceFile, checkElseIf = ctx.options.checkElseIf;\n    return ts.forEachChild(sourceFile, function cb(node) {\n        if (tsutils_1.isIfStatement(node)) {\n            var assigned = detectAssignment(node, sourceFile, checkElseIf);\n            if (assigned !== undefined) {\n                ctx.addFailureAtNode(node.getChildAt(0, sourceFile), Rule.FAILURE_STRING(assigned.getText(sourceFile)));\n            }\n            if (assigned !== undefined || !checkElseIf) {\n                // Be careful not to fail again for the \"else if\"\n                do {\n                    ts.forEachChild(node.expression, cb);\n                    ts.forEachChild(node.thenStatement, cb);\n                    if (node.elseStatement === undefined) {\n                        return;\n                    }\n                    node = node.elseStatement;\n                    while (tsutils_1.isBlock(node) && node.statements.length === 1) {\n                        node = node.statements[0];\n                    }\n                } while (tsutils_1.isIfStatement(node));\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\n/**\n * @param inElse `undefined` when this is the top level if statement, `false` when inside the then branch, `true` when inside else\n */\nfunction detectAssignment(statement, sourceFile, checkElseIf, inElse) {\n    if (tsutils_1.isIfStatement(statement)) {\n        if (inElse === false || (!checkElseIf && inElse) || statement.elseStatement === undefined) {\n            return undefined;\n        }\n        var then = detectAssignment(statement.thenStatement, sourceFile, checkElseIf, false);\n        if (then === undefined) {\n            return undefined;\n        }\n        var elze = detectAssignment(statement.elseStatement, sourceFile, checkElseIf, true);\n        return elze !== undefined && nodeEquals(then, elze, sourceFile) ? then : undefined;\n    }\n    else if (tsutils_1.isBlock(statement)) {\n        return statement.statements.length === 1\n            ? detectAssignment(statement.statements[0], sourceFile, checkElseIf, inElse)\n            : undefined;\n    }\n    else if (tsutils_1.isExpressionStatement(statement) && tsutils_1.isBinaryExpression(statement.expression)) {\n        var _a = statement.expression, kind = _a.operatorToken.kind, left = _a.left, right = _a.right;\n        return kind === ts.SyntaxKind.EqualsToken &&\n            tsutils_1.isSameLine(sourceFile, right.getStart(sourceFile), right.end)\n            ? left\n            : undefined;\n    }\n    else {\n        return undefined;\n    }\n}\nfunction nodeEquals(a, b, sourceFile) {\n    return a.getText(sourceFile) === b.getText(sourceFile);\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/preferConditionalExpressionRule.js\n// module id = 2124\n// module chunks = 57"],"sourceRoot":""}