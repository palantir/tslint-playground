{"version":3,"sources":["../node_modules/tslint/lib/rules/noInvalidTemplateStringsRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","utils","ts","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","optionsDescription","options","optionExamples","rationale","type","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","isStringLiteral","text","getText","findTemplateStrings","instance","exec","backslashCount","length","instanceIsEscaped","start","getStart","index","addFailureAt","check"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IAEAG,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAP,EAAAS,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,8BAEAC,YAAA,gDACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,UAAA,qDACAC,KAAA,gBACAC,gBAAA,GAGAlB,EAAAmB,eAAA,qDACAnB,EAtBA,CADAH,EAAA,MAwBCuB,MAAAC,cAED,SAAAZ,EAAAa,GACA,OAAAvB,EAAAwB,aAAAD,EAAAf,WAAA,SAAAiB,EAAAC,GAIA,OAHA3B,EAAA4B,gBAAAD,IAKA,SAAAA,GACA,IAAAE,EAAAF,EAAAG,QAAAN,EAAAf,YACAsB,EAAA,oBACAC,EAAAD,EAAAE,KAAAJ,GACA,YAAAG,GAAA,CACA,IAAAE,EAAAF,EAAA,GAAAG,OACAC,EAAAF,EAAA,MACA,IAAAE,EAAA,CACA,IAAAC,EAAAV,EAAAW,YAAAN,EAAAO,MAAAL,GACAV,EAAAgB,aAAAH,EAAAL,EAAA,GAAAG,OAAAjC,EAAAmB,gBAEAW,EAAAD,EAAAE,KAAAJ,IAfAY,CAAAd,GAEA1B,EAAAwB,aAAAE,EAAAD,KANA9B,EAAAM","file":"static/js/96.3f84d82c.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-invalid-template-strings\",\n        // tslint:disable-next-line no-invalid-template-strings\n        description: \"Warns on use of `${` in non-template strings.\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        rationale: \"Interpolation will only work for template strings.\",\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Interpolation will only work for template strings.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (utils.isStringLiteral(node)) {\n            check(node);\n        }\n        return ts.forEachChild(node, cb);\n    });\n    function check(node) {\n        var text = node.getText(ctx.sourceFile);\n        var findTemplateStrings = /(\\\\*)(\\$\\{.+?\\})/g;\n        var instance = findTemplateStrings.exec(text);\n        while (instance !== null) {\n            var backslashCount = instance[1].length;\n            var instanceIsEscaped = backslashCount % 2 === 1;\n            if (!instanceIsEscaped) {\n                var start = node.getStart() + (instance.index + backslashCount);\n                ctx.addFailureAt(start, instance[2].length, Rule.FAILURE_STRING);\n            }\n            instance = findTemplateStrings.exec(text);\n        }\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noInvalidTemplateStringsRule.js\n// module id = 2077\n// module chunks = 96"],"sourceRoot":""}