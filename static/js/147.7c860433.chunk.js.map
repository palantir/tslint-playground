{"version":3,"sources":["../node_modules/tslint/lib/rules/commentFormatRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","utils","ts","enableDisableRules_1","Lint","utils_1","OPTION_SPACE","OPTION_LOWERCASE","OPTION_UPPERCASE","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","options","ruleArguments","__assign","case","indexOf","failureSuffix","space","option","ignorePattern","undefined","exceptions","RegExp","IGNORE_PATTERN_FAILURE_FACTORY","ignoreWords","length","map","word","escapeRegExp","trim","join","IGNORE_WORDS_FAILURE_FACTORY","composeExceptions","metadata","ruleName","description","rationale","optionsDescription","Utils","dedent","__makeTemplateObject","type","items","anyOf","enum","properties","ignore-words","ignore-pattern","minProperties","maxProperties","minLength","maxLength","optionExamples","typescriptOnly","hasFix","LOWERCASE_FAILURE","UPPERCASE_FAILURE","LEADING_SPACE_FAILURE","words","pattern","Rules","AbstractRule","ctx","forEachComment","fullText","_a","kind","pos","end","start","SyntaxKind","SingleLineCommentTrivia","referencedFiles","some","ref","commentText","slice","test","addFailure","Replacement","appendText","ENABLE_DISABLE_REGEX","charPos","search","isLowerCase","isUpperCase"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAsJAC,EAtJAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,KACAI,EAAAJ,EAAA,MACAK,EAAAL,EAAA,IACAM,EAAA,cACAC,EAAA,kBACAC,EAAA,kBACAC,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KA2DA,OA7DAb,EAAAe,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,GA2DAC,EA3DAP,KAAAQ,cA4DArB,EAAAsB,UAA6BC,MAAA,IAAAH,EAAAI,QAAAhB,GAC7B,GACA,IAAAY,EAAAI,QAAAf,GACA,EACA,EAAAgB,cAAA,GAAAC,OAAA,IAAAN,EAAAI,QAAAjB,IAEA,SAAAoB,GACA,qBAAAA,EAAA,CAGA,IAAAC,EAAAD,EAAA,kBACA,QAAAE,IAAAD,EACA,OACAE,WAAA,IAAAC,OAAA,SAAAH,EAAA,KACAH,cAAAf,EAAAsB,+BAAAJ,IAGA,IAAAK,EAAAN,EAAA,gBACA,YAAAE,IAAAI,GAAA,IAAAA,EAAAC,QAEAJ,WAAA,IAAAC,OAAA,WAAAE,EAAAE,IAAA,SAAAC,GAAiF,OAAA9B,EAAA+B,aAAAD,EAAAE,UAA4CC,KAAA,aAC7Hd,cAAAf,EAAA8B,6BAAAP,SAHA,GAdgGQ,CAAArB,IAAAc,OAAA,OALhG,IAAAd,GAxDAV,EAAAgC,UACAC,SAAA,iBACAC,YAAA,sDACAC,UAAA,gEACAC,mBAAAzC,EAAA0C,MAAAC,OAAAjD,MAAAC,EAAAiD,sBAAA,spEACA7B,SACA8B,KAAA,QACAC,OACAC,QAEAF,KAAA,SACAG,MAAA,qDAGAH,KAAA,SACAI,YACAC,gBACAL,KAAA,QACAC,OACAD,KAAA,WAGAM,kBACAN,KAAA,WAGAO,cAAA,EACAC,cAAA,KAIAC,UAAA,EACAC,UAAA,GAEAC,kBACA,qCACA,qBAAuCN,gBAAA,mBACvC,qBAAuCC,iBAAA,oBAEvCN,KAAA,QACAY,gBAAA,EACAC,QAAA,GAGArD,EAAAsD,kBAAA,2CACAtD,EAAAuD,kBAAA,2CACAvD,EAAAwD,sBAAA,kCACAxD,EAAA8B,6BAAA,SAAA2B,GACA,0BAAAA,EAAA5B,KAAA,OAEA7B,EAAAsB,+BAAA,SAAAoC,GACA,qDAAAA,EAAA,KAEA1D,EA9DA,CA+DCL,EAAAgE,MAAAC,cA6BD,SAAAnD,EAAAoD,GACArE,EAAAsE,eAAAD,EAAAtD,WAAA,SAAAwD,EAAAC,GACA,IAAAC,EAAAD,EAAAC,KAAAC,EAAAF,EAAAE,IAAAC,EAAAH,EAAAG,IACAC,EAAAF,EAAA,EACA,KAAAD,IAAAxE,EAAA4E,WAAAC,yBAEAF,IAAAD,GAEA,MAAAJ,EAAAK,IACAP,EAAAtD,WAAAgE,gBAAAC,KAAA,SAAAC,GAAoE,OAAAA,EAAAP,QAAAO,EAAAN,UALpE,CASA,WAAAJ,EAAAK,MACAA,EAEA,GAAAA,IAAAD,EAAA,CAGA,IAAAO,EAAAX,EAAAY,MAAAP,EAAAD,GAEA,0CAAAS,KAAAF,KAGAb,EAAAnD,QAAAM,OAAA,MAAA0D,EAAA,IACAb,EAAAgB,WAAAT,EAAAD,EAAAnE,EAAAwD,uBACA7D,EAAAmF,YAAAC,WAAAX,EAAA,SAGA,IAAAP,EAAAnD,QAAAG,WACAM,IAAA0C,EAAAnD,QAAAU,YAAAyC,EAAAnD,QAAAU,WAAAwD,KAAAF,IACAhF,EAAAsF,qBAAAJ,KAAAF,KAFA,CAMA,IAAAO,EAAAP,EAAAQ,OAAA,OACA,IAAAD,IAGA,IAAApB,EAAAnD,QAAAG,KACAjB,EAAAuF,YAAAT,EAAAO,KACApB,EAAAgB,WAAAT,EAAAD,EAAAnE,EAAAsD,kBAAAO,EAAAnD,QAAAK,eAGAnB,EAAAwF,YAAAV,EAAAO,KACApB,EAAAgB,WAAAT,EAAAD,EAAAnE,EAAAuD,kBAAAM,EAAAnD,QAAAK,qBAzEA5B,EAAAa","file":"static/js/147.7c860433.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar enableDisableRules_1 = require(\"../enableDisableRules\");\nvar Lint = require(\"../index\");\nvar utils_1 = require(\"../utils\");\nvar OPTION_SPACE = \"check-space\";\nvar OPTION_LOWERCASE = \"check-lowercase\";\nvar OPTION_UPPERCASE = \"check-uppercase\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, parseOptions(this.ruleArguments));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"comment-format\",\n        description: \"Enforces formatting rules for single-line comments.\",\n        rationale: \"Helps maintain a consistent, readable style in your codebase.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Three arguments may be optionally provided:\\n\\n            * `\\\"check-space\\\"` requires that all single-line comments must begin with a space, as in `// comment`\\n                * note that for comments starting with multiple slashes, e.g. `///`, leading slashes are ignored\\n                * TypeScript reference comments are ignored completely\\n            * `\\\"check-lowercase\\\"` requires that the first non-whitespace character of a comment must be lowercase, if applicable.\\n            * `\\\"check-uppercase\\\"` requires that the first non-whitespace character of a comment must be uppercase, if applicable.\\n\\n            Exceptions to `\\\"check-lowercase\\\"` or `\\\"check-uppercase\\\"` can be managed with object that may be passed as last argument.\\n\\n            One of two options can be provided in this object:\\n\\n                * `\\\"ignore-words\\\"`  - array of strings - words that will be ignored at the beginning of the comment.\\n                * `\\\"ignore-pattern\\\"` - string - RegExp pattern that will be ignored at the beginning of the comment.\\n            \"], [\"\\n            Three arguments may be optionally provided:\\n\\n            * \\\\`\\\"check-space\\\"\\\\` requires that all single-line comments must begin with a space, as in \\\\`// comment\\\\`\\n                * note that for comments starting with multiple slashes, e.g. \\\\`///\\\\`, leading slashes are ignored\\n                * TypeScript reference comments are ignored completely\\n            * \\\\`\\\"check-lowercase\\\"\\\\` requires that the first non-whitespace character of a comment must be lowercase, if applicable.\\n            * \\\\`\\\"check-uppercase\\\"\\\\` requires that the first non-whitespace character of a comment must be uppercase, if applicable.\\n\\n            Exceptions to \\\\`\\\"check-lowercase\\\"\\\\` or \\\\`\\\"check-uppercase\\\"\\\\` can be managed with object that may be passed as last argument.\\n\\n            One of two options can be provided in this object:\\n\\n                * \\\\`\\\"ignore-words\\\"\\\\`  - array of strings - words that will be ignored at the beginning of the comment.\\n                * \\\\`\\\"ignore-pattern\\\"\\\\` - string - RegExp pattern that will be ignored at the beginning of the comment.\\n            \"]))),\n        options: {\n            type: \"array\",\n            items: {\n                anyOf: [\n                    {\n                        type: \"string\",\n                        enum: [\"check-space\", \"check-lowercase\", \"check-uppercase\"],\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            \"ignore-words\": {\n                                type: \"array\",\n                                items: {\n                                    type: \"string\",\n                                },\n                            },\n                            \"ignore-pattern\": {\n                                type: \"string\",\n                            },\n                        },\n                        minProperties: 1,\n                        maxProperties: 1,\n                    },\n                ],\n            },\n            minLength: 1,\n            maxLength: 4,\n        },\n        optionExamples: [\n            [true, \"check-space\", \"check-uppercase\"],\n            [true, \"check-lowercase\", { \"ignore-words\": [\"TODO\", \"HACK\"] }],\n            [true, \"check-lowercase\", { \"ignore-pattern\": \"STD\\\\w{2,3}\\\\b\" }],\n        ],\n        type: \"style\",\n        typescriptOnly: false,\n        hasFix: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.LOWERCASE_FAILURE = \"comment must start with lowercase letter\";\n    Rule.UPPERCASE_FAILURE = \"comment must start with uppercase letter\";\n    Rule.LEADING_SPACE_FAILURE = \"comment must start with a space\";\n    Rule.IGNORE_WORDS_FAILURE_FACTORY = function (words) {\n        return \" or the word(s): \" + words.join(\", \");\n    };\n    Rule.IGNORE_PATTERN_FAILURE_FACTORY = function (pattern) {\n        return \" or its start must match the regex pattern \\\"\" + pattern + \"\\\"\";\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction parseOptions(options) {\n    return tslib_1.__assign({ case: options.indexOf(OPTION_LOWERCASE) !== -1\n            ? 1 /* Lower */\n            : options.indexOf(OPTION_UPPERCASE) !== -1\n                ? 2 /* Upper */\n                : 0 /* None */, failureSuffix: \"\", space: options.indexOf(OPTION_SPACE) !== -1 }, composeExceptions(options[options.length - 1]));\n}\nfunction composeExceptions(option) {\n    if (typeof option !== \"object\") {\n        return undefined;\n    }\n    var ignorePattern = option[\"ignore-pattern\"];\n    if (ignorePattern !== undefined) {\n        return {\n            exceptions: new RegExp(\"^\\\\s*(\" + ignorePattern + \")\"),\n            failureSuffix: Rule.IGNORE_PATTERN_FAILURE_FACTORY(ignorePattern),\n        };\n    }\n    var ignoreWords = option[\"ignore-words\"];\n    if (ignoreWords !== undefined && ignoreWords.length !== 0) {\n        return {\n            exceptions: new RegExp(\"^\\\\s*(?:\" + ignoreWords.map(function (word) { return utils_1.escapeRegExp(word.trim()); }).join(\"|\") + \")\\\\b\"),\n            failureSuffix: Rule.IGNORE_WORDS_FAILURE_FACTORY(ignoreWords),\n        };\n    }\n    return undefined;\n}\nfunction walk(ctx) {\n    utils.forEachComment(ctx.sourceFile, function (fullText, _a) {\n        var kind = _a.kind, pos = _a.pos, end = _a.end;\n        var start = pos + 2;\n        if (kind !== ts.SyntaxKind.SingleLineCommentTrivia ||\n            // exclude empty comments\n            start === end ||\n            // exclude /// <reference path=\"...\">\n            (fullText[start] === \"/\" &&\n                ctx.sourceFile.referencedFiles.some(function (ref) { return ref.pos >= pos && ref.end <= end; }))) {\n            return;\n        }\n        // skip all leading slashes\n        while (fullText[start] === \"/\") {\n            ++start;\n        }\n        if (start === end) {\n            return;\n        }\n        var commentText = fullText.slice(start, end);\n        // whitelist //#region and //#endregion and JetBrains IDEs' \"//noinspection ...\"\n        if (/^(?:#(?:end)?region|noinspection\\s)/.test(commentText)) {\n            return;\n        }\n        if (ctx.options.space && commentText[0] !== \" \") {\n            ctx.addFailure(start, end, Rule.LEADING_SPACE_FAILURE, [\n                Lint.Replacement.appendText(start, \" \"),\n            ]);\n        }\n        if (ctx.options.case === 0 /* None */ ||\n            (ctx.options.exceptions !== undefined && ctx.options.exceptions.test(commentText)) ||\n            enableDisableRules_1.ENABLE_DISABLE_REGEX.test(commentText)) {\n            return;\n        }\n        // search for first non-space character to check if lower or upper\n        var charPos = commentText.search(/\\S/);\n        if (charPos === -1) {\n            return;\n        }\n        if (ctx.options.case === 1 /* Lower */) {\n            if (!utils_1.isLowerCase(commentText[charPos])) {\n                ctx.addFailure(start, end, Rule.LOWERCASE_FAILURE + ctx.options.failureSuffix);\n            }\n        }\n        else if (!utils_1.isUpperCase(commentText[charPos])) {\n            ctx.addFailure(start, end, Rule.UPPERCASE_FAILURE + ctx.options.failureSuffix);\n        }\n    });\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/commentFormatRule.js\n// module id = 2022\n// module chunks = 147"],"sourceRoot":""}