{"version":3,"sources":["../node_modules/tslint/lib/rules/noBooleanLiteralCompareRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","utils","ts","Lint","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","negate","prototype","applyWithProgram","sourceFile","program","applyWithFunction","walk","undefined","getTypeChecker","metadata","ruleName","description","hasFix","optionsDescription","options","optionExamples","rationale","Utils","dedent","__makeTemplateObject","type","typescriptOnly","requiresTypeInfo","Rules","TypedRule","ctx","checker","forEachChild","cb","node","isBinaryExpression","cmp","left","operatorToken","right","eq","getEqualsKind","leftValue","booleanFromExpression","isPositive","expression","rightValue","deconstructComparison","isTypeFlagSet","getTypeAtLocation","TypeFlags","Boolean","getBooleanComparison","addFailureAtNode","_a","deleted","Replacement","deleteFromTo","end","getStart","kind","SyntaxKind","AsExpression","BinaryExpression","needsParenthesesForNegate","appendText","getEnd","fix","TrueKeyword","FalseKeyword"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAwGAC,EAxGAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAsBA,OAxBAR,EAAAU,UAAAL,EAAAC,GAKAD,EAAAM,eAAA,SAAAC,GACA,uEAAAA,EAAA,oCAEAP,EAAAQ,UAAAC,iBAAA,SAAAC,EAAAC,GACA,OAAAR,KAAAS,kBAAAF,EAAAG,OAAAC,EAAAH,EAAAI,mBAGAf,EAAAgB,UACAC,SAAA,6BACAC,YAAA,gEACAC,QAAA,EACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,UAAAxB,EAAAyB,MAAAC,OAAA/B,MAAAC,EAAA+B,sBAAA,4ZACAC,KAAA,QACAC,gBAAA,EACAC,kBAAA,GAEA7B,EAzBA,CA0BCD,EAAA+B,MAAAC,WAED,SAAAlB,EAAAmB,EAAAC,GACA,OAAAnC,EAAAoC,aAAAF,EAAAtB,WAAA,SAAAyB,EAAAC,GACA,GAAAvC,EAAAwC,mBAAAD,GAAA,CACA,IAAAE,EAQA,SAAAF,EAAAH,GACA,IAAAK,EAkCA,SAAAF,GACA,IAAAG,EAAAH,EAAAG,KAAAC,EAAAJ,EAAAI,cAAAC,EAAAL,EAAAK,MACAC,EAAA3C,EAAA4C,cAAAH,GACA,QAAA1B,IAAA4B,EACA,OAEA,IAAAE,EAAAC,EAAAN,GACA,QAAAzB,IAAA8B,EACA,OAAgBrC,OAAAqC,IAAAF,EAAAI,WAAAC,WAAAN,GAEhB,IAAAO,EAAAH,EAAAJ,GACA,QAAA3B,IAAAkC,EACA,OAAgBzC,OAAAyC,IAAAN,EAAAI,WAAAC,WAAAR,GAEhB,OAhDAU,CAAAb,GACA,YAAAtB,IAAAwB,GACAzC,EAAAqD,cAAAjB,EAAAkB,kBAAAb,EAAAS,YAAAjD,EAAAsD,UAAAC,SAEAf,OADAxB,EAZAwC,CAAAlB,EAAAH,QACAnB,IAAAwB,GACAN,EAAAuB,iBAAAjB,EAAAS,WAAA/C,EAAAM,eAAAgC,EAAA/B,QAaA,SAAA6B,EAAAoB,GACA,IAAAjD,EAAAiD,EAAAjD,OAAAwC,EAAAS,EAAAT,WACAU,EAAArB,EAAAG,OAAAQ,EACAhD,EAAA2D,YAAAC,aAAAvB,EAAAG,KAAAqB,IAAAxB,EAAAwB,KACA7D,EAAA2D,YAAAC,aAAAvB,EAAAyB,WAAAzB,EAAAK,MAAAoB,YACA,OAAAtD,EAcA,SAAA6B,GACA,OAAAA,EAAA0B,MACA,KAAAhE,EAAAiE,WAAAC,aACA,KAAAlE,EAAAiE,WAAAE,iBACA,SACA,QACA,UAjBAC,CAAAnB,IAEAU,EACA1D,EAAA2D,YAAAS,WAAA/B,EAAAyB,WAAA,MACA9D,EAAA2D,YAAAS,WAAA/B,EAAAgC,SAAA,OAIAX,EAAA1D,EAAA2D,YAAAS,WAAA/B,EAAAyB,WAAA,MAVAJ,EAnBAY,CAAAjC,EAAAE,IAGA,OAAAxC,EAAAoC,aAAAE,EAAAD,KAsDA,SAAAU,EAAAT,GACA,OAAAA,EAAA0B,MACA,KAAAhE,EAAAiE,WAAAO,YACA,SACA,KAAAxE,EAAAiE,WAAAQ,aACA,SACA,QACA,QAtEA/E,EAAAQ","file":"static/js/117.d6065f92.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (negate) {\n        return \"This expression is unnecessarily compared to a boolean. Just \" + (negate ? \"negate it\" : \"use it directly\") + \".\";\n    };\n    Rule.prototype.applyWithProgram = function (sourceFile, program) {\n        return this.applyWithFunction(sourceFile, walk, undefined, program.getTypeChecker());\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-boolean-literal-compare\",\n        description: \"Warns on comparison to a boolean literal, as in `x === true`.\",\n        hasFix: true,\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Comparing boolean values to boolean literals is unnecessary, as those expressions will result in booleans too.\\n            Just use the boolean values directly or negate them.\\n        \"], [\"\\n            Comparing boolean values to boolean literals is unnecessary, as those expressions will result in booleans too.\\n            Just use the boolean values directly or negate them.\\n        \"]))),\n        type: \"style\",\n        typescriptOnly: true,\n        requiresTypeInfo: true,\n    };\n    return Rule;\n}(Lint.Rules.TypedRule));\nexports.Rule = Rule;\nfunction walk(ctx, checker) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (utils.isBinaryExpression(node)) {\n            var cmp = getBooleanComparison(node, checker);\n            if (cmp !== undefined) {\n                ctx.addFailureAtNode(cmp.expression, Rule.FAILURE_STRING(cmp.negate), fix(node, cmp));\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction getBooleanComparison(node, checker) {\n    var cmp = deconstructComparison(node);\n    return cmp === undefined ||\n        !utils.isTypeFlagSet(checker.getTypeAtLocation(cmp.expression), ts.TypeFlags.Boolean)\n        ? undefined\n        : cmp;\n}\nfunction fix(node, _a) {\n    var negate = _a.negate, expression = _a.expression;\n    var deleted = node.left === expression\n        ? Lint.Replacement.deleteFromTo(node.left.end, node.end)\n        : Lint.Replacement.deleteFromTo(node.getStart(), node.right.getStart());\n    if (!negate) {\n        return deleted;\n    }\n    else if (needsParenthesesForNegate(expression)) {\n        return [\n            deleted,\n            Lint.Replacement.appendText(node.getStart(), \"!(\"),\n            Lint.Replacement.appendText(node.getEnd(), \")\"),\n        ];\n    }\n    else {\n        return [deleted, Lint.Replacement.appendText(node.getStart(), \"!\")];\n    }\n}\nfunction needsParenthesesForNegate(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.AsExpression:\n        case ts.SyntaxKind.BinaryExpression:\n            return true;\n        default:\n            return false;\n    }\n}\nfunction deconstructComparison(node) {\n    var left = node.left, operatorToken = node.operatorToken, right = node.right;\n    var eq = Lint.getEqualsKind(operatorToken);\n    if (eq === undefined) {\n        return undefined;\n    }\n    var leftValue = booleanFromExpression(left);\n    if (leftValue !== undefined) {\n        return { negate: leftValue !== eq.isPositive, expression: right };\n    }\n    var rightValue = booleanFromExpression(right);\n    if (rightValue !== undefined) {\n        return { negate: rightValue !== eq.isPositive, expression: left };\n    }\n    return undefined;\n}\nfunction booleanFromExpression(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.TrueKeyword:\n            return true;\n        case ts.SyntaxKind.FalseKeyword:\n            return false;\n        default:\n            return undefined;\n    }\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noBooleanLiteralCompareRule.js\n// module id = 2055\n// module chunks = 117"],"sourceRoot":""}