{"version":3,"sources":["../node_modules/tslint/lib/rules/numberLiteralFormatRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","utils_1","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","optionsDescription","options","optionExamples","rationale","Utils","dedent","__makeTemplateObject","type","typescriptOnly","FAILURE_STRING_LEADING_0","FAILURE_STRING_TRAILING_0","FAILURE_STRING_TRAILING_DECIMAL","FAILURE_STRING_LEADING_DECIMAL","FAILURE_STRING_NOT_UPPERCASE","Rules","AbstractRule","ctx","forEachChild","cb","node","isNumericLiteral","text","getText","length","startsWith","isUpperCase","slice","addFailureAtNode","_a","split","num","exp","undefined","addFailureAt","getEnd","includes","fail","endsWith","message","getStart","check"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAuFAC,EAvFAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,IACAK,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAsBA,OAxBAT,EAAAW,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,wBACAC,YAAA,mHACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,UAAAlB,EAAAmB,MAAAC,OAAAzB,MAAAC,EAAAyB,sBAAA,8WACAC,KAAA,QACAC,gBAAA,GAGArB,EAAAsB,yBAAA,gDACAtB,EAAAuB,0BAAA,iDACAvB,EAAAwB,gCAAA,wCACAxB,EAAAyB,+BAAA,0DACAzB,EAAA0B,6BAAA,kDACA1B,EAzBA,CA0BCF,EAAA6B,MAAAC,cAED,SAAAnB,EAAAoB,GACA,IAAAtB,EAAAsB,EAAAtB,WACA,OAAAV,EAAAiC,aAAAvB,EAAA,SAAAwB,EAAAC,GACA,OAAApC,EAAAqC,iBAAAD,GAKA,SAAAA,GAEA,IAAAE,EAAAF,EAAAG,QAAA5B,GACA,GAAA2B,EAAAE,QAAA,EACA,OAEA,GAAAF,EAAAG,WAAA,KAEA,OAAAH,EAAA,IACA,QAIA,YAHAnC,EAAAuC,YAAAJ,EAAAK,MAAA,KACAV,EAAAW,iBAAAR,EAAAhC,EAAA0B,+BAGA,QACA,QACA,OACA,QACA,MACA,QAEA,YADAG,EAAAW,iBAAAR,EAAAhC,EAAAsB,0BAIA,IAAAmB,EAAAP,EAAAQ,MAAA,MAAAC,EAAAF,EAAA,GAAAG,EAAAH,EAAA,QACAI,IAAAD,MAAAP,WAAA,OAAAO,EAAAP,WAAA,OACAR,EAAAiB,aAAAd,EAAAe,SAAAH,EAAAR,OAAAQ,EAAAR,OAAApC,EAAAsB,0BAEA,IAAAqB,EAAAK,SAAA,KACA,OAEAL,EAAAN,WAAA,MACAY,EAAAjD,EAAAyB,gCAEAkB,EAAAO,SAAA,MACAD,EAAAjD,EAAAwB,iCAGAmB,EAAAO,SAAA,MACAD,EAAAjD,EAAAuB,2BAEA,SAAA0B,EAAAE,GACAtB,EAAAiB,aAAAd,EAAAoB,SAAA7C,GAAAoC,EAAAP,OAAAe,IA9CAE,CAAArB,GAEAnC,EAAAiC,aAAAE,EAAAD,KAPAxC,EAAAS","file":"static/js/62.49af7966.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar utils_1 = require(\"../utils\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"number-literal-format\",\n        description: \"Checks that decimal literals should begin with '0.' instead of just '.', and should not end with a trailing '0'.\",\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Helps keep a consistent style with numeric literals.\\n            Non-standard literals are more difficult to scan through and can be a symptom of typos.\\n        \"], [\"\\n            Helps keep a consistent style with numeric literals.\\n            Non-standard literals are more difficult to scan through and can be a symptom of typos.\\n        \"]))),\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING_LEADING_0 = \"Number literal should not have a leading '0'.\";\n    Rule.FAILURE_STRING_TRAILING_0 = \"Number literal should not have a trailing '0'.\";\n    Rule.FAILURE_STRING_TRAILING_DECIMAL = \"Number literal should not end in '.'.\";\n    Rule.FAILURE_STRING_LEADING_DECIMAL = \"Number literal should begin with '0.' and not just '.'.\";\n    Rule.FAILURE_STRING_NOT_UPPERCASE = \"Hexadecimal number literal should be uppercase.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var sourceFile = ctx.sourceFile;\n    return ts.forEachChild(sourceFile, function cb(node) {\n        if (tsutils_1.isNumericLiteral(node)) {\n            return check(node);\n        }\n        return ts.forEachChild(node, cb);\n    });\n    function check(node) {\n        // Apparently the number literal '0.0' has a '.text' of '0', so use '.getText()' instead.\n        var text = node.getText(sourceFile);\n        if (text.length <= 1) {\n            return;\n        }\n        if (text.startsWith(\"0\")) {\n            // Hex/octal/binary number can't have decimal point or exponent, so no other errors possible.\n            switch (text[1]) {\n                case \"x\":\n                    if (!utils_1.isUpperCase(text.slice(2))) {\n                        ctx.addFailureAtNode(node, Rule.FAILURE_STRING_NOT_UPPERCASE);\n                    }\n                    return;\n                case \"o\":\n                case \"b\":\n                    return;\n                case \".\":\n                    break;\n                default:\n                    ctx.addFailureAtNode(node, Rule.FAILURE_STRING_LEADING_0);\n                    return;\n            }\n        }\n        var _a = text.split(/e/i), num = _a[0], exp = _a[1];\n        if (exp !== undefined && (exp.startsWith(\"-0\") || exp.startsWith(\"0\"))) {\n            ctx.addFailureAt(node.getEnd() - exp.length, exp.length, Rule.FAILURE_STRING_LEADING_0);\n        }\n        if (!num.includes(\".\")) {\n            return;\n        }\n        if (num.startsWith(\".\")) {\n            fail(Rule.FAILURE_STRING_LEADING_DECIMAL);\n        }\n        if (num.endsWith(\".\")) {\n            fail(Rule.FAILURE_STRING_TRAILING_DECIMAL);\n        }\n        // Allow '10', but not '1.0'\n        if (num.endsWith(\"0\")) {\n            fail(Rule.FAILURE_STRING_TRAILING_0);\n        }\n        function fail(message) {\n            ctx.addFailureAt(node.getStart(sourceFile), num.length, message);\n        }\n    }\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/numberLiteralFormatRule.js\n// module id = 2116\n// module chunks = 62"],"sourceRoot":""}