{"version":3,"sources":["../node_modules/tslint/lib/rules/objectLiteralKeyQuotesRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","UNNEEDED_QUOTES","name","UNQUOTED_PROPERTY","prototype","sourceFile","applyWithWalker","ObjectLiteralKeyQuotesWalker","ruleName","option","ruleArguments","length","metadata","description","descriptionDetails","Utils","dedent","templateObject_1","__makeTemplateObject","hasFix","optionsDescription","templateObject_2","options","type","enum","optionExamples","typescriptOnly","INCONSISTENT_PROPERTY","Rules","AbstractRule","walk","_this","cb","node","isObjectLiteralExpression","propertyNames","mapDefined","properties","mapPropertyName","outer","_i","propertyNames_1","kind","SyntaxKind","StringLiteral","reportMissing","_a","propertyNames_2","isValidPropertyName","text","reportUnnecessary","quoted","i","hasInconsistentQuotes","addFailureAt","getStart","_b","propertyNames_3","_c","propertyNames_4","propertyName","_d","propertyNames_5","forEachChild","start","addFailure","end","Replacement","replaceFromTo","addFailureAtNode","replaceNode","AbstractWalker","property","ShorthandPropertyAssignment","SpreadAssignment","ComputedPropertyName"],"mappings":"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","file":"static/js/61.edcbc5fb.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_ALWAYS = \"always\";\nvar OPTION_AS_NEEDED = \"as-needed\";\nvar OPTION_CONSISTENT = \"consistent\";\nvar OPTION_CONSISTENT_AS_NEEDED = \"consistent-as-needed\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.UNNEEDED_QUOTES = function (name) {\n        return \"Unnecessarily quoted property '\" + name + \"' found.\";\n    };\n    Rule.UNQUOTED_PROPERTY = function (name) {\n        return \"Unquoted property '\" + name + \"' found.\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithWalker(new ObjectLiteralKeyQuotesWalker(sourceFile, this.ruleName, {\n            option: this.ruleArguments.length === 0 ? \"always\" : this.ruleArguments[0],\n        }));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"object-literal-key-quotes\",\n        description: \"Enforces consistent object literal property quote style.\",\n        descriptionDetails: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Object literal property names can be defined in two ways: using literals or using strings.\\n            For example, these two objects are equivalent:\\n\\n            var object1 = {\\n                property: true\\n            };\\n\\n            var object2 = {\\n                \\\"property\\\": true\\n            };\\n\\n            In many cases, it doesn\\u2019t matter if you choose to use an identifier instead of a string\\n            or vice-versa. Even so, you might decide to enforce a consistent style in your code.\\n\\n            This rules lets you enforce consistent quoting of property names. Either they should always\\n            be quoted (default behavior) or quoted only as needed (\\\"as-needed\\\").\"], [\"\\n            Object literal property names can be defined in two ways: using literals or using strings.\\n            For example, these two objects are equivalent:\\n\\n            var object1 = {\\n                property: true\\n            };\\n\\n            var object2 = {\\n                \\\"property\\\": true\\n            };\\n\\n            In many cases, it doesn\\u2019t matter if you choose to use an identifier instead of a string\\n            or vice-versa. Even so, you might decide to enforce a consistent style in your code.\\n\\n            This rules lets you enforce consistent quoting of property names. Either they should always\\n            be quoted (default behavior) or quoted only as needed (\\\"as-needed\\\").\"]))),\n        hasFix: true,\n        optionsDescription: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            Possible settings are:\\n\\n            * `\\\"\", \"\\\"`: Property names should always be quoted. (This is the default.)\\n            * `\\\"\", \"\\\"`: Only property names which require quotes may be quoted (e.g. those with spaces in them).\\n            * `\\\"\", \"\\\"`: Property names should either all be quoted or unquoted.\\n            * `\\\"\", \"\\\"`: If any property name requires quotes, then all properties must be quoted. Otherwise, no\\n            property names may be quoted.\\n\\n            For ES6, computed property names (`{[name]: value}`) and methods (`{foo() {}}`) never need\\n            to be quoted.\"], [\"\\n            Possible settings are:\\n\\n            * \\\\`\\\"\", \"\\\"\\\\`: Property names should always be quoted. (This is the default.)\\n            * \\\\`\\\"\", \"\\\"\\\\`: Only property names which require quotes may be quoted (e.g. those with spaces in them).\\n            * \\\\`\\\"\", \"\\\"\\\\`: Property names should either all be quoted or unquoted.\\n            * \\\\`\\\"\", \"\\\"\\\\`: If any property name requires quotes, then all properties must be quoted. Otherwise, no\\n            property names may be quoted.\\n\\n            For ES6, computed property names (\\\\`{[name]: value}\\\\`) and methods (\\\\`{foo() {}}\\\\`) never need\\n            to be quoted.\"])), OPTION_ALWAYS, OPTION_AS_NEEDED, OPTION_CONSISTENT, OPTION_CONSISTENT_AS_NEEDED),\n        options: {\n            type: \"string\",\n            enum: [OPTION_ALWAYS, OPTION_AS_NEEDED, OPTION_CONSISTENT, OPTION_CONSISTENT_AS_NEEDED],\n        },\n        optionExamples: [[true, OPTION_AS_NEEDED], [true, OPTION_ALWAYS]],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.INCONSISTENT_PROPERTY = \"All property names in this object literal must be consistently quoted or unquoted.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar ObjectLiteralKeyQuotesWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(ObjectLiteralKeyQuotesWalker, _super);\n    function ObjectLiteralKeyQuotesWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ObjectLiteralKeyQuotesWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        var cb = function (node) {\n            if (tsutils_1.isObjectLiteralExpression(node)) {\n                var propertyNames = Lint.Utils.mapDefined(node.properties, mapPropertyName);\n                outer: switch (_this.options.option) {\n                    case \"always\":\n                        for (var _i = 0, propertyNames_1 = propertyNames; _i < propertyNames_1.length; _i++) {\n                            var name = propertyNames_1[_i];\n                            if (name.kind !== ts.SyntaxKind.StringLiteral) {\n                                _this.reportMissing(name);\n                            }\n                        }\n                        break;\n                    case \"as-needed\":\n                        for (var _a = 0, propertyNames_2 = propertyNames; _a < propertyNames_2.length; _a++) {\n                            var name = propertyNames_2[_a];\n                            if (name.kind === ts.SyntaxKind.StringLiteral &&\n                                tsutils_1.isValidPropertyName(name.text)) {\n                                _this.reportUnnecessary(name);\n                            }\n                        }\n                        break;\n                    case \"consistent\":\n                        if (hasInconsistentQuotes(propertyNames)) {\n                            // No fix -- don't know if they would want to add quotes or remove them.\n                            _this.addFailureAt(node.getStart(_this.sourceFile), 1, Rule.INCONSISTENT_PROPERTY);\n                        }\n                        break;\n                    case \"consistent-as-needed\":\n                        for (var _b = 0, propertyNames_3 = propertyNames; _b < propertyNames_3.length; _b++) {\n                            var name = propertyNames_3[_b];\n                            if (name.kind === ts.SyntaxKind.StringLiteral &&\n                                !tsutils_1.isValidPropertyName(name.text)) {\n                                for (var _c = 0, propertyNames_4 = propertyNames; _c < propertyNames_4.length; _c++) {\n                                    var propertyName = propertyNames_4[_c];\n                                    if (propertyName.kind !== ts.SyntaxKind.StringLiteral) {\n                                        _this.reportMissing(propertyName);\n                                    }\n                                }\n                                break outer;\n                            }\n                        }\n                        for (var _d = 0, propertyNames_5 = propertyNames; _d < propertyNames_5.length; _d++) {\n                            var name = propertyNames_5[_d];\n                            if (name.kind === ts.SyntaxKind.StringLiteral) {\n                                _this.reportUnnecessary(name);\n                            }\n                        }\n                }\n            }\n            return ts.forEachChild(node, cb);\n        };\n        return ts.forEachChild(sourceFile, cb);\n    };\n    ObjectLiteralKeyQuotesWalker.prototype.reportMissing = function (node) {\n        var start = node.getStart(this.sourceFile);\n        this.addFailure(start, node.end, Rule.UNQUOTED_PROPERTY(node.text), Lint.Replacement.replaceFromTo(start, node.end, \"\\\"\" + node.text + \"\\\"\"));\n    };\n    ObjectLiteralKeyQuotesWalker.prototype.reportUnnecessary = function (node) {\n        this.addFailureAtNode(node, Rule.UNNEEDED_QUOTES(node.text), Lint.Replacement.replaceNode(node, node.text, this.sourceFile));\n    };\n    return ObjectLiteralKeyQuotesWalker;\n}(Lint.AbstractWalker));\nfunction mapPropertyName(property) {\n    if (property.kind === ts.SyntaxKind.ShorthandPropertyAssignment ||\n        property.kind === ts.SyntaxKind.SpreadAssignment ||\n        property.name.kind === ts.SyntaxKind.ComputedPropertyName) {\n        return undefined;\n    }\n    return property.name;\n}\nfunction hasInconsistentQuotes(properties) {\n    if (properties.length < 2) {\n        return false;\n    }\n    var quoted = properties[0].kind === ts.SyntaxKind.StringLiteral;\n    for (var i = 1; i < properties.length; ++i) {\n        if (quoted !== (properties[i].kind === ts.SyntaxKind.StringLiteral)) {\n            return true;\n        }\n    }\n    return false;\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/objectLiteralKeyQuotesRule.js\n// module id = 2117\n// module chunks = 61"],"sourceRoot":""}