{"version":3,"sources":["../node_modules/tslint/lib/rules/noMagicNumbersRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","ts","tsutils_1","Lint","utils_1","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","num","prototype","sourceFile","applyWithWalker","NoMagicNumbersWalker","ruleName","ruleArguments","length","DEFAULT_ALLOWED","metadata","description","Utils","dedent","templateObject_1","__makeTemplateObject","rationale","templateObject_2","optionsDescription","options","type","items","minLength","optionExamples","typescriptOnly","ALLOWED_NODES","Set","SyntaxKind","ExportAssignment","FirstAssignment","LastAssignment","PropertyAssignment","ShorthandPropertyAssignment","VariableDeclaration","VariableDeclarationList","EnumMember","PropertyDeclaration","Parameter","Rules","AbstractRule","walk","_this","cb","node","isCallExpression","isIdentifier","expression","text","undefined","kind","NumericLiteral","checkNumericLiteral","isNegativeNumberLiteral","operand","forEachChild","has","parent","some","allowedNum","is","parseFloat","addFailureAtNode","AbstractWalker"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,IACAE,EAAAF,EAAA,KACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,KACAK,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAuCA,OAzCAT,EAAAW,UAAAL,EAAAC,GAIAD,EAAAM,eAAA,SAAAC,GACA,0CAAAA,GAEAP,EAAAQ,UAAAN,MAAA,SAAAO,GACA,OAAAN,KAAAO,gBAAA,IAAAC,EAAAF,EAAAN,KAAAS,SAAAT,KAAAU,cAAAC,OAAA,EAAAX,KAAAU,cAAAb,EAAAe,mBAGAf,EAAAgB,UACAJ,SAAA,mBACAK,YAAAnB,EAAAoB,MAAAC,OAAAC,MAAA1B,EAAA2B,sBAAA,sXACAC,UAAAxB,EAAAoB,MAAAC,OAAAI,MAAA7B,EAAA2B,sBAAA,4WACAG,mBAAA,6BACAC,SACAC,KAAA,QACAC,OACAD,KAAA,UAEAE,UAAA,GAEAC,iBAAA,cACAH,KAAA,aACAI,gBAAA,GAGA9B,EAAA+B,cAAA,IAAAC,KACApC,EAAAqC,WAAAC,iBACAtC,EAAAqC,WAAAE,gBACAvC,EAAAqC,WAAAG,eACAxC,EAAAqC,WAAAI,mBACAzC,EAAAqC,WAAAK,4BACA1C,EAAAqC,WAAAM,oBACA3C,EAAAqC,WAAAO,wBACA5C,EAAAqC,WAAAQ,WACA7C,EAAAqC,WAAAS,oBACA9C,EAAAqC,WAAAU,YAEA3C,EAAAe,kBAAA,OACAf,EA1CA,CA2CCF,EAAA8C,MAAAC,cACDrD,EAAAQ,OACA,IAgCAoB,EAAAG,EAhCAZ,EAAA,SAAAV,GAEA,SAAAU,IACA,cAAAV,KAAAC,MAAAC,KAAAC,YAAAD,KA2BA,OA7BAT,EAAAW,UAAAM,EAAAV,GAIAU,EAAAH,UAAAsC,KAAA,SAAArC,GACA,IAAAsC,EAAA5C,KACA6C,EAAA,SAAAC,GACA,OAAApD,EAAAqD,iBAAAD,IACApD,EAAAsD,aAAAF,EAAAG,aACA,aAAAH,EAAAG,WAAAC,KACA,IAAAJ,EAAA7C,UAAAU,YAAAwC,EAAAN,EAAAC,EAAA7C,UAAA,IAEA6C,EAAAM,OAAA3D,EAAAqC,WAAAuB,eACAT,EAAAU,oBAAAR,IAAAI,MAEAtD,EAAA2D,wBAAAT,GACAF,EAAAU,oBAAAR,EAAA,IAAAA,EAAAU,QAAAN,MAEAzD,EAAAgE,aAAAX,EAAAD,IAEA,OAAApD,EAAAgE,aAAAnD,EAAAuC,IAEArC,EAAAH,UAAAiD,oBAAA,SAAAR,EAAA1C,GAEAP,EAAA+B,cAAA8B,IAAAZ,EAAAa,OAAAP,OACApD,KAAAsB,QAAAsC,KAAA,SAAAC,GAAsD,OAAA1E,OAAA2E,GAAAD,EAAAE,WAAA3D,OACtDJ,KAAAgE,iBAAAlB,EAAAjD,EAAAM,eAAAC,KAGAI,EA9BA,CA+BCb,EAAAsE","file":"static/js/93.6633a1a1.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar ts = require(\"typescript\");\nvar tsutils_1 = require(\"tsutils\");\nvar Lint = require(\"../index\");\nvar utils_1 = require(\"../language/utils\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.FAILURE_STRING = function (num) {\n        return \"'magic numbers' are not allowed: \" + num;\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithWalker(new NoMagicNumbersWalker(sourceFile, this.ruleName, this.ruleArguments.length > 0 ? this.ruleArguments : Rule.DEFAULT_ALLOWED));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-magic-numbers\",\n        description: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Disallows the use constant number values outside of variable assignments.\\n            When no list of allowed values is specified, -1, 0 and 1 are allowed by default.\"], [\"\\n            Disallows the use constant number values outside of variable assignments.\\n            When no list of allowed values is specified, -1, 0 and 1 are allowed by default.\"]))),\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            Magic numbers should be avoided as they often lack documentation.\\n            Forcing them to be stored in variables gives them implicit documentation.\\n        \"], [\"\\n            Magic numbers should be avoided as they often lack documentation.\\n            Forcing them to be stored in variables gives them implicit documentation.\\n        \"]))),\n        optionsDescription: \"A list of allowed numbers.\",\n        options: {\n            type: \"array\",\n            items: {\n                type: \"number\",\n            },\n            minLength: 1,\n        },\n        optionExamples: [true, [true, 1, 2, 3]],\n        type: \"typescript\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.ALLOWED_NODES = new Set([\n        ts.SyntaxKind.ExportAssignment,\n        ts.SyntaxKind.FirstAssignment,\n        ts.SyntaxKind.LastAssignment,\n        ts.SyntaxKind.PropertyAssignment,\n        ts.SyntaxKind.ShorthandPropertyAssignment,\n        ts.SyntaxKind.VariableDeclaration,\n        ts.SyntaxKind.VariableDeclarationList,\n        ts.SyntaxKind.EnumMember,\n        ts.SyntaxKind.PropertyDeclaration,\n        ts.SyntaxKind.Parameter,\n    ]);\n    Rule.DEFAULT_ALLOWED = [-1, 0, 1];\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar NoMagicNumbersWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(NoMagicNumbersWalker, _super);\n    function NoMagicNumbersWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NoMagicNumbersWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        var cb = function (node) {\n            if (tsutils_1.isCallExpression(node) &&\n                tsutils_1.isIdentifier(node.expression) &&\n                node.expression.text === \"parseInt\") {\n                return node.arguments.length === 0 ? undefined : cb(node.arguments[0]);\n            }\n            if (node.kind === ts.SyntaxKind.NumericLiteral) {\n                return _this.checkNumericLiteral(node, node.text);\n            }\n            if (utils_1.isNegativeNumberLiteral(node)) {\n                return _this.checkNumericLiteral(node, \"-\" + node.operand.text);\n            }\n            return ts.forEachChild(node, cb);\n        };\n        return ts.forEachChild(sourceFile, cb);\n    };\n    NoMagicNumbersWalker.prototype.checkNumericLiteral = function (node, num) {\n        /* Using Object.is() to differentiate between pos/neg zero */\n        if (!Rule.ALLOWED_NODES.has(node.parent.kind) &&\n            !this.options.some(function (allowedNum) { return Object.is(allowedNum, parseFloat(num)); })) {\n            this.addFailureAtNode(node, Rule.FAILURE_STRING(num));\n        }\n    };\n    return NoMagicNumbersWalker;\n}(Lint.AbstractWalker));\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noMagicNumbersRule.js\n// module id = 2080\n// module chunks = 93"],"sourceRoot":""}