{"version":3,"sources":["../node_modules/tslint/lib/rules/preferMethodSignatureRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","METH_SIGN_STRING","ps","type","questionToken","result","name","getText","undefined","isFunctionTypeNode","typeParameters","map","tp","join","parameters","v","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","hasFix","optionsDescription","options","optionExamples","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","isPropertySignature","addFailureAtNode","Replacement","replaceNode"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAkCA,OApCAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,iBAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAC,KAAAC,EAAAF,EAAAE,cACAC,EAAAH,EAAAI,KAAAC,UAIA,QAHAC,IAAAJ,IACAC,GAAA,UAEAG,IAAAL,GAAAX,EAAAiB,mBAAAN,SAAAK,IAAAL,OAAA,CACA,QAAAK,IAAAL,EAAAO,eAEAL,GAAA,IADAF,EAAAO,eAAAC,IAAA,SAAAC,GAAiE,OAAAA,EAAAL,YAAuBM,KAAA,MACxF,IAGAR,GAAA,IADAF,EAAAW,WAAAH,IAAA,SAAAI,GAAyD,OAAAA,EAAAR,YAAsBM,KAAA,MAC/E,MAAAV,OAAAI,UAAA,IAEA,OAAAF,GAEAV,EAAAqB,UAAAnB,MAAA,SAAAoB,GACA,OAAAnB,KAAAoB,kBAAAD,EAAAE,IAGAxB,EAAAyB,UACAC,SAAA,0BACAC,YAAA,uEACAC,QAAA,EACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAvB,KAAA,QACAwB,gBAAA,GAGAhC,EAAAiC,eAAA,2EACAjC,EArCA,CAsCCD,EAAAmC,MAAAC,cAED,SAAAX,EAAAY,GACA,OAAAtC,EAAAuC,aAAAD,EAAAd,WAAA,SAAAgB,EAAAC,GACA,GAAA1C,EAAA2C,oBAAAD,GAAA,CACA,IAAA/B,EAAA+B,EAAA/B,UACAK,IAAAL,GAAAX,EAAAiB,mBAAAN,IACA4B,EAAAK,iBAAAF,EAAA5B,KAAAX,EAAAiC,oBAAApB,IAAAL,YACAK,GACAd,EAAA2C,YAAAC,YAAAJ,EAAAvC,EAAAM,iBAAAiC,MAGA,OAAAzC,EAAAuC,aAAAE,EAAAD,KAXA7C,EAAAO","file":"static/js/53.23a85a30.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.METH_SIGN_STRING = function (ps) {\n        var type = ps.type, questionToken = ps.questionToken;\n        var result = ps.name.getText();\n        if (questionToken !== undefined) {\n            result += \"?\";\n        }\n        if (type !== undefined && tsutils_1.isFunctionTypeNode(type) && type.type !== undefined) {\n            if (type.typeParameters !== undefined) {\n                var tps = type.typeParameters.map(function (tp) { return tp.getText(); }).join(\", \");\n                result += \"<\" + tps + \">\";\n            }\n            var args = type.parameters.map(function (v) { return v.getText(); }).join(\", \");\n            result += \"(\" + args + \"): \" + type.type.getText() + \";\";\n        }\n        return result;\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"prefer-method-signature\",\n        description: \"Prefer `foo(): void` over `foo: () => void` in interfaces and types.\",\n        hasFix: true,\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Use a method signature instead of a property signature of function type.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isPropertySignature(node)) {\n            var type = node.type;\n            if (type !== undefined && tsutils_1.isFunctionTypeNode(type)) {\n                ctx.addFailureAtNode(node.name, Rule.FAILURE_STRING, type.type === undefined\n                    ? undefined\n                    : [Lint.Replacement.replaceNode(node, Rule.METH_SIGN_STRING(node))]);\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/preferMethodSignatureRule.js\n// module id = 2128\n// module chunks = 53"],"sourceRoot":""}